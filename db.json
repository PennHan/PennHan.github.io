{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1542515485396},{"_id":"source/CNAME","hash":"13bb49c0ca7bf75e30804a79a31cc8e7ba9b1b02","modified":1542515485397},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514748788000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1514748788000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1514748788000},{"_id":"themes/next/_config.yml","hash":"4e41958871e4e60f8a63c418c0cf67e24ae5d7ef","modified":1542520828288},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514748788000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514748788000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514748788000},{"_id":"source/404/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1542515485396},{"_id":"source/404/index.html","hash":"2729e2f84c7c55f6413422ac172295da28993704","modified":1542515485396},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1542520757007},{"_id":"source/_posts/Kotlin初探.md","hash":"536818c275f86665018faaa2e8210d4ed1e39aca","modified":1542515485397},{"_id":"source/_posts/android-JNI实现字符串加密解密和验证-20170312.md","hash":"af1188e36da8dc4dc709aebf25219c688f10646c","modified":1542515485397},{"_id":"source/_posts/android-deviceId-20170310.md","hash":"3eac7dd2088bd73d4b2fc158628b561e35a03184","modified":1542515485397},{"_id":"source/_posts/other-firstblog-20170210.md","hash":"7fbe872a04f40ed0c5c138633786d7167f654820","modified":1542515485398},{"_id":"source/_posts/前端脱离后台的敏捷开发.md","hash":"6c4d9057265db037a588c4da1a0e10a738c85baf","modified":1542515485398},{"_id":"source/_posts/微信小程序项目开发总结.md","hash":"3426f5e8699756c2c199666bc48e3c547750eb74","modified":1542515485398},{"_id":"source/_posts/通过postman提升接口测试效率.md","hash":"a573e73fc783cba8dde1c411deba0f6a47f0d4d9","modified":1542515485398},{"_id":"source/about/index.md","hash":"8e44d700cf70d0c5d8181f21cb15b2f3368d7d5b","modified":1542515485399},{"_id":"source/categories/index.md","hash":"e74ae94b717545df275fd0c0a359405000d672c3","modified":1542515485399},{"_id":"source/tags/index.md","hash":"0663f5e84c1fc463040497d0dbf2da2a945b9be6","modified":1542515485399},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514748788000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514748788000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1514748788000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514748788000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514748788000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514748788000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514748788000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514748788000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514748788000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514748788000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514748788000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514748788000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514748788000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1514748788000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514748788000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514748788000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1514748788000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514748788000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514748788000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514748788000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514748788000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1514748788000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514748788000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514748788000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514748788000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514748788000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514748788000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514748788000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514748788000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514748788000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514748788000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514748788000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514748788000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1514748788000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514748788000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1514748788000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514748788000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1514748788000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1514748788000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1514748788000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1514748788000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514748788000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514748788000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514748788000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514748788000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514748788000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514748788000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514748788000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514748788000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514748788000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514748788000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514748788000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514748788000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514748788000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514748788000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514748788000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514748788000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514748788000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514748788000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514748788000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514748788000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514748788000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514748788000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514748788000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514748788000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1514748788000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514748788000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514748788000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514748788000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1514748788000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1514748788000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514748788000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514748788000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514748788000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514748788000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514748788000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514748788000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514748788000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514748788000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514748788000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514748788000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514748788000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514748788000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514748788000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514748788000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514748788000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514748788000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514748788000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514748788000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514748788000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514748788000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514748788000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514748788000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514748788000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514748788000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514748788000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514748788000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514748788000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514748788000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514748788000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514748788000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514748788000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1514748788000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514748788000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514748788000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514748788000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514748788000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514748788000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514748788000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514748788000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514748788000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514748788000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514748788000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514748788000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514748788000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514748788000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514748788000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514748788000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514748788000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514748788000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514748788000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514748788000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514748788000},{"_id":"public/about/index.html","hash":"db9bd34cd78e54fae68e4c6200fb1f3aefc6328f","modified":1542521039003},{"_id":"public/categories/index.html","hash":"4b6e00668fc8573ae887e6af7924d6912d54bf69","modified":1542521039003},{"_id":"public/tags/index.html","hash":"9b38368a69bb8dee8299e642e737ae44041ddb97","modified":1542521039004},{"_id":"public/archives/index.html","hash":"8464e35c122719dea2e663038361c9b5f67e6671","modified":1542521039004},{"_id":"public/2017/02/10/other-firstblog-20170210/index.html","hash":"01cc946f126c88d897e0ff1c66b1db96324c6e72","modified":1542521039004},{"_id":"public/tags/Android/index.html","hash":"196d26189083aa635c9a319021d7491b53938507","modified":1542521039004},{"_id":"public/tags/前端/index.html","hash":"d1443ef9b785995ea1b8324032c2d91a9d821351","modified":1542521039004},{"_id":"public/tags/小程序/index.html","hash":"3b84b824c362a52b4e3c5ec850baa547aab14434","modified":1542521039004},{"_id":"public/404/index.html","hash":"eb182e3c40db4ae6123b0c22dc923dd76fe43691","modified":1542521039004},{"_id":"public/2018/11/18/前端脱离后台的敏捷开发/index.html","hash":"6c8ce4766097a8dc6b27577659e49721f4185f72","modified":1542521039004},{"_id":"public/2018/01/10/android-deviceId-20170310/index.html","hash":"9eb6435d88e68725571b7784cc1509cfa0b39305","modified":1542521039004},{"_id":"public/2017/06/21/Kotlin初探/index.html","hash":"078a92da090a583960f362a62cf348bb8172828b","modified":1542521039004},{"_id":"public/2017/06/16/微信小程序项目开发总结/index.html","hash":"af1efe4518d44898e3022b89c42aa8e846b1c188","modified":1542521039004},{"_id":"public/2017/05/10/通过postman提升接口测试效率/index.html","hash":"ebd3c159337b9186e576d4d520896067c1d62a7e","modified":1542521039005},{"_id":"public/2017/03/12/android-JNI实现字符串加密解密和验证-20170312/index.html","hash":"09fb1c36ce7a3c5ba7deb8e51eaf678eb8f7dbb6","modified":1542521039005},{"_id":"public/index.html","hash":"ab3ab7eae141334cc6e3e2793eb8c805cf6a248c","modified":1542521039005},{"_id":"public/CNAME","hash":"13bb49c0ca7bf75e30804a79a31cc8e7ba9b1b02","modified":1542521039011},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1542521039011},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1542521039011},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1542521039011},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1542521039011},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1542521039011},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1542521039012},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1542521039012},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1542521039012},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1542521039012},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1542521039012},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1542521039012},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542521039443},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1542521039443},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1542521039445},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542521039445},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1542521039445},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1542521039445},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1542521039445},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1542521039445},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1542521039445},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1542521039445},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1542521039445},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1542521039445},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1542521039445},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1542521039446},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1542521039446},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1542521039446},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1542521039446},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1542521039446},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1542521039446},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1542521039446},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1542521039446},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1542521039446},{"_id":"public/css/main.css","hash":"a231b7611fcd68b3424b61b043b3768c91c6417f","modified":1542521039477},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1542521039489},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1542521039505},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1542521039515},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1542521039515},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1542521039516},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1542521039516},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1542521039516},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1542521039516},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1542521039516},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1542521039516},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1542521039516},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1542521039516},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1542521039516},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1542521039516},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1542521039516},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1542521039516},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1542521039516},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1542521039517},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1542521039517},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1542521039517},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1542521039517},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1542521039517},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1542521039517},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1542521039517},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1542521039517},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1542521039517},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1542521039517},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1542521039517},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1542521039517},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1542521039518},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1542521039518},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1542521039518},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1542521039518},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1542521039518},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1542521039518},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1542521039518},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1542521039518},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1542521039518},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1542521039518},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1542521039518},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1542521039518},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1542521039518},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1542521039519},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1542521039519},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1542521039519},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1542521039519},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1542521039519},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1542521039519},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1542521039519},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1542521039519},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1542521039519},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1542521039519},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1542521039519},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1542521039519},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1542521039520},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1542521039520},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1542521039520},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1542521039520},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1542521039520},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1542521039520},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1542521039520},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1542521039520},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1542521039521},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1542521039521},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1542521039521},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1542521039521},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1542521039521},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1542521039521},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1542521039521},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1542521039521},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1542521039521},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1542521039521},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1542521039522},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1542521039522},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1542521039548}],"Category":[],"Data":[],"Page":[{"_content":"<!doctype html>\n\n\n\n  \n\n\n<html class=\"theme-next mist use-motion\" lang=\"zh-Hans\">\n<head>\n  <meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n\n\n\n<meta http-equiv=\"Cache-Control\" content=\"no-transform\" />\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n\n\n\n  <meta name=\"google-site-verification\" content=\"DUmCtFr1ErmQ5Jp1sg8_dHp04fMWExpEr-N2XlKGgLw\" />\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\" />\n\n\n\n\n  \n  \n  \n  \n\n  \n    \n    \n  \n\n  \n\n  \n\n  \n\n  \n\n  \n    \n    \n    <link href=\"//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n  \n\n\n\n\n\n\n<link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\" />\n\n<link href=\"/css/main.css?v=5.1.0\" rel=\"stylesheet\" type=\"text/css\" />\n\n\n  <meta name=\"keywords\" content=\"Hexo, NexT\" />\n\n\n\n\n\n\n\n\n  <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/favicon.ico?v=5.1.0\" />\n\n\n\n\n\n\n<meta property=\"og:type\" content=\"website\">\n<meta property=\"og:title\" content=\"PennHan\">\n<meta property=\"og:url\" content=\"http://yoursite.com/404.html\">\n<meta property=\"og:site_name\" content=\"PennHan\">\n<meta property=\"og:updated_time\" content=\"2017-03-24T06:42:30.000Z\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:title\" content=\"PennHan\">\n\n\n\n<script type=\"text/javascript\" id=\"hexo.configurations\">\n  var NexT = window.NexT || {};\n  var CONFIG = {\n    root: '/',\n    scheme: 'Mist',\n    sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"offset_float\":0,\"b2t\":false,\"scrollpercent\":false},\n    fancybox: true,\n    motion: true,\n    duoshuo: {\n      userId: '0',\n      author: '博主'\n    },\n    algolia: {\n      applicationID: '',\n      apiKey: '',\n      indexName: '',\n      hits: {\"per_page\":10},\n      labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n    }\n  };\n</script>\n\n\n\n  <link rel=\"canonical\" href=\"http://yoursite.com/404.html\"/>\n\n\n\n\n\n  <title>\n  \n\n  \n     | PennHan\n  \n</title>\n</head>\n\n<body itemscope itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n    \n  \n\n  <div class=\"container one-collumn sidebar-position-left  \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n      <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n  <div class=\"site-meta \">\n    \n\n    <div class=\"custom-logo-site-title\">\n      <a href=\"/\"  class=\"brand\" rel=\"start\">\n        <span class=\"logo-line-before\"><i></i></span>\n        <span class=\"site-title\">PennHan</span>\n        <span class=\"logo-line-after\"><i></i></span>\n      </a>\n    </div>\n      \n        <p class=\"site-subtitle\"></p>\n      \n  </div>\n\n  <div class=\"site-nav-toggle\">\n    <button>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n    </button>\n  </div>\n</div>\n\n<nav class=\"site-nav\">\n  \n\n  \n    <ul id=\"menu\" class=\"menu\">\n      \n        \n        <li class=\"menu-item menu-item-home\">\n          <a href=\"/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br />\n            \n            首页\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-categories\">\n          <a href=\"/categories\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-th\"></i> <br />\n            \n            分类\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-archives\">\n          <a href=\"/archives\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br />\n            \n            归档\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-tags\">\n          <a href=\"/tags\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br />\n            \n            标签\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-about\">\n          <a href=\"/about\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-user\"></i> <br />\n            \n            关于\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-commonweal\">\n          <a href=\"/404.html\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-heartbeat\"></i> <br />\n            \n            公益404\n          </a>\n        </li>\n      \n\n      \n    </ul>\n  \n\n  \n</nav>\n\n\n\n </div>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n      <div class=\"main-inner\">\n        <div class=\"content-wrap\">\n          <div id=\"content\" class=\"content\">\n            \n\n  <div id=\"posts\" class=\"posts-expand\">\n  <header class=\"post-header\">\n\n\t<h1 class=\"post-title\" itemprop=\"name headline\"></h1>\n\n\n\n</header>\n\n    \n    \n      <!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n    \n    \n  <div class=\"comments\" id=\"comments\">\n    \n  </div>\n\n  </div>\n\n          \n          </div>\n          \n\n\n          \n  <div class=\"comments\" id=\"comments\">\n    \n  </div>\n\n\n        </div>\n        \n          \n  \n  <div class=\"sidebar-toggle\">\n    <div class=\"sidebar-toggle-line-wrap\">\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n    </div>\n  </div>\n\n  <aside id=\"sidebar\" class=\"sidebar\">\n    <div class=\"sidebar-inner\">\n\n      \n\n      \n\n      <section class=\"site-overview sidebar-panel sidebar-panel-active\">\n        <div class=\"site-author motion-element\" itemprop=\"author\" itemscope itemtype=\"http://schema.org/Person\">\n          <img class=\"site-author-image\" itemprop=\"image\"\n               src=\"/images/avatar.jpg\"\n               alt=\"PennHan\" />\n          <p class=\"site-author-name\" itemprop=\"name\">PennHan</p>\n           \n              <p class=\"site-description motion-element\" itemprop=\"description\">颜值与才华并存 -_-!</p>\n          \n        </div>\n        <nav class=\"site-state motion-element\">\n\n          \n            <div class=\"site-state-item site-state-posts\">\n              <a href=\"/archives\">\n                <span class=\"site-state-item-count\">8</span>\n                <span class=\"site-state-item-name\">日志</span>\n              </a>\n            </div>\n          \n\n          \n            \n            \n            <div class=\"site-state-item site-state-categories\">\n              <a href=\"/categories/index.html\">\n                <span class=\"site-state-item-count\">3</span>\n                <span class=\"site-state-item-name\">分类</span>\n              </a>\n            </div>\n          \n\n          \n            \n            \n            <div class=\"site-state-item site-state-tags\">\n              <a href=\"/tags/index.html\">\n                <span class=\"site-state-item-count\">8</span>\n                <span class=\"site-state-item-name\">标签</span>\n              </a>\n            </div>\n          \n\n        </nav>\n\n        \n\n        <div class=\"links-of-author motion-element\">\n          \n            \n              <span class=\"links-of-author-item\">\n                <a href=\"https://github.com/PennHan\" target=\"_blank\" title=\"GitHub\">\n                  \n                    <i class=\"fa fa-fw fa-github\"></i>\n                  \n                  GitHub\n                </a>\n              </span>\n            \n              <span class=\"links-of-author-item\">\n                <a href=\"http://weibo.com/pennhan1990\" target=\"_blank\" title=\"微博\">\n                  \n                    <i class=\"fa fa-fw fa-globe\"></i>\n                  \n                  微博\n                </a>\n              </span>\n            \n          \n        </div>\n\n        \n        \n\n        \n        \n\n        \n\n\n      </section>\n\n      \n\n      \n\n    </div>\n  </aside>\n\n\n        \n      </div>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n      <div class=\"footer-inner\">\n        <div class=\"copyright\" >\n  \n  &copy;  2016 - \n  <span itemprop=\"copyrightYear\">2017</span>\n  <span class=\"with-love\">\n    <i class=\"fa fa-heart\"></i>\n  </span>\n  <span class=\"author\" itemprop=\"copyrightHolder\">PennHan</span>\n</div>\n\n\n<div class=\"powered-by\">\n  由 <a class=\"theme-link\" href=\"https://hexo.io\">Hexo</a> 强力驱动\n</div>\n\n<div class=\"theme-info\">\n  主题 -\n  <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n    NexT.Mist\n  </a>\n</div>\n\n\n        \n\n        \n      </div>\n    </footer>\n\n    \n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n        \n      </div>\n    \n    \n  </div>\n\n  \n\n<script type=\"text/javascript\">\n  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n    window.Promise = null;\n  }\n</script>\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n  \n  <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n\n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.0\"></script>\n\n\n\n  \n  \n\n  \n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.0\"></script>\n\n\n\n  \n\n\n\n  \n\n\n\n\n\t\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n  \n  \n\n  \n\n  \n\n  \n\n  \n\n\n  \n\n</body>\n</html>\n","source":"404/index.html","raw":"<!doctype html>\n\n\n\n  \n\n\n<html class=\"theme-next mist use-motion\" lang=\"zh-Hans\">\n<head>\n  <meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n\n\n\n<meta http-equiv=\"Cache-Control\" content=\"no-transform\" />\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n\n\n\n  <meta name=\"google-site-verification\" content=\"DUmCtFr1ErmQ5Jp1sg8_dHp04fMWExpEr-N2XlKGgLw\" />\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\" />\n\n\n\n\n  \n  \n  \n  \n\n  \n    \n    \n  \n\n  \n\n  \n\n  \n\n  \n\n  \n    \n    \n    <link href=\"//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n  \n\n\n\n\n\n\n<link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\" />\n\n<link href=\"/css/main.css?v=5.1.0\" rel=\"stylesheet\" type=\"text/css\" />\n\n\n  <meta name=\"keywords\" content=\"Hexo, NexT\" />\n\n\n\n\n\n\n\n\n  <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/favicon.ico?v=5.1.0\" />\n\n\n\n\n\n\n<meta property=\"og:type\" content=\"website\">\n<meta property=\"og:title\" content=\"PennHan\">\n<meta property=\"og:url\" content=\"http://yoursite.com/404.html\">\n<meta property=\"og:site_name\" content=\"PennHan\">\n<meta property=\"og:updated_time\" content=\"2017-03-24T06:42:30.000Z\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:title\" content=\"PennHan\">\n\n\n\n<script type=\"text/javascript\" id=\"hexo.configurations\">\n  var NexT = window.NexT || {};\n  var CONFIG = {\n    root: '/',\n    scheme: 'Mist',\n    sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"offset_float\":0,\"b2t\":false,\"scrollpercent\":false},\n    fancybox: true,\n    motion: true,\n    duoshuo: {\n      userId: '0',\n      author: '博主'\n    },\n    algolia: {\n      applicationID: '',\n      apiKey: '',\n      indexName: '',\n      hits: {\"per_page\":10},\n      labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n    }\n  };\n</script>\n\n\n\n  <link rel=\"canonical\" href=\"http://yoursite.com/404.html\"/>\n\n\n\n\n\n  <title>\n  \n\n  \n     | PennHan\n  \n</title>\n</head>\n\n<body itemscope itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n    \n  \n\n  <div class=\"container one-collumn sidebar-position-left  \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n      <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n  <div class=\"site-meta \">\n    \n\n    <div class=\"custom-logo-site-title\">\n      <a href=\"/\"  class=\"brand\" rel=\"start\">\n        <span class=\"logo-line-before\"><i></i></span>\n        <span class=\"site-title\">PennHan</span>\n        <span class=\"logo-line-after\"><i></i></span>\n      </a>\n    </div>\n      \n        <p class=\"site-subtitle\"></p>\n      \n  </div>\n\n  <div class=\"site-nav-toggle\">\n    <button>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n    </button>\n  </div>\n</div>\n\n<nav class=\"site-nav\">\n  \n\n  \n    <ul id=\"menu\" class=\"menu\">\n      \n        \n        <li class=\"menu-item menu-item-home\">\n          <a href=\"/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br />\n            \n            首页\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-categories\">\n          <a href=\"/categories\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-th\"></i> <br />\n            \n            分类\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-archives\">\n          <a href=\"/archives\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br />\n            \n            归档\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-tags\">\n          <a href=\"/tags\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br />\n            \n            标签\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-about\">\n          <a href=\"/about\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-user\"></i> <br />\n            \n            关于\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-commonweal\">\n          <a href=\"/404.html\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-heartbeat\"></i> <br />\n            \n            公益404\n          </a>\n        </li>\n      \n\n      \n    </ul>\n  \n\n  \n</nav>\n\n\n\n </div>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n      <div class=\"main-inner\">\n        <div class=\"content-wrap\">\n          <div id=\"content\" class=\"content\">\n            \n\n  <div id=\"posts\" class=\"posts-expand\">\n  <header class=\"post-header\">\n\n\t<h1 class=\"post-title\" itemprop=\"name headline\"></h1>\n\n\n\n</header>\n\n    \n    \n      <!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n    \n    \n  <div class=\"comments\" id=\"comments\">\n    \n  </div>\n\n  </div>\n\n          \n          </div>\n          \n\n\n          \n  <div class=\"comments\" id=\"comments\">\n    \n  </div>\n\n\n        </div>\n        \n          \n  \n  <div class=\"sidebar-toggle\">\n    <div class=\"sidebar-toggle-line-wrap\">\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n    </div>\n  </div>\n\n  <aside id=\"sidebar\" class=\"sidebar\">\n    <div class=\"sidebar-inner\">\n\n      \n\n      \n\n      <section class=\"site-overview sidebar-panel sidebar-panel-active\">\n        <div class=\"site-author motion-element\" itemprop=\"author\" itemscope itemtype=\"http://schema.org/Person\">\n          <img class=\"site-author-image\" itemprop=\"image\"\n               src=\"/images/avatar.jpg\"\n               alt=\"PennHan\" />\n          <p class=\"site-author-name\" itemprop=\"name\">PennHan</p>\n           \n              <p class=\"site-description motion-element\" itemprop=\"description\">颜值与才华并存 -_-!</p>\n          \n        </div>\n        <nav class=\"site-state motion-element\">\n\n          \n            <div class=\"site-state-item site-state-posts\">\n              <a href=\"/archives\">\n                <span class=\"site-state-item-count\">8</span>\n                <span class=\"site-state-item-name\">日志</span>\n              </a>\n            </div>\n          \n\n          \n            \n            \n            <div class=\"site-state-item site-state-categories\">\n              <a href=\"/categories/index.html\">\n                <span class=\"site-state-item-count\">3</span>\n                <span class=\"site-state-item-name\">分类</span>\n              </a>\n            </div>\n          \n\n          \n            \n            \n            <div class=\"site-state-item site-state-tags\">\n              <a href=\"/tags/index.html\">\n                <span class=\"site-state-item-count\">8</span>\n                <span class=\"site-state-item-name\">标签</span>\n              </a>\n            </div>\n          \n\n        </nav>\n\n        \n\n        <div class=\"links-of-author motion-element\">\n          \n            \n              <span class=\"links-of-author-item\">\n                <a href=\"https://github.com/PennHan\" target=\"_blank\" title=\"GitHub\">\n                  \n                    <i class=\"fa fa-fw fa-github\"></i>\n                  \n                  GitHub\n                </a>\n              </span>\n            \n              <span class=\"links-of-author-item\">\n                <a href=\"http://weibo.com/pennhan1990\" target=\"_blank\" title=\"微博\">\n                  \n                    <i class=\"fa fa-fw fa-globe\"></i>\n                  \n                  微博\n                </a>\n              </span>\n            \n          \n        </div>\n\n        \n        \n\n        \n        \n\n        \n\n\n      </section>\n\n      \n\n      \n\n    </div>\n  </aside>\n\n\n        \n      </div>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n      <div class=\"footer-inner\">\n        <div class=\"copyright\" >\n  \n  &copy;  2016 - \n  <span itemprop=\"copyrightYear\">2017</span>\n  <span class=\"with-love\">\n    <i class=\"fa fa-heart\"></i>\n  </span>\n  <span class=\"author\" itemprop=\"copyrightHolder\">PennHan</span>\n</div>\n\n\n<div class=\"powered-by\">\n  由 <a class=\"theme-link\" href=\"https://hexo.io\">Hexo</a> 强力驱动\n</div>\n\n<div class=\"theme-info\">\n  主题 -\n  <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n    NexT.Mist\n  </a>\n</div>\n\n\n        \n\n        \n      </div>\n    </footer>\n\n    \n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n        \n      </div>\n    \n    \n  </div>\n\n  \n\n<script type=\"text/javascript\">\n  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n    window.Promise = null;\n  }\n</script>\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n  \n  <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n\n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.0\"></script>\n\n\n\n  \n  \n\n  \n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.0\"></script>\n\n\n\n  \n\n\n\n  \n\n\n\n\n\t\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n  \n  \n\n  \n\n  \n\n  \n\n  \n\n\n  \n\n</body>\n</html>\n","date":"2018-11-18T04:31:25.396Z","updated":"2018-11-18T04:31:25.396Z","path":"404/index.html","title":"","comments":1,"layout":"page","_id":"cjomh75t80000zz3goy8hq4x6","content":"<!doctype html>\n\n\n\n  \n\n\n<html class=\"theme-next mist use-motion\" lang=\"zh-Hans\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta charset=\"UTF-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n\n\n\n<meta http-equiv=\"Cache-Control\" content=\"no-transform\">\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\">\n\n\n\n  <meta name=\"google-site-verification\" content=\"DUmCtFr1ErmQ5Jp1sg8_dHp04fMWExpEr-N2XlKGgLw\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\">\n\n\n\n\n  \n  \n  \n  \n\n  \n    \n    \n  \n\n  \n\n  \n\n  \n\n  \n\n  \n    \n    \n    <link href=\"//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n  \n\n\n\n\n\n\n<link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\">\n\n<link href=\"/css/main.css?v=5.1.0\" rel=\"stylesheet\" type=\"text/css\">\n\n\n  <meta name=\"keywords\" content=\"Hexo, NexT\">\n\n\n\n\n\n\n\n\n  <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/favicon.ico?v=5.1.0\">\n\n\n\n\n\n\n<meta property=\"og:type\" content=\"website\">\n<meta property=\"og:title\" content=\"PennHan\">\n<meta property=\"og:url\" content=\"http://yoursite.com/404.html\">\n<meta property=\"og:site_name\" content=\"PennHan\">\n<meta property=\"og:updated_time\" content=\"2017-03-24T06:42:30.000Z\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:title\" content=\"PennHan\">\n\n\n\n<script type=\"text/javascript\" id=\"hexo.configurations\">\n  var NexT = window.NexT || {};\n  var CONFIG = {\n    root: '/',\n    scheme: 'Mist',\n    sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"offset_float\":0,\"b2t\":false,\"scrollpercent\":false},\n    fancybox: true,\n    motion: true,\n    duoshuo: {\n      userId: '0',\n      author: '博主'\n    },\n    algolia: {\n      applicationID: '',\n      apiKey: '',\n      indexName: '',\n      hits: {\"per_page\":10},\n      labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n    }\n  };\n</script>\n\n\n\n  <link rel=\"canonical\" href=\"http://yoursite.com/404.html\">\n\n\n\n\n\n  <title>\n  \n\n  \n     | PennHan\n  \n</title>\n</head>\n\n<body itemscope=\"\" itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n    \n  \n\n  <div class=\"container one-collumn sidebar-position-left  \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope=\"\" itemtype=\"http://schema.org/WPHeader\">\n      <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n  <div class=\"site-meta \">\n    \n\n    <div class=\"custom-logo-site-title\">\n      <a href=\"/\" class=\"brand\" rel=\"start\">\n        <span class=\"logo-line-before\"><i></i></span>\n        <span class=\"site-title\">PennHan</span>\n        <span class=\"logo-line-after\"><i></i></span>\n      </a>\n    </div>\n      \n        <p class=\"site-subtitle\"></p>\n      \n  </div>\n\n  <div class=\"site-nav-toggle\">\n    <button>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n    </button>\n  </div>\n</div>\n\n<nav class=\"site-nav\">\n  \n\n  \n    <ul id=\"menu\" class=\"menu\">\n      \n        \n        <li class=\"menu-item menu-item-home\">\n          <a href=\"/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br>\n            \n            首页\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-categories\">\n          <a href=\"/categories\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-th\"></i> <br>\n            \n            分类\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-archives\">\n          <a href=\"/archives\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br>\n            \n            归档\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-tags\">\n          <a href=\"/tags\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br>\n            \n            标签\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-about\">\n          <a href=\"/about\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-user\"></i> <br>\n            \n            关于\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-commonweal\">\n          <a href=\"/404.html\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-heartbeat\"></i> <br>\n            \n            公益404\n          </a>\n        </li>\n      \n\n      \n    </ul>\n  \n\n  \n</nav>\n\n\n\n </div>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n      <div class=\"main-inner\">\n        <div class=\"content-wrap\">\n          <div id=\"content\" class=\"content\">\n            \n\n  <div id=\"posts\" class=\"posts-expand\">\n  <header class=\"post-header\">\n\n\t<h1 class=\"post-title\" itemprop=\"name headline\"></h1>\n\n\n\n</header>\n\n    \n    \n      <!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n    \n    \n  <div class=\"comments\" id=\"comments\">\n    \n  </div>\n\n  </div>\n\n          \n          </div>\n          \n\n\n          \n  <div class=\"comments\" id=\"comments\">\n    \n  </div>\n\n\n        </div>\n        \n          \n  \n  <div class=\"sidebar-toggle\">\n    <div class=\"sidebar-toggle-line-wrap\">\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n    </div>\n  </div>\n\n  <aside id=\"sidebar\" class=\"sidebar\">\n    <div class=\"sidebar-inner\">\n\n      \n\n      \n\n      <section class=\"site-overview sidebar-panel sidebar-panel-active\">\n        <div class=\"site-author motion-element\" itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\">\n          <img class=\"site-author-image\" itemprop=\"image\" src=\"/images/avatar.jpg\" alt=\"PennHan\">\n          <p class=\"site-author-name\" itemprop=\"name\">PennHan</p>\n           \n              <p class=\"site-description motion-element\" itemprop=\"description\">颜值与才华并存 -_-!</p>\n          \n        </div>\n        <nav class=\"site-state motion-element\">\n\n          \n            <div class=\"site-state-item site-state-posts\">\n              <a href=\"/archives\">\n                <span class=\"site-state-item-count\">8</span>\n                <span class=\"site-state-item-name\">日志</span>\n              </a>\n            </div>\n          \n\n          \n            \n            \n            <div class=\"site-state-item site-state-categories\">\n              <a href=\"/categories/index.html\">\n                <span class=\"site-state-item-count\">3</span>\n                <span class=\"site-state-item-name\">分类</span>\n              </a>\n            </div>\n          \n\n          \n            \n            \n            <div class=\"site-state-item site-state-tags\">\n              <a href=\"/tags/index.html\">\n                <span class=\"site-state-item-count\">8</span>\n                <span class=\"site-state-item-name\">标签</span>\n              </a>\n            </div>\n          \n\n        </nav>\n\n        \n\n        <div class=\"links-of-author motion-element\">\n          \n            \n              <span class=\"links-of-author-item\">\n                <a href=\"https://github.com/PennHan\" target=\"_blank\" title=\"GitHub\">\n                  \n                    <i class=\"fa fa-fw fa-github\"></i>\n                  \n                  GitHub\n                </a>\n              </span>\n            \n              <span class=\"links-of-author-item\">\n                <a href=\"http://weibo.com/pennhan1990\" target=\"_blank\" title=\"微博\">\n                  \n                    <i class=\"fa fa-fw fa-globe\"></i>\n                  \n                  微博\n                </a>\n              </span>\n            \n          \n        </div>\n\n        \n        \n\n        \n        \n\n        \n\n\n      </section>\n\n      \n\n      \n\n    </div>\n  </aside>\n\n\n        \n      </div>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n      <div class=\"footer-inner\">\n        <div class=\"copyright\">\n  \n  &copy;  2016 - \n  <span itemprop=\"copyrightYear\">2017</span>\n  <span class=\"with-love\">\n    <i class=\"fa fa-heart\"></i>\n  </span>\n  <span class=\"author\" itemprop=\"copyrightHolder\">PennHan</span>\n</div>\n\n\n<div class=\"powered-by\">\n  由 <a class=\"theme-link\" href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a> 强力驱动\n</div>\n\n<div class=\"theme-info\">\n  主题 -\n  <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">\n    NexT.Mist\n  </a>\n</div>\n\n\n        \n\n        \n      </div>\n    </footer>\n\n    \n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n        \n      </div>\n    \n    \n  </div>\n\n  \n\n<script type=\"text/javascript\">\n  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n    window.Promise = null;\n  }\n</script>\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n  \n  <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n\n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.0\"></script>\n\n\n\n  \n  \n\n  \n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.0\"></script>\n\n\n\n  \n\n\n\n  \n\n\n\n\n\t\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n  \n  \n\n  \n\n  \n\n  \n\n  \n\n\n  \n\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!doctype html>\n\n\n\n  \n\n\n<html class=\"theme-next mist use-motion\" lang=\"zh-Hans\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta charset=\"UTF-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n\n\n\n<meta http-equiv=\"Cache-Control\" content=\"no-transform\">\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\">\n\n\n\n  <meta name=\"google-site-verification\" content=\"DUmCtFr1ErmQ5Jp1sg8_dHp04fMWExpEr-N2XlKGgLw\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\">\n\n\n\n\n  \n  \n  \n  \n\n  \n    \n    \n  \n\n  \n\n  \n\n  \n\n  \n\n  \n    \n    \n    <link href=\"//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n  \n\n\n\n\n\n\n<link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\">\n\n<link href=\"/css/main.css?v=5.1.0\" rel=\"stylesheet\" type=\"text/css\">\n\n\n  <meta name=\"keywords\" content=\"Hexo, NexT\">\n\n\n\n\n\n\n\n\n  <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/favicon.ico?v=5.1.0\">\n\n\n\n\n\n\n<meta property=\"og:type\" content=\"website\">\n<meta property=\"og:title\" content=\"PennHan\">\n<meta property=\"og:url\" content=\"http://yoursite.com/404.html\">\n<meta property=\"og:site_name\" content=\"PennHan\">\n<meta property=\"og:updated_time\" content=\"2017-03-24T06:42:30.000Z\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:title\" content=\"PennHan\">\n\n\n\n<script type=\"text/javascript\" id=\"hexo.configurations\">\n  var NexT = window.NexT || {};\n  var CONFIG = {\n    root: '/',\n    scheme: 'Mist',\n    sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"offset_float\":0,\"b2t\":false,\"scrollpercent\":false},\n    fancybox: true,\n    motion: true,\n    duoshuo: {\n      userId: '0',\n      author: '博主'\n    },\n    algolia: {\n      applicationID: '',\n      apiKey: '',\n      indexName: '',\n      hits: {\"per_page\":10},\n      labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n    }\n  };\n</script>\n\n\n\n  <link rel=\"canonical\" href=\"http://yoursite.com/404.html\">\n\n\n\n\n\n  <title>\n  \n\n  \n     | PennHan\n  \n</title>\n</head>\n\n<body itemscope=\"\" itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n    \n  \n\n  <div class=\"container one-collumn sidebar-position-left  \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope=\"\" itemtype=\"http://schema.org/WPHeader\">\n      <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n  <div class=\"site-meta \">\n    \n\n    <div class=\"custom-logo-site-title\">\n      <a href=\"/\" class=\"brand\" rel=\"start\">\n        <span class=\"logo-line-before\"><i></i></span>\n        <span class=\"site-title\">PennHan</span>\n        <span class=\"logo-line-after\"><i></i></span>\n      </a>\n    </div>\n      \n        <p class=\"site-subtitle\"></p>\n      \n  </div>\n\n  <div class=\"site-nav-toggle\">\n    <button>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n    </button>\n  </div>\n</div>\n\n<nav class=\"site-nav\">\n  \n\n  \n    <ul id=\"menu\" class=\"menu\">\n      \n        \n        <li class=\"menu-item menu-item-home\">\n          <a href=\"/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br>\n            \n            首页\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-categories\">\n          <a href=\"/categories\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-th\"></i> <br>\n            \n            分类\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-archives\">\n          <a href=\"/archives\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br>\n            \n            归档\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-tags\">\n          <a href=\"/tags\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br>\n            \n            标签\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-about\">\n          <a href=\"/about\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-user\"></i> <br>\n            \n            关于\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-commonweal\">\n          <a href=\"/404.html\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-heartbeat\"></i> <br>\n            \n            公益404\n          </a>\n        </li>\n      \n\n      \n    </ul>\n  \n\n  \n</nav>\n\n\n\n </div>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n      <div class=\"main-inner\">\n        <div class=\"content-wrap\">\n          <div id=\"content\" class=\"content\">\n            \n\n  <div id=\"posts\" class=\"posts-expand\">\n  <header class=\"post-header\">\n\n\t<h1 class=\"post-title\" itemprop=\"name headline\"></h1>\n\n\n\n</header>\n\n    \n    \n      <!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n    \n    \n  <div class=\"comments\" id=\"comments\">\n    \n  </div>\n\n  </div>\n\n          \n          </div>\n          \n\n\n          \n  <div class=\"comments\" id=\"comments\">\n    \n  </div>\n\n\n        </div>\n        \n          \n  \n  <div class=\"sidebar-toggle\">\n    <div class=\"sidebar-toggle-line-wrap\">\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n    </div>\n  </div>\n\n  <aside id=\"sidebar\" class=\"sidebar\">\n    <div class=\"sidebar-inner\">\n\n      \n\n      \n\n      <section class=\"site-overview sidebar-panel sidebar-panel-active\">\n        <div class=\"site-author motion-element\" itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\">\n          <img class=\"site-author-image\" itemprop=\"image\" src=\"/images/avatar.jpg\" alt=\"PennHan\">\n          <p class=\"site-author-name\" itemprop=\"name\">PennHan</p>\n           \n              <p class=\"site-description motion-element\" itemprop=\"description\">颜值与才华并存 -_-!</p>\n          \n        </div>\n        <nav class=\"site-state motion-element\">\n\n          \n            <div class=\"site-state-item site-state-posts\">\n              <a href=\"/archives\">\n                <span class=\"site-state-item-count\">8</span>\n                <span class=\"site-state-item-name\">日志</span>\n              </a>\n            </div>\n          \n\n          \n            \n            \n            <div class=\"site-state-item site-state-categories\">\n              <a href=\"/categories/index.html\">\n                <span class=\"site-state-item-count\">3</span>\n                <span class=\"site-state-item-name\">分类</span>\n              </a>\n            </div>\n          \n\n          \n            \n            \n            <div class=\"site-state-item site-state-tags\">\n              <a href=\"/tags/index.html\">\n                <span class=\"site-state-item-count\">8</span>\n                <span class=\"site-state-item-name\">标签</span>\n              </a>\n            </div>\n          \n\n        </nav>\n\n        \n\n        <div class=\"links-of-author motion-element\">\n          \n            \n              <span class=\"links-of-author-item\">\n                <a href=\"https://github.com/PennHan\" target=\"_blank\" title=\"GitHub\">\n                  \n                    <i class=\"fa fa-fw fa-github\"></i>\n                  \n                  GitHub\n                </a>\n              </span>\n            \n              <span class=\"links-of-author-item\">\n                <a href=\"http://weibo.com/pennhan1990\" target=\"_blank\" title=\"微博\">\n                  \n                    <i class=\"fa fa-fw fa-globe\"></i>\n                  \n                  微博\n                </a>\n              </span>\n            \n          \n        </div>\n\n        \n        \n\n        \n        \n\n        \n\n\n      </section>\n\n      \n\n      \n\n    </div>\n  </aside>\n\n\n        \n      </div>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n      <div class=\"footer-inner\">\n        <div class=\"copyright\">\n  \n  &copy;  2016 - \n  <span itemprop=\"copyrightYear\">2017</span>\n  <span class=\"with-love\">\n    <i class=\"fa fa-heart\"></i>\n  </span>\n  <span class=\"author\" itemprop=\"copyrightHolder\">PennHan</span>\n</div>\n\n\n<div class=\"powered-by\">\n  由 <a class=\"theme-link\" href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a> 强力驱动\n</div>\n\n<div class=\"theme-info\">\n  主题 -\n  <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">\n    NexT.Mist\n  </a>\n</div>\n\n\n        \n\n        \n      </div>\n    </footer>\n\n    \n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n        \n      </div>\n    \n    \n  </div>\n\n  \n\n<script type=\"text/javascript\">\n  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n    window.Promise = null;\n  }\n</script>\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n  \n  <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n\n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.0\"></script>\n\n\n\n  \n  \n\n  \n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.0\"></script>\n\n\n\n  \n\n\n\n  \n\n\n\n\n\t\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n  \n  \n\n  \n\n  \n\n  \n\n  \n\n\n  \n\n</body>\n</html>\n"},{"title":"about","date":"2018-06-14T10:25:28.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-06-14 18:25:28\n---\n","updated":"2018-11-18T04:31:25.399Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjomh75tc0002zz3g2d1tfbl2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-06-14T10:27:19.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-06-14 18:27:19\n---\n","updated":"2018-11-18T04:31:25.399Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjomh75tg0005zz3gavlce9t5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-06-14T10:27:08.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-06-14 18:27:08\n---\n","updated":"2018-11-18T04:31:25.399Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjomh75ya000mzz3g5p9ag0ln","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Kotlin初探","date":"2017-06-20T16:33:03.000Z","_content":"\n## Kotlin语言介绍\n\n+ 来源：Kotlin是JetBrains在2010年推出的基于JVM的新编程语言\n+ 用途：服务器端程序、Android 应用程序或者在浏览器中运行的前端程序\n+ 优势：\n    1. 简洁、易表现: 你可以编写少得多的代码,并且代码的可读性可能更好.\n    2. 安全: 在编译初期就处理了各种null的情况，避免了执行时异常。\n    3. 互操作性:你可以继续使用所有的你用Java写的代码和库，因为两个语言之间的互操作性是完美的。\n    4. 甚至可以在一个项目中使用Kotlin和Java两种语言混合编程\n    5. 函数式支持(Lambdas)\n    6. 代理\n    7. ...\n \n\n\n## Kotlin概览(vs Java)\n\n--- | --- | ---\n定义 | Java  |  Kotlin\n变量|String string = “Hello”;|var string: String = “Hello”\nfinal变量 |final String string = “Hello”;|const val string: String = “Hello”\n函数 |public boolean testString(String name){…} |open fun testString(val name:String): boolean {…}\n数组|String[] names = new String[]{“Kyo”, “Ryu”, “Iory”}; String[] emptyStrings = new String[10];\n|val ints = intArrayOf(1, 3, 5)\n变长参数 |void hello(String… names){…}|fun hello(vararg names: String){\n}\n三元运算符   |int code = isSuccessfully? 200: 400;|int code = if(isSuccessfully) 200 else 400 \nmain 函数 |class Main{\npublic static void main(String… args){\n… \n} \n} |fun main(args: Array){ \n… \n}\n实例化类    |Date date = new Date(); | val date = Date() \n延迟初始化成员变量   |public class Hello{ \n    private final String name = “Peter”; \n }|class Hello{ \n    private val name by lazy{ \n        NameProvider.getName()  \n    } \n } \n获得 class 的实例    |public class Hello{ \n    … \n } \n … \n Class<?> clazz = Hello.class; \n Hello hello = new Hello(); \n Class<?> clazz2 = hello.getClass();\n|class Hello\n  val clazz = Hello::class.java \n val hello = Hello() \n val clazz2 = hello.javaClass\n\n\n\n## Kotlin特性概览\n\n### 简洁，使用更少的代码做更多的事\n\n这是我认为Kotlin最大的优点。更像一种描述性编程语言。\n\n#### 例子一：数据类\n\n数据类大量重复的getter和setter相信会是很多人在开发过程中吐槽的一个点。举一个很经典的例子，我们需要一个Person的数据类。\n\n在Java中，需要这么写：\n```java\npublic class Person {\n    private String name;\n    private int age;\n    private int sex;\n    private float height;\n    public Person(String name, int age, int sex, float height) {\n        this.name = name;\n        this.sex = sex;\n        this.age = age;\n        this.height = height;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public int getAge() {\n        return age;\n    }\n    public void setAge(int age) {\n        this.age = age;\n    }\n    public int getSex() {\n         return sex;\n    }\n    public void setSex(int sex) {\n        this.sex = sex;\n    }\n    public float getHeight() {\n        return height;\n    }\n    public void setHeight(float height) {\n        this.height = height;\n    }\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                \", sex=\" + (sex == 0 ? \"男\" : \"女\") +\n                \", height=\" + height +\n                '}';\n }\n```\n\n在Kotlin里，我们只需要一行代码就能完成以上的功能：\n\n```java\ndata class Person(var name: String,\n                     var age: Int,\n                     var sex: Int,\n                     var height: Float)\n```\n\n#### 例子二：区间表达式\n\n在Java中我们经常要写这样的代码：\n\n```java\nfor(int i = 0; i <= 10; i++){\n    System.out.println(i)\n}\n```\n\n但是在Kotlin中，支持 .. 操作符形式的区间表达式，我们转换成Kotlin就变成了这样：\n\n```java\nfor(i in 0..10){\n    println(i)\n}\n```\n不仅如此，还有更多相关的功能。\n\n```java\n//倒序迭代\nfor(i in 10 downTo 0){\n    ...\n}\n//步长为2的迭代\nfor(i in 0..10 setp 2){\n    ...\n}\n//i在[0,10)区间，排除了10\nfor(i in 0 until 10){\n    ...\n}\n```\n\n#### 例子三：Lamda表达式\n\nJava中：\n```java\nbtn.setOnClickListener(new View.OnClickListener() {\n     @Override\n     public void onClick(View v) {\n         //dosomething\n}});\n```\n\nKotlin中：\n```java\nbtn.setOnClickListener { \n    //dosomething \n}\n```\n\n#### 例子四：类扩展\n\n看一个例子：\n\n```java\nfun MutableList<Int>.swap(index1: Int, index2: Int) {\n    val tmp = this[index1] // 'this' 对应该列表\n    this[index1] = this[index2]\n    this[index2] = tmp\n    }\n}\n//使用\nval l = mutableListOf(1, 2, 3)\nl.swap(0, 2) // 'swap()' 内部的 'this' 得到 'l' 的值\nfun Fragment.toast(message: CharSequence, duration: Int = Toast.LENGTH_SHORT) { \n    Toast.makeText(getActivity(), message, duration).show()\n}\n//使用\nfragment.toast(\"Hello world!\")\n```\n\n## 安全\n\n### 例子一：空安全\n\n一直以来，NullPointException空指针异常在开发中是最低级也最致命的问题。我们往往需要进行各种null的判断以试图去避免NPE的发生。Kotlin基于这个问题，提出了一个空安全的概念，即每个属性默认不可为null。\n\n如果要允许为空，我们需要手动声明一个变量为可空字符串类型，写为String?\n\n```java\nvar a: String = \"abcd\"\na = null //编译错误\nvar a: String? = \"abcd\"\na = null //编译成功\nvar person: Person? = null\nperson.name = \"shinelw\"  //编译失败\nperson?.name = \"shinelw\" //编译成功\n// 这里不能通过编译. Artist 不能是null\nvar notNullArtist: Artist = null\n// Artist 可以是 null\nvar artist: Artist? = null\n// 无法编译, artist可能是null，我们需要进行处理\nartist.print()\n// 只要在artist != null时才会打印\nartist?.print()\n// 智能转换. 如果我们在之前进行了空检查，则不需要使用安全调用操作符调用\nif (artist != null) {\n  artist.print()\n}\n// 只有在确保artist不是null的情况下才能这么调用，否则它会抛出异常\nartist!!.print()\n// 使用Elvis操作符来给定一个在是null的情况下的替代值\nval name = artist?.name ?: \"empty\"\n```\n\n## 与Java互操作(混编)\n\n这是Kotlin与Scala相比，优势突出的一点。我们可以在Kotlin中调用现存的Java代码，并且也能在Java代码中顺利的调用Kotlin代码。这意味着我们可以马上在现有的Java项目中使用上Kotlin，同时所有之前旧的Java也一样有效。\n\n#### Kotlin 调用 Java\n\n大多数Java代码，可以直接调用\n\n```java\nimport java.util.*\nfun demo() {\n    val list = ArrayList<string>()\n    list.add(\"hello world\")\n}\n```\n\n#### Java 调用 Kotlin\n\nKotlin 属性会编译成以下 Java 元素：\n+ 一个 getter 方法，名称通过加前缀 get 算出；\n+ 一个 setter 方法，名称通过加前缀 set 算出（只适用于 var 属性）；\n+ 一个私有字段，与属性名称相同（仅适用于具有幕后字段的属性）。\n\n例如，var firstName: String 编译成以下 Java 声明：\n\n```java\nprivate String firstName;\npublic String getFirstName() {\n    return firstName;\n}\npublic void setFirstName(String firstName) {\n    this.firstName = firstName;\n}\n```\n\n在 org.foo.bar 包内的 example.kt 文件中声明的所有的函数和属性，包括扩展函数， 都编译成一个名为 org.foo.bar.ExampleKt 的 Java 类的静态方法。\n\n```java\n// example.kt\npackage demo\nclass Foo\nfun bar() {\n}\n// Java\nnew demo.Foo();\ndemo.ExampleKt.bar();\n\n```\n\n## 函数\n\n在Kotlin中，函数的声明使用fun关键字：\n\n\n```java\nfun double(x: Int): Int {\n}\n```\n\n使用：\n\n\n```java\nval result = double(2)\n```\n\n使用.操作符调用成员函数：\n\n\n```java\nSimple().foo() //创建累的实例并调用foo（）方法\n```\n\n#### 中缀符号\n\n当满足下列条件的时候，函数还可以使用中缀符号调用：\n\n+ 当函数是成员函数或者扩展函数的时候\n+ 当他们仅有一个参数的时候\n+ 当他们通过infix关键字标记的时候\n\n#### 默认参数\n\n```java\nfun read(b:Array<Byte>,off:Int = 0,len:Int = b.size()){\n    ...\n}\n```\n\n#### 返回Unit类型的函数\n\n相当于java的void类型：\n\n```java\nfun printHello(name: String?): Unit {\n    if (name != null)\n        println(\"Hello ${name}\")\n    else\n        println(\"Hi there!\")\n    // `return Unit` or `return` is optional\n}\n```\n\n#### 单表达式函数\n\n当一个函数仅返回一个表达式，则可以省略花括号，函数体可以直接跟在=号后面：\n\n```java\nfun double(x: Int): Int = x * 2\n```\n\n## 高阶函数和lambda表达式\n\n高阶函数就是可以接受函数作为参数并返回一个函数的函数:\n\n\n```java\nfun <T> lock(lock: Lock, body: () -> T ) : T {\n    lock.lock()\n    try {\n        return body()\n    }\n    finally {\n        lock.unlock()\n    }\n}\n```\n\n一般是传递一个字面函数(通常是 lambda 表达式)：\n\n```java\nval result = lock(lock, {\nsharedResource.operation() })\n```\n\n#### 字面函数和函数表达式\n\n字面函数或函数表达式就是一个 “匿名函数”，也就是没有声明的函数，但立即作为表达式传递下去:\n\n```java\nmax(strings, {a, b -> a.length < b.length })\n```\n\n## 代理\n\n```java\n**\n * 被代理接口\n */\ninterface Base {\n    fun display()\n}\n/**\n * 被代理类\n */\nopen class BaseImpl : Base {\n    override fun display() = print(\"just display me.\")\n}\n/**\n * 代理类，使用:以及关键词by进行声明\n * 许代理属性和其他继承属性共用\n * class Drived(base: Base) : Base by base,BaseImpl()\n */\nclass Drived(base: Base) : Base by base\n//使用\nfun show() {\n    var b = BaseImpl()\n    var drived = Drived(b)\n    drived.display()\n}\n**\n * 代理类型：\n * 懒加载：Lazy\n * 观察者：Delegates.observable()\n * 非空属性：Delegates.notNull<>()\n */\nclass Water {\n    public var weight:Int by Delegates.notNull()\n    /**\n     * 代理属性\n     */\n    public val name: String by lazy {\n        println(\"Lazy.......\")\n        \"Code4Android\"\n    }\n    public var value: String by Delegates.observable(\"init value\") {\n        d, old, new ->\n        println(\"$d-->$old->$new\")\n    }\n}\nfun main(arg: Array<String>) {\n    show()\n    var water = Water()\n    println(water.name)\n    println(water.name)\n    water.value = \"11111\"\n    water.value = \"22222\"\n    water.value = \"33333\"\n    println(water.value)\n    println(water.value)\n    //必须先赋值否则IllegalStateException: Property weight should be initialized before get.\n    water.weight=2\n    print(water.weight)\n}\n```\n\n## Use Android APIs with Kotlin\n\n#### 声明Activity\n\n```java\n//in Kotlin\nclass MyActivity : AppCompatActivity() {\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity)\n  }\n}\n//in Java\npublic class MyActivity extends AppCompatActivity {\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity);\n  }\n}\n```\n\n#### On-click listener\n\n```java\n//in Kotlin\nval fab = findViewById(R.id.fab) as FloatingActionButton\nfab.setOnClickListener {\n  ...\n}\n//in Java\nFloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);\nfab.setOnClickListener(new View.OnClickListener() {\n  @Override\n  public void onClick(View view) {\n    ...\n  }\n});\n```\n\n#### Item click listener\n\n```java\n//in Kotlin\nprivate val mOnNavigationItemSelectedListener\n    = BottomNavigationView.OnNavigationItemSelectedListener { item ->\n  when (item.itemId) {\n    R.id.navigation_home -> {\n      mTextMessage.setText(R.string.title_home)\n      return@OnNavigationItemSelectedListener true\n    }\n    R.id.navigation_dashboard -> {\n      mTextMessage.setText(R.string.title_dashboard)\n      return@OnNavigationItemSelectedListener true\n    }\n }\n false\n}\n//in Java\nprivate BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener\n    = new BottomNavigationView.OnNavigationItemSelectedListener() {\n  @Override\n  public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n    switch (item.getItemId()) {\n      case R.id.navigation_home:\n        mTextMessage.setText(R.string.title_home);\n        return true;\n      case R.id.navigation_dashboard:\n        mTextMessage.setText(R.string.title_dashboard);\n        return true;\n    }\n    return false;\n  }\n};\n```\n\n## 学习资料\n\n+ 官方文档http://kotlinlang.org/docs/reference/\n+ 中文文档http://www.kotlincn.net/docs/reference/\n+ Kotlin语言中文教程-GitBookhttps://huanglizhuo.gitbooks.io/kotlin-in-chinese/content/\n+ Kotlin for android中文教程https://wangjiegulu.gitbooks.io/kotlin-for-android-developers-zh/zhe_ben_shu_shi_he_ni_ma_ff1f.html\n+ java与Kotlin混编http://kotlinlang.org/docs/reference/java-interop.html\n\n\n\n\n\n","source":"_posts/Kotlin初探.md","raw":"---\ntitle: Kotlin初探\ndate: 2017-06-21 00:33:03\ntags: Android\n---\n\n## Kotlin语言介绍\n\n+ 来源：Kotlin是JetBrains在2010年推出的基于JVM的新编程语言\n+ 用途：服务器端程序、Android 应用程序或者在浏览器中运行的前端程序\n+ 优势：\n    1. 简洁、易表现: 你可以编写少得多的代码,并且代码的可读性可能更好.\n    2. 安全: 在编译初期就处理了各种null的情况，避免了执行时异常。\n    3. 互操作性:你可以继续使用所有的你用Java写的代码和库，因为两个语言之间的互操作性是完美的。\n    4. 甚至可以在一个项目中使用Kotlin和Java两种语言混合编程\n    5. 函数式支持(Lambdas)\n    6. 代理\n    7. ...\n \n\n\n## Kotlin概览(vs Java)\n\n--- | --- | ---\n定义 | Java  |  Kotlin\n变量|String string = “Hello”;|var string: String = “Hello”\nfinal变量 |final String string = “Hello”;|const val string: String = “Hello”\n函数 |public boolean testString(String name){…} |open fun testString(val name:String): boolean {…}\n数组|String[] names = new String[]{“Kyo”, “Ryu”, “Iory”}; String[] emptyStrings = new String[10];\n|val ints = intArrayOf(1, 3, 5)\n变长参数 |void hello(String… names){…}|fun hello(vararg names: String){\n}\n三元运算符   |int code = isSuccessfully? 200: 400;|int code = if(isSuccessfully) 200 else 400 \nmain 函数 |class Main{\npublic static void main(String… args){\n… \n} \n} |fun main(args: Array){ \n… \n}\n实例化类    |Date date = new Date(); | val date = Date() \n延迟初始化成员变量   |public class Hello{ \n    private final String name = “Peter”; \n }|class Hello{ \n    private val name by lazy{ \n        NameProvider.getName()  \n    } \n } \n获得 class 的实例    |public class Hello{ \n    … \n } \n … \n Class<?> clazz = Hello.class; \n Hello hello = new Hello(); \n Class<?> clazz2 = hello.getClass();\n|class Hello\n  val clazz = Hello::class.java \n val hello = Hello() \n val clazz2 = hello.javaClass\n\n\n\n## Kotlin特性概览\n\n### 简洁，使用更少的代码做更多的事\n\n这是我认为Kotlin最大的优点。更像一种描述性编程语言。\n\n#### 例子一：数据类\n\n数据类大量重复的getter和setter相信会是很多人在开发过程中吐槽的一个点。举一个很经典的例子，我们需要一个Person的数据类。\n\n在Java中，需要这么写：\n```java\npublic class Person {\n    private String name;\n    private int age;\n    private int sex;\n    private float height;\n    public Person(String name, int age, int sex, float height) {\n        this.name = name;\n        this.sex = sex;\n        this.age = age;\n        this.height = height;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public int getAge() {\n        return age;\n    }\n    public void setAge(int age) {\n        this.age = age;\n    }\n    public int getSex() {\n         return sex;\n    }\n    public void setSex(int sex) {\n        this.sex = sex;\n    }\n    public float getHeight() {\n        return height;\n    }\n    public void setHeight(float height) {\n        this.height = height;\n    }\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                \", sex=\" + (sex == 0 ? \"男\" : \"女\") +\n                \", height=\" + height +\n                '}';\n }\n```\n\n在Kotlin里，我们只需要一行代码就能完成以上的功能：\n\n```java\ndata class Person(var name: String,\n                     var age: Int,\n                     var sex: Int,\n                     var height: Float)\n```\n\n#### 例子二：区间表达式\n\n在Java中我们经常要写这样的代码：\n\n```java\nfor(int i = 0; i <= 10; i++){\n    System.out.println(i)\n}\n```\n\n但是在Kotlin中，支持 .. 操作符形式的区间表达式，我们转换成Kotlin就变成了这样：\n\n```java\nfor(i in 0..10){\n    println(i)\n}\n```\n不仅如此，还有更多相关的功能。\n\n```java\n//倒序迭代\nfor(i in 10 downTo 0){\n    ...\n}\n//步长为2的迭代\nfor(i in 0..10 setp 2){\n    ...\n}\n//i在[0,10)区间，排除了10\nfor(i in 0 until 10){\n    ...\n}\n```\n\n#### 例子三：Lamda表达式\n\nJava中：\n```java\nbtn.setOnClickListener(new View.OnClickListener() {\n     @Override\n     public void onClick(View v) {\n         //dosomething\n}});\n```\n\nKotlin中：\n```java\nbtn.setOnClickListener { \n    //dosomething \n}\n```\n\n#### 例子四：类扩展\n\n看一个例子：\n\n```java\nfun MutableList<Int>.swap(index1: Int, index2: Int) {\n    val tmp = this[index1] // 'this' 对应该列表\n    this[index1] = this[index2]\n    this[index2] = tmp\n    }\n}\n//使用\nval l = mutableListOf(1, 2, 3)\nl.swap(0, 2) // 'swap()' 内部的 'this' 得到 'l' 的值\nfun Fragment.toast(message: CharSequence, duration: Int = Toast.LENGTH_SHORT) { \n    Toast.makeText(getActivity(), message, duration).show()\n}\n//使用\nfragment.toast(\"Hello world!\")\n```\n\n## 安全\n\n### 例子一：空安全\n\n一直以来，NullPointException空指针异常在开发中是最低级也最致命的问题。我们往往需要进行各种null的判断以试图去避免NPE的发生。Kotlin基于这个问题，提出了一个空安全的概念，即每个属性默认不可为null。\n\n如果要允许为空，我们需要手动声明一个变量为可空字符串类型，写为String?\n\n```java\nvar a: String = \"abcd\"\na = null //编译错误\nvar a: String? = \"abcd\"\na = null //编译成功\nvar person: Person? = null\nperson.name = \"shinelw\"  //编译失败\nperson?.name = \"shinelw\" //编译成功\n// 这里不能通过编译. Artist 不能是null\nvar notNullArtist: Artist = null\n// Artist 可以是 null\nvar artist: Artist? = null\n// 无法编译, artist可能是null，我们需要进行处理\nartist.print()\n// 只要在artist != null时才会打印\nartist?.print()\n// 智能转换. 如果我们在之前进行了空检查，则不需要使用安全调用操作符调用\nif (artist != null) {\n  artist.print()\n}\n// 只有在确保artist不是null的情况下才能这么调用，否则它会抛出异常\nartist!!.print()\n// 使用Elvis操作符来给定一个在是null的情况下的替代值\nval name = artist?.name ?: \"empty\"\n```\n\n## 与Java互操作(混编)\n\n这是Kotlin与Scala相比，优势突出的一点。我们可以在Kotlin中调用现存的Java代码，并且也能在Java代码中顺利的调用Kotlin代码。这意味着我们可以马上在现有的Java项目中使用上Kotlin，同时所有之前旧的Java也一样有效。\n\n#### Kotlin 调用 Java\n\n大多数Java代码，可以直接调用\n\n```java\nimport java.util.*\nfun demo() {\n    val list = ArrayList<string>()\n    list.add(\"hello world\")\n}\n```\n\n#### Java 调用 Kotlin\n\nKotlin 属性会编译成以下 Java 元素：\n+ 一个 getter 方法，名称通过加前缀 get 算出；\n+ 一个 setter 方法，名称通过加前缀 set 算出（只适用于 var 属性）；\n+ 一个私有字段，与属性名称相同（仅适用于具有幕后字段的属性）。\n\n例如，var firstName: String 编译成以下 Java 声明：\n\n```java\nprivate String firstName;\npublic String getFirstName() {\n    return firstName;\n}\npublic void setFirstName(String firstName) {\n    this.firstName = firstName;\n}\n```\n\n在 org.foo.bar 包内的 example.kt 文件中声明的所有的函数和属性，包括扩展函数， 都编译成一个名为 org.foo.bar.ExampleKt 的 Java 类的静态方法。\n\n```java\n// example.kt\npackage demo\nclass Foo\nfun bar() {\n}\n// Java\nnew demo.Foo();\ndemo.ExampleKt.bar();\n\n```\n\n## 函数\n\n在Kotlin中，函数的声明使用fun关键字：\n\n\n```java\nfun double(x: Int): Int {\n}\n```\n\n使用：\n\n\n```java\nval result = double(2)\n```\n\n使用.操作符调用成员函数：\n\n\n```java\nSimple().foo() //创建累的实例并调用foo（）方法\n```\n\n#### 中缀符号\n\n当满足下列条件的时候，函数还可以使用中缀符号调用：\n\n+ 当函数是成员函数或者扩展函数的时候\n+ 当他们仅有一个参数的时候\n+ 当他们通过infix关键字标记的时候\n\n#### 默认参数\n\n```java\nfun read(b:Array<Byte>,off:Int = 0,len:Int = b.size()){\n    ...\n}\n```\n\n#### 返回Unit类型的函数\n\n相当于java的void类型：\n\n```java\nfun printHello(name: String?): Unit {\n    if (name != null)\n        println(\"Hello ${name}\")\n    else\n        println(\"Hi there!\")\n    // `return Unit` or `return` is optional\n}\n```\n\n#### 单表达式函数\n\n当一个函数仅返回一个表达式，则可以省略花括号，函数体可以直接跟在=号后面：\n\n```java\nfun double(x: Int): Int = x * 2\n```\n\n## 高阶函数和lambda表达式\n\n高阶函数就是可以接受函数作为参数并返回一个函数的函数:\n\n\n```java\nfun <T> lock(lock: Lock, body: () -> T ) : T {\n    lock.lock()\n    try {\n        return body()\n    }\n    finally {\n        lock.unlock()\n    }\n}\n```\n\n一般是传递一个字面函数(通常是 lambda 表达式)：\n\n```java\nval result = lock(lock, {\nsharedResource.operation() })\n```\n\n#### 字面函数和函数表达式\n\n字面函数或函数表达式就是一个 “匿名函数”，也就是没有声明的函数，但立即作为表达式传递下去:\n\n```java\nmax(strings, {a, b -> a.length < b.length })\n```\n\n## 代理\n\n```java\n**\n * 被代理接口\n */\ninterface Base {\n    fun display()\n}\n/**\n * 被代理类\n */\nopen class BaseImpl : Base {\n    override fun display() = print(\"just display me.\")\n}\n/**\n * 代理类，使用:以及关键词by进行声明\n * 许代理属性和其他继承属性共用\n * class Drived(base: Base) : Base by base,BaseImpl()\n */\nclass Drived(base: Base) : Base by base\n//使用\nfun show() {\n    var b = BaseImpl()\n    var drived = Drived(b)\n    drived.display()\n}\n**\n * 代理类型：\n * 懒加载：Lazy\n * 观察者：Delegates.observable()\n * 非空属性：Delegates.notNull<>()\n */\nclass Water {\n    public var weight:Int by Delegates.notNull()\n    /**\n     * 代理属性\n     */\n    public val name: String by lazy {\n        println(\"Lazy.......\")\n        \"Code4Android\"\n    }\n    public var value: String by Delegates.observable(\"init value\") {\n        d, old, new ->\n        println(\"$d-->$old->$new\")\n    }\n}\nfun main(arg: Array<String>) {\n    show()\n    var water = Water()\n    println(water.name)\n    println(water.name)\n    water.value = \"11111\"\n    water.value = \"22222\"\n    water.value = \"33333\"\n    println(water.value)\n    println(water.value)\n    //必须先赋值否则IllegalStateException: Property weight should be initialized before get.\n    water.weight=2\n    print(water.weight)\n}\n```\n\n## Use Android APIs with Kotlin\n\n#### 声明Activity\n\n```java\n//in Kotlin\nclass MyActivity : AppCompatActivity() {\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity)\n  }\n}\n//in Java\npublic class MyActivity extends AppCompatActivity {\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity);\n  }\n}\n```\n\n#### On-click listener\n\n```java\n//in Kotlin\nval fab = findViewById(R.id.fab) as FloatingActionButton\nfab.setOnClickListener {\n  ...\n}\n//in Java\nFloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);\nfab.setOnClickListener(new View.OnClickListener() {\n  @Override\n  public void onClick(View view) {\n    ...\n  }\n});\n```\n\n#### Item click listener\n\n```java\n//in Kotlin\nprivate val mOnNavigationItemSelectedListener\n    = BottomNavigationView.OnNavigationItemSelectedListener { item ->\n  when (item.itemId) {\n    R.id.navigation_home -> {\n      mTextMessage.setText(R.string.title_home)\n      return@OnNavigationItemSelectedListener true\n    }\n    R.id.navigation_dashboard -> {\n      mTextMessage.setText(R.string.title_dashboard)\n      return@OnNavigationItemSelectedListener true\n    }\n }\n false\n}\n//in Java\nprivate BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener\n    = new BottomNavigationView.OnNavigationItemSelectedListener() {\n  @Override\n  public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n    switch (item.getItemId()) {\n      case R.id.navigation_home:\n        mTextMessage.setText(R.string.title_home);\n        return true;\n      case R.id.navigation_dashboard:\n        mTextMessage.setText(R.string.title_dashboard);\n        return true;\n    }\n    return false;\n  }\n};\n```\n\n## 学习资料\n\n+ 官方文档http://kotlinlang.org/docs/reference/\n+ 中文文档http://www.kotlincn.net/docs/reference/\n+ Kotlin语言中文教程-GitBookhttps://huanglizhuo.gitbooks.io/kotlin-in-chinese/content/\n+ Kotlin for android中文教程https://wangjiegulu.gitbooks.io/kotlin-for-android-developers-zh/zhe_ben_shu_shi_he_ni_ma_ff1f.html\n+ java与Kotlin混编http://kotlinlang.org/docs/reference/java-interop.html\n\n\n\n\n\n","slug":"Kotlin初探","published":1,"updated":"2018-11-18T04:31:25.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjomh75ta0001zz3g2qtt67zl","content":"<h2 id=\"Kotlin语言介绍\"><a href=\"#Kotlin语言介绍\" class=\"headerlink\" title=\"Kotlin语言介绍\"></a>Kotlin语言介绍</h2><ul>\n<li>来源：Kotlin是JetBrains在2010年推出的基于JVM的新编程语言</li>\n<li>用途：服务器端程序、Android 应用程序或者在浏览器中运行的前端程序</li>\n<li>优势：<ol>\n<li>简洁、易表现: 你可以编写少得多的代码,并且代码的可读性可能更好.</li>\n<li>安全: 在编译初期就处理了各种null的情况，避免了执行时异常。</li>\n<li>互操作性:你可以继续使用所有的你用Java写的代码和库，因为两个语言之间的互操作性是完美的。</li>\n<li>甚至可以在一个项目中使用Kotlin和Java两种语言混合编程</li>\n<li>函数式支持(Lambdas)</li>\n<li>代理</li>\n<li>…</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Kotlin概览-vs-Java\"><a href=\"#Kotlin概览-vs-Java\" class=\"headerlink\" title=\"Kotlin概览(vs Java)\"></a>Kotlin概览(vs Java)</h2><p>— | — | —<br>定义 | Java  |  Kotlin<br>变量|String string = “Hello”;|var string: String = “Hello”<br>final变量 |final String string = “Hello”;|const val string: String = “Hello”<br>函数 |public boolean testString(String name){…} |open fun testString(val name:String): boolean {…}<br>数组|String[] names = new String[]{“Kyo”, “Ryu”, “Iory”}; String[] emptyStrings = new String[10];<br>|val ints = intArrayOf(1, 3, 5)<br>变长参数 |void hello(String… names){…}|fun hello(vararg names: String){<br>}<br>三元运算符   |int code = isSuccessfully? 200: 400;|int code = if(isSuccessfully) 200 else 400<br>main 函数 |class Main{<br>public static void main(String… args){<br>…<br>}<br>} |fun main(args: Array){<br>…<br>}<br>实例化类    |Date date = new Date(); | val date = Date()<br>延迟初始化成员变量   |public class Hello{<br>    private final String name = “Peter”;<br> }|class Hello{<br>    private val name by lazy{<br>        NameProvider.getName()<br>    }<br> }<br>获得 class 的实例    |public class Hello{<br>    …<br> }<br> …<br> Class&lt;?&gt; clazz = Hello.class;<br> Hello hello = new Hello();<br> Class&lt;?&gt; clazz2 = hello.getClass();<br>|class Hello<br>  val clazz = Hello::class.java<br> val hello = Hello()<br> val clazz2 = hello.javaClass</p>\n<h2 id=\"Kotlin特性概览\"><a href=\"#Kotlin特性概览\" class=\"headerlink\" title=\"Kotlin特性概览\"></a>Kotlin特性概览</h2><h3 id=\"简洁，使用更少的代码做更多的事\"><a href=\"#简洁，使用更少的代码做更多的事\" class=\"headerlink\" title=\"简洁，使用更少的代码做更多的事\"></a>简洁，使用更少的代码做更多的事</h3><p>这是我认为Kotlin最大的优点。更像一种描述性编程语言。</p>\n<h4 id=\"例子一：数据类\"><a href=\"#例子一：数据类\" class=\"headerlink\" title=\"例子一：数据类\"></a>例子一：数据类</h4><p>数据类大量重复的getter和setter相信会是很多人在开发过程中吐槽的一个点。举一个很经典的例子，我们需要一个Person的数据类。</p>\n<p>在Java中，需要这么写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sex;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> height;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age, <span class=\"keyword\">int</span> sex, <span class=\"keyword\">float</span> height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSex</span><span class=\"params\">(<span class=\"keyword\">int</span> sex)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getHeight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHeight</span><span class=\"params\">(<span class=\"keyword\">float</span> height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Person&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"name='\"</span> + name + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", age=\"</span> + age +</span><br><span class=\"line\">                <span class=\"string\">\", sex=\"</span> + (sex == <span class=\"number\">0</span> ? <span class=\"string\">\"男\"</span> : <span class=\"string\">\"女\"</span>) +</span><br><span class=\"line\">                <span class=\"string\">\", height=\"</span> + height +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>在Kotlin里，我们只需要一行代码就能完成以上的功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">data class <span class=\"title\">Person</span><span class=\"params\">(var name: String,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     var age: Int,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     var sex: Int,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     var height: Float)</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"例子二：区间表达式\"><a href=\"#例子二：区间表达式\" class=\"headerlink\" title=\"例子二：区间表达式\"></a>例子二：区间表达式</h4><p>在Java中我们经常要写这样的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">    System.out.println(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是在Kotlin中，支持 .. 操作符形式的区间表达式，我们转换成Kotlin就变成了这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i in <span class=\"number\">0</span>..<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">    println(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不仅如此，还有更多相关的功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//倒序迭代</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i in <span class=\"number\">10</span> downTo <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//步长为2的迭代</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i in <span class=\"number\">0</span>..<span class=\"number\">10</span> setp <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//i在[0,10)区间，排除了10</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i in <span class=\"number\">0</span> until <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"例子三：Lamda表达式\"><a href=\"#例子三：Lamda表达式\" class=\"headerlink\" title=\"例子三：Lamda表达式\"></a>例子三：Lamda表达式</h4><p>Java中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">//dosomething</span></span><br><span class=\"line\">&#125;&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>Kotlin中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.setOnClickListener &#123; </span><br><span class=\"line\">    <span class=\"comment\">//dosomething </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"例子四：类扩展\"><a href=\"#例子四：类扩展\" class=\"headerlink\" title=\"例子四：类扩展\"></a>例子四：类扩展</h4><p>看一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun MutableList&lt;Int&gt;.swap(index1: Int, index2: Int) &#123;</span><br><span class=\"line\">    val tmp = <span class=\"keyword\">this</span>[index1] <span class=\"comment\">// 'this' 对应该列表</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>[index1] = <span class=\"keyword\">this</span>[index2]</span><br><span class=\"line\">    <span class=\"keyword\">this</span>[index2] = tmp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">val l = mutableListOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">l.swap(<span class=\"number\">0</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 'swap()' 内部的 'this' 得到 'l' 的值</span></span><br><span class=\"line\">fun Fragment.toast(message: CharSequence, duration: Int = Toast.LENGTH_SHORT) &#123; </span><br><span class=\"line\">    Toast.makeText(getActivity(), message, duration).show()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">fragment.toast(<span class=\"string\">\"Hello world!\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h2><h3 id=\"例子一：空安全\"><a href=\"#例子一：空安全\" class=\"headerlink\" title=\"例子一：空安全\"></a>例子一：空安全</h3><p>一直以来，NullPointException空指针异常在开发中是最低级也最致命的问题。我们往往需要进行各种null的判断以试图去避免NPE的发生。Kotlin基于这个问题，提出了一个空安全的概念，即每个属性默认不可为null。</p>\n<p>如果要允许为空，我们需要手动声明一个变量为可空字符串类型，写为String?</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a: String = <span class=\"string\">\"abcd\"</span></span><br><span class=\"line\">a = <span class=\"keyword\">null</span> <span class=\"comment\">//编译错误</span></span><br><span class=\"line\">var a: String? = <span class=\"string\">\"abcd\"</span></span><br><span class=\"line\">a = <span class=\"keyword\">null</span> <span class=\"comment\">//编译成功</span></span><br><span class=\"line\">var person: Person? = <span class=\"keyword\">null</span></span><br><span class=\"line\">person.name = <span class=\"string\">\"shinelw\"</span>  <span class=\"comment\">//编译失败</span></span><br><span class=\"line\">person?.name = <span class=\"string\">\"shinelw\"</span> <span class=\"comment\">//编译成功</span></span><br><span class=\"line\"><span class=\"comment\">// 这里不能通过编译. Artist 不能是null</span></span><br><span class=\"line\">var notNullArtist: Artist = <span class=\"keyword\">null</span></span><br><span class=\"line\"><span class=\"comment\">// Artist 可以是 null</span></span><br><span class=\"line\">var artist: Artist? = <span class=\"keyword\">null</span></span><br><span class=\"line\"><span class=\"comment\">// 无法编译, artist可能是null，我们需要进行处理</span></span><br><span class=\"line\">artist.print()</span><br><span class=\"line\"><span class=\"comment\">// 只要在artist != null时才会打印</span></span><br><span class=\"line\">artist?.print()</span><br><span class=\"line\"><span class=\"comment\">// 智能转换. 如果我们在之前进行了空检查，则不需要使用安全调用操作符调用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (artist != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">  artist.print()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 只有在确保artist不是null的情况下才能这么调用，否则它会抛出异常</span></span><br><span class=\"line\">artist!!.print()</span><br><span class=\"line\"><span class=\"comment\">// 使用Elvis操作符来给定一个在是null的情况下的替代值</span></span><br><span class=\"line\">val name = artist?.name ?: <span class=\"string\">\"empty\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"与Java互操作-混编\"><a href=\"#与Java互操作-混编\" class=\"headerlink\" title=\"与Java互操作(混编)\"></a>与Java互操作(混编)</h2><p>这是Kotlin与Scala相比，优势突出的一点。我们可以在Kotlin中调用现存的Java代码，并且也能在Java代码中顺利的调用Kotlin代码。这意味着我们可以马上在现有的Java项目中使用上Kotlin，同时所有之前旧的Java也一样有效。</p>\n<h4 id=\"Kotlin-调用-Java\"><a href=\"#Kotlin-调用-Java\" class=\"headerlink\" title=\"Kotlin 调用 Java\"></a>Kotlin 调用 Java</h4><p>大多数Java代码，可以直接调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*</span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">demo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    val list = ArrayList&lt;string&gt;()</span><br><span class=\"line\">    list.add(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Java-调用-Kotlin\"><a href=\"#Java-调用-Kotlin\" class=\"headerlink\" title=\"Java 调用 Kotlin\"></a>Java 调用 Kotlin</h4><p>Kotlin 属性会编译成以下 Java 元素：</p>\n<ul>\n<li>一个 getter 方法，名称通过加前缀 get 算出；</li>\n<li>一个 setter 方法，名称通过加前缀 set 算出（只适用于 var 属性）；</li>\n<li>一个私有字段，与属性名称相同（仅适用于具有幕后字段的属性）。</li>\n</ul>\n<p>例如，var firstName: String 编译成以下 Java 声明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> String firstName;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFirstName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFirstName</span><span class=\"params\">(String firstName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.firstName = firstName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 org.foo.bar 包内的 example.kt 文件中声明的所有的函数和属性，包括扩展函数， 都编译成一个名为 org.foo.bar.ExampleKt 的 Java 类的静态方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.kt</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> demo</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">fun</span> <span class=\"title\">bar</span>() </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Java</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> demo.Foo();</span><br><span class=\"line\">demo.ExampleKt.bar();</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>在Kotlin中，函数的声明使用fun关键字：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">double</span><span class=\"params\">(x: Int)</span>: Int </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val result = <span class=\"keyword\">double</span>(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>使用.操作符调用成员函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Simple().foo() <span class=\"comment\">//创建累的实例并调用foo（）方法</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"中缀符号\"><a href=\"#中缀符号\" class=\"headerlink\" title=\"中缀符号\"></a>中缀符号</h4><p>当满足下列条件的时候，函数还可以使用中缀符号调用：</p>\n<ul>\n<li>当函数是成员函数或者扩展函数的时候</li>\n<li>当他们仅有一个参数的时候</li>\n<li>当他们通过infix关键字标记的时候</li>\n</ul>\n<h4 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">read</span><span class=\"params\">(b:Array&lt;Byte&gt;,off:Int = <span class=\"number\">0</span>,len:Int = b.size()</span>)</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"返回Unit类型的函数\"><a href=\"#返回Unit类型的函数\" class=\"headerlink\" title=\"返回Unit类型的函数\"></a>返回Unit类型的函数</h4><p>相当于java的void类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">printHello</span><span class=\"params\">(name: String?)</span>: Unit </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        println(<span class=\"string\">\"Hello $&#123;name&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        println(<span class=\"string\">\"Hi there!\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">// `return Unit` or `return` is optional</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"单表达式函数\"><a href=\"#单表达式函数\" class=\"headerlink\" title=\"单表达式函数\"></a>单表达式函数</h4><p>当一个函数仅返回一个表达式，则可以省略花括号，函数体可以直接跟在=号后面：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">double</span><span class=\"params\">(x: Int)</span>: Int </span>= x * <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"高阶函数和lambda表达式\"><a href=\"#高阶函数和lambda表达式\" class=\"headerlink\" title=\"高阶函数和lambda表达式\"></a>高阶函数和lambda表达式</h2><p>高阶函数就是可以接受函数作为参数并返回一个函数的函数:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun &lt;T&gt; lock(lock: Lock, body: () -&gt; T ) : T &#123;</span><br><span class=\"line\">    lock.lock()</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> body()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般是传递一个字面函数(通常是 lambda 表达式)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val result = lock(lock, &#123;</span><br><span class=\"line\">sharedResource.operation() &#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"字面函数和函数表达式\"><a href=\"#字面函数和函数表达式\" class=\"headerlink\" title=\"字面函数和函数表达式\"></a>字面函数和函数表达式</h4><p>字面函数或函数表达式就是一个 “匿名函数”，也就是没有声明的函数，但立即作为表达式传递下去:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max(strings, &#123;a, b -&gt; a.length &lt; b.length &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**</span><br><span class=\"line\"> * 被代理接口</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">display</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">/**</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\"> * 被代理类</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\"> */</span></span></span><br><span class=\"line\"><span class=\"function\">open class BaseImpl : Base </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">display</span><span class=\"params\">()</span> </span>= print(<span class=\"string\">\"just display me.\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 代理类，使用:以及关键词by进行声明</span></span><br><span class=\"line\"><span class=\"comment\"> * 许代理属性和其他继承属性共用</span></span><br><span class=\"line\"><span class=\"comment\"> * class Drived(base: Base) : Base by base,BaseImpl()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">class Drived(base: Base) : Base by base</span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    var b = BaseImpl()</span><br><span class=\"line\">    var drived = Drived(b)</span><br><span class=\"line\">    drived.display()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">**</span><br><span class=\"line\"> * 代理类型：</span><br><span class=\"line\"> * 懒加载：Lazy</span><br><span class=\"line\"> * 观察者：Delegates.observable()</span><br><span class=\"line\"> * 非空属性：Delegates.notNull&lt;&gt;()</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Water</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> var weight:Int by Delegates.notNull()</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 代理属性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> val name: String by lazy &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Lazy.......\"</span>)</span><br><span class=\"line\">        <span class=\"string\">\"Code4Android\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> var value: String by Delegates.observable(<span class=\"string\">\"init value\"</span>) &#123;</span><br><span class=\"line\">        d, old, <span class=\"keyword\">new</span> -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">\"$d--&gt;$old-&gt;$new\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">main</span><span class=\"params\">(arg: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class=\"line\">    show()</span><br><span class=\"line\">    var water = Water()</span><br><span class=\"line\">    println(water.name)</span><br><span class=\"line\">    println(water.name)</span><br><span class=\"line\">    water.value = <span class=\"string\">\"11111\"</span></span><br><span class=\"line\">    water.value = <span class=\"string\">\"22222\"</span></span><br><span class=\"line\">    water.value = <span class=\"string\">\"33333\"</span></span><br><span class=\"line\">    println(water.value)</span><br><span class=\"line\">    println(water.value)</span><br><span class=\"line\">    <span class=\"comment\">//必须先赋值否则IllegalStateException: Property weight should be initialized before get.</span></span><br><span class=\"line\">    water.weight=<span class=\"number\">2</span></span><br><span class=\"line\">    print(water.weight)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Use-Android-APIs-with-Kotlin\"><a href=\"#Use-Android-APIs-with-Kotlin\" class=\"headerlink\" title=\"Use Android APIs with Kotlin\"></a>Use Android APIs with Kotlin</h2><h4 id=\"声明Activity\"><a href=\"#声明Activity\" class=\"headerlink\" title=\"声明Activity\"></a>声明Activity</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//in Kotlin</span></span><br><span class=\"line\">class MyActivity : AppCompatActivity() &#123;</span><br><span class=\"line\">  <span class=\"function\">override fun <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: Bundle?)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">    setContentView(R.layout.activity)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//in Java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"On-click-listener\"><a href=\"#On-click-listener\" class=\"headerlink\" title=\"On-click listener\"></a>On-click listener</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//in Kotlin</span></span><br><span class=\"line\">val fab = findViewById(R.id.fab) as FloatingActionButton</span><br><span class=\"line\">fab.setOnClickListener &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//in Java</span></span><br><span class=\"line\">FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</span><br><span class=\"line\">fab.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Item-click-listener\"><a href=\"#Item-click-listener\" class=\"headerlink\" title=\"Item click listener\"></a>Item click listener</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//in Kotlin</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> val mOnNavigationItemSelectedListener</span><br><span class=\"line\">    = BottomNavigationView.OnNavigationItemSelectedListener &#123; item -&gt;</span><br><span class=\"line\">  when (item.itemId) &#123;</span><br><span class=\"line\">    R.id.navigation_home -&gt; &#123;</span><br><span class=\"line\">      mTextMessage.setText(R.string.title_home)</span><br><span class=\"line\">      <span class=\"keyword\">return</span><span class=\"meta\">@OnNavigationItemSelectedListener</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    R.id.navigation_dashboard -&gt; &#123;</span><br><span class=\"line\">      mTextMessage.setText(R.string.title_dashboard)</span><br><span class=\"line\">      <span class=\"keyword\">return</span><span class=\"meta\">@OnNavigationItemSelectedListener</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//in Java</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener</span><br><span class=\"line\">    = <span class=\"keyword\">new</span> BottomNavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">(@NonNull MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (item.getItemId()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> R.id.navigation_home:</span><br><span class=\"line\">        mTextMessage.setText(R.string.title_home);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> R.id.navigation_dashboard:</span><br><span class=\"line\">        mTextMessage.setText(R.string.title_dashboard);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h2><ul>\n<li>官方文档<a href=\"http://kotlinlang.org/docs/reference/\" target=\"_blank\" rel=\"noopener\">http://kotlinlang.org/docs/reference/</a></li>\n<li>中文文档<a href=\"http://www.kotlincn.net/docs/reference/\" target=\"_blank\" rel=\"noopener\">http://www.kotlincn.net/docs/reference/</a></li>\n<li>Kotlin语言中文教程-GitBook<a href=\"https://huanglizhuo.gitbooks.io/kotlin-in-chinese/content/\" target=\"_blank\" rel=\"noopener\">https://huanglizhuo.gitbooks.io/kotlin-in-chinese/content/</a></li>\n<li>Kotlin for android中文教程<a href=\"https://wangjiegulu.gitbooks.io/kotlin-for-android-developers-zh/zhe_ben_shu_shi_he_ni_ma_ff1f.html\" target=\"_blank\" rel=\"noopener\">https://wangjiegulu.gitbooks.io/kotlin-for-android-developers-zh/zhe_ben_shu_shi_he_ni_ma_ff1f.html</a></li>\n<li>java与Kotlin混编<a href=\"http://kotlinlang.org/docs/reference/java-interop.html\" target=\"_blank\" rel=\"noopener\">http://kotlinlang.org/docs/reference/java-interop.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Kotlin语言介绍\"><a href=\"#Kotlin语言介绍\" class=\"headerlink\" title=\"Kotlin语言介绍\"></a>Kotlin语言介绍</h2><ul>\n<li>来源：Kotlin是JetBrains在2010年推出的基于JVM的新编程语言</li>\n<li>用途：服务器端程序、Android 应用程序或者在浏览器中运行的前端程序</li>\n<li>优势：<ol>\n<li>简洁、易表现: 你可以编写少得多的代码,并且代码的可读性可能更好.</li>\n<li>安全: 在编译初期就处理了各种null的情况，避免了执行时异常。</li>\n<li>互操作性:你可以继续使用所有的你用Java写的代码和库，因为两个语言之间的互操作性是完美的。</li>\n<li>甚至可以在一个项目中使用Kotlin和Java两种语言混合编程</li>\n<li>函数式支持(Lambdas)</li>\n<li>代理</li>\n<li>…</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Kotlin概览-vs-Java\"><a href=\"#Kotlin概览-vs-Java\" class=\"headerlink\" title=\"Kotlin概览(vs Java)\"></a>Kotlin概览(vs Java)</h2><p>— | — | —<br>定义 | Java  |  Kotlin<br>变量|String string = “Hello”;|var string: String = “Hello”<br>final变量 |final String string = “Hello”;|const val string: String = “Hello”<br>函数 |public boolean testString(String name){…} |open fun testString(val name:String): boolean {…}<br>数组|String[] names = new String[]{“Kyo”, “Ryu”, “Iory”}; String[] emptyStrings = new String[10];<br>|val ints = intArrayOf(1, 3, 5)<br>变长参数 |void hello(String… names){…}|fun hello(vararg names: String){<br>}<br>三元运算符   |int code = isSuccessfully? 200: 400;|int code = if(isSuccessfully) 200 else 400<br>main 函数 |class Main{<br>public static void main(String… args){<br>…<br>}<br>} |fun main(args: Array){<br>…<br>}<br>实例化类    |Date date = new Date(); | val date = Date()<br>延迟初始化成员变量   |public class Hello{<br>    private final String name = “Peter”;<br> }|class Hello{<br>    private val name by lazy{<br>        NameProvider.getName()<br>    }<br> }<br>获得 class 的实例    |public class Hello{<br>    …<br> }<br> …<br> Class&lt;?&gt; clazz = Hello.class;<br> Hello hello = new Hello();<br> Class&lt;?&gt; clazz2 = hello.getClass();<br>|class Hello<br>  val clazz = Hello::class.java<br> val hello = Hello()<br> val clazz2 = hello.javaClass</p>\n<h2 id=\"Kotlin特性概览\"><a href=\"#Kotlin特性概览\" class=\"headerlink\" title=\"Kotlin特性概览\"></a>Kotlin特性概览</h2><h3 id=\"简洁，使用更少的代码做更多的事\"><a href=\"#简洁，使用更少的代码做更多的事\" class=\"headerlink\" title=\"简洁，使用更少的代码做更多的事\"></a>简洁，使用更少的代码做更多的事</h3><p>这是我认为Kotlin最大的优点。更像一种描述性编程语言。</p>\n<h4 id=\"例子一：数据类\"><a href=\"#例子一：数据类\" class=\"headerlink\" title=\"例子一：数据类\"></a>例子一：数据类</h4><p>数据类大量重复的getter和setter相信会是很多人在开发过程中吐槽的一个点。举一个很经典的例子，我们需要一个Person的数据类。</p>\n<p>在Java中，需要这么写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sex;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> height;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age, <span class=\"keyword\">int</span> sex, <span class=\"keyword\">float</span> height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSex</span><span class=\"params\">(<span class=\"keyword\">int</span> sex)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getHeight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHeight</span><span class=\"params\">(<span class=\"keyword\">float</span> height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Person&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"name='\"</span> + name + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", age=\"</span> + age +</span><br><span class=\"line\">                <span class=\"string\">\", sex=\"</span> + (sex == <span class=\"number\">0</span> ? <span class=\"string\">\"男\"</span> : <span class=\"string\">\"女\"</span>) +</span><br><span class=\"line\">                <span class=\"string\">\", height=\"</span> + height +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>在Kotlin里，我们只需要一行代码就能完成以上的功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">data class <span class=\"title\">Person</span><span class=\"params\">(var name: String,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     var age: Int,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     var sex: Int,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     var height: Float)</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"例子二：区间表达式\"><a href=\"#例子二：区间表达式\" class=\"headerlink\" title=\"例子二：区间表达式\"></a>例子二：区间表达式</h4><p>在Java中我们经常要写这样的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">    System.out.println(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是在Kotlin中，支持 .. 操作符形式的区间表达式，我们转换成Kotlin就变成了这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i in <span class=\"number\">0</span>..<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">    println(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不仅如此，还有更多相关的功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//倒序迭代</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i in <span class=\"number\">10</span> downTo <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//步长为2的迭代</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i in <span class=\"number\">0</span>..<span class=\"number\">10</span> setp <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//i在[0,10)区间，排除了10</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i in <span class=\"number\">0</span> until <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"例子三：Lamda表达式\"><a href=\"#例子三：Lamda表达式\" class=\"headerlink\" title=\"例子三：Lamda表达式\"></a>例子三：Lamda表达式</h4><p>Java中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">//dosomething</span></span><br><span class=\"line\">&#125;&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>Kotlin中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.setOnClickListener &#123; </span><br><span class=\"line\">    <span class=\"comment\">//dosomething </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"例子四：类扩展\"><a href=\"#例子四：类扩展\" class=\"headerlink\" title=\"例子四：类扩展\"></a>例子四：类扩展</h4><p>看一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun MutableList&lt;Int&gt;.swap(index1: Int, index2: Int) &#123;</span><br><span class=\"line\">    val tmp = <span class=\"keyword\">this</span>[index1] <span class=\"comment\">// 'this' 对应该列表</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>[index1] = <span class=\"keyword\">this</span>[index2]</span><br><span class=\"line\">    <span class=\"keyword\">this</span>[index2] = tmp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">val l = mutableListOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">l.swap(<span class=\"number\">0</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 'swap()' 内部的 'this' 得到 'l' 的值</span></span><br><span class=\"line\">fun Fragment.toast(message: CharSequence, duration: Int = Toast.LENGTH_SHORT) &#123; </span><br><span class=\"line\">    Toast.makeText(getActivity(), message, duration).show()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">fragment.toast(<span class=\"string\">\"Hello world!\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h2><h3 id=\"例子一：空安全\"><a href=\"#例子一：空安全\" class=\"headerlink\" title=\"例子一：空安全\"></a>例子一：空安全</h3><p>一直以来，NullPointException空指针异常在开发中是最低级也最致命的问题。我们往往需要进行各种null的判断以试图去避免NPE的发生。Kotlin基于这个问题，提出了一个空安全的概念，即每个属性默认不可为null。</p>\n<p>如果要允许为空，我们需要手动声明一个变量为可空字符串类型，写为String?</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a: String = <span class=\"string\">\"abcd\"</span></span><br><span class=\"line\">a = <span class=\"keyword\">null</span> <span class=\"comment\">//编译错误</span></span><br><span class=\"line\">var a: String? = <span class=\"string\">\"abcd\"</span></span><br><span class=\"line\">a = <span class=\"keyword\">null</span> <span class=\"comment\">//编译成功</span></span><br><span class=\"line\">var person: Person? = <span class=\"keyword\">null</span></span><br><span class=\"line\">person.name = <span class=\"string\">\"shinelw\"</span>  <span class=\"comment\">//编译失败</span></span><br><span class=\"line\">person?.name = <span class=\"string\">\"shinelw\"</span> <span class=\"comment\">//编译成功</span></span><br><span class=\"line\"><span class=\"comment\">// 这里不能通过编译. Artist 不能是null</span></span><br><span class=\"line\">var notNullArtist: Artist = <span class=\"keyword\">null</span></span><br><span class=\"line\"><span class=\"comment\">// Artist 可以是 null</span></span><br><span class=\"line\">var artist: Artist? = <span class=\"keyword\">null</span></span><br><span class=\"line\"><span class=\"comment\">// 无法编译, artist可能是null，我们需要进行处理</span></span><br><span class=\"line\">artist.print()</span><br><span class=\"line\"><span class=\"comment\">// 只要在artist != null时才会打印</span></span><br><span class=\"line\">artist?.print()</span><br><span class=\"line\"><span class=\"comment\">// 智能转换. 如果我们在之前进行了空检查，则不需要使用安全调用操作符调用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (artist != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">  artist.print()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 只有在确保artist不是null的情况下才能这么调用，否则它会抛出异常</span></span><br><span class=\"line\">artist!!.print()</span><br><span class=\"line\"><span class=\"comment\">// 使用Elvis操作符来给定一个在是null的情况下的替代值</span></span><br><span class=\"line\">val name = artist?.name ?: <span class=\"string\">\"empty\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"与Java互操作-混编\"><a href=\"#与Java互操作-混编\" class=\"headerlink\" title=\"与Java互操作(混编)\"></a>与Java互操作(混编)</h2><p>这是Kotlin与Scala相比，优势突出的一点。我们可以在Kotlin中调用现存的Java代码，并且也能在Java代码中顺利的调用Kotlin代码。这意味着我们可以马上在现有的Java项目中使用上Kotlin，同时所有之前旧的Java也一样有效。</p>\n<h4 id=\"Kotlin-调用-Java\"><a href=\"#Kotlin-调用-Java\" class=\"headerlink\" title=\"Kotlin 调用 Java\"></a>Kotlin 调用 Java</h4><p>大多数Java代码，可以直接调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*</span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">demo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    val list = ArrayList&lt;string&gt;()</span><br><span class=\"line\">    list.add(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Java-调用-Kotlin\"><a href=\"#Java-调用-Kotlin\" class=\"headerlink\" title=\"Java 调用 Kotlin\"></a>Java 调用 Kotlin</h4><p>Kotlin 属性会编译成以下 Java 元素：</p>\n<ul>\n<li>一个 getter 方法，名称通过加前缀 get 算出；</li>\n<li>一个 setter 方法，名称通过加前缀 set 算出（只适用于 var 属性）；</li>\n<li>一个私有字段，与属性名称相同（仅适用于具有幕后字段的属性）。</li>\n</ul>\n<p>例如，var firstName: String 编译成以下 Java 声明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> String firstName;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFirstName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFirstName</span><span class=\"params\">(String firstName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.firstName = firstName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 org.foo.bar 包内的 example.kt 文件中声明的所有的函数和属性，包括扩展函数， 都编译成一个名为 org.foo.bar.ExampleKt 的 Java 类的静态方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.kt</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> demo</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">fun</span> <span class=\"title\">bar</span>() </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Java</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> demo.Foo();</span><br><span class=\"line\">demo.ExampleKt.bar();</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>在Kotlin中，函数的声明使用fun关键字：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">double</span><span class=\"params\">(x: Int)</span>: Int </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val result = <span class=\"keyword\">double</span>(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>使用.操作符调用成员函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Simple().foo() <span class=\"comment\">//创建累的实例并调用foo（）方法</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"中缀符号\"><a href=\"#中缀符号\" class=\"headerlink\" title=\"中缀符号\"></a>中缀符号</h4><p>当满足下列条件的时候，函数还可以使用中缀符号调用：</p>\n<ul>\n<li>当函数是成员函数或者扩展函数的时候</li>\n<li>当他们仅有一个参数的时候</li>\n<li>当他们通过infix关键字标记的时候</li>\n</ul>\n<h4 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">read</span><span class=\"params\">(b:Array&lt;Byte&gt;,off:Int = <span class=\"number\">0</span>,len:Int = b.size()</span>)</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"返回Unit类型的函数\"><a href=\"#返回Unit类型的函数\" class=\"headerlink\" title=\"返回Unit类型的函数\"></a>返回Unit类型的函数</h4><p>相当于java的void类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">printHello</span><span class=\"params\">(name: String?)</span>: Unit </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        println(<span class=\"string\">\"Hello $&#123;name&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        println(<span class=\"string\">\"Hi there!\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">// `return Unit` or `return` is optional</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"单表达式函数\"><a href=\"#单表达式函数\" class=\"headerlink\" title=\"单表达式函数\"></a>单表达式函数</h4><p>当一个函数仅返回一个表达式，则可以省略花括号，函数体可以直接跟在=号后面：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">double</span><span class=\"params\">(x: Int)</span>: Int </span>= x * <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"高阶函数和lambda表达式\"><a href=\"#高阶函数和lambda表达式\" class=\"headerlink\" title=\"高阶函数和lambda表达式\"></a>高阶函数和lambda表达式</h2><p>高阶函数就是可以接受函数作为参数并返回一个函数的函数:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun &lt;T&gt; lock(lock: Lock, body: () -&gt; T ) : T &#123;</span><br><span class=\"line\">    lock.lock()</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> body()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般是传递一个字面函数(通常是 lambda 表达式)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val result = lock(lock, &#123;</span><br><span class=\"line\">sharedResource.operation() &#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"字面函数和函数表达式\"><a href=\"#字面函数和函数表达式\" class=\"headerlink\" title=\"字面函数和函数表达式\"></a>字面函数和函数表达式</h4><p>字面函数或函数表达式就是一个 “匿名函数”，也就是没有声明的函数，但立即作为表达式传递下去:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max(strings, &#123;a, b -&gt; a.length &lt; b.length &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**</span><br><span class=\"line\"> * 被代理接口</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">display</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">/**</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\"> * 被代理类</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\"> */</span></span></span><br><span class=\"line\"><span class=\"function\">open class BaseImpl : Base </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">display</span><span class=\"params\">()</span> </span>= print(<span class=\"string\">\"just display me.\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 代理类，使用:以及关键词by进行声明</span></span><br><span class=\"line\"><span class=\"comment\"> * 许代理属性和其他继承属性共用</span></span><br><span class=\"line\"><span class=\"comment\"> * class Drived(base: Base) : Base by base,BaseImpl()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">class Drived(base: Base) : Base by base</span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    var b = BaseImpl()</span><br><span class=\"line\">    var drived = Drived(b)</span><br><span class=\"line\">    drived.display()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">**</span><br><span class=\"line\"> * 代理类型：</span><br><span class=\"line\"> * 懒加载：Lazy</span><br><span class=\"line\"> * 观察者：Delegates.observable()</span><br><span class=\"line\"> * 非空属性：Delegates.notNull&lt;&gt;()</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Water</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> var weight:Int by Delegates.notNull()</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 代理属性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> val name: String by lazy &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Lazy.......\"</span>)</span><br><span class=\"line\">        <span class=\"string\">\"Code4Android\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> var value: String by Delegates.observable(<span class=\"string\">\"init value\"</span>) &#123;</span><br><span class=\"line\">        d, old, <span class=\"keyword\">new</span> -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">\"$d--&gt;$old-&gt;$new\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">main</span><span class=\"params\">(arg: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class=\"line\">    show()</span><br><span class=\"line\">    var water = Water()</span><br><span class=\"line\">    println(water.name)</span><br><span class=\"line\">    println(water.name)</span><br><span class=\"line\">    water.value = <span class=\"string\">\"11111\"</span></span><br><span class=\"line\">    water.value = <span class=\"string\">\"22222\"</span></span><br><span class=\"line\">    water.value = <span class=\"string\">\"33333\"</span></span><br><span class=\"line\">    println(water.value)</span><br><span class=\"line\">    println(water.value)</span><br><span class=\"line\">    <span class=\"comment\">//必须先赋值否则IllegalStateException: Property weight should be initialized before get.</span></span><br><span class=\"line\">    water.weight=<span class=\"number\">2</span></span><br><span class=\"line\">    print(water.weight)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Use-Android-APIs-with-Kotlin\"><a href=\"#Use-Android-APIs-with-Kotlin\" class=\"headerlink\" title=\"Use Android APIs with Kotlin\"></a>Use Android APIs with Kotlin</h2><h4 id=\"声明Activity\"><a href=\"#声明Activity\" class=\"headerlink\" title=\"声明Activity\"></a>声明Activity</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//in Kotlin</span></span><br><span class=\"line\">class MyActivity : AppCompatActivity() &#123;</span><br><span class=\"line\">  <span class=\"function\">override fun <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: Bundle?)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">    setContentView(R.layout.activity)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//in Java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"On-click-listener\"><a href=\"#On-click-listener\" class=\"headerlink\" title=\"On-click listener\"></a>On-click listener</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//in Kotlin</span></span><br><span class=\"line\">val fab = findViewById(R.id.fab) as FloatingActionButton</span><br><span class=\"line\">fab.setOnClickListener &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//in Java</span></span><br><span class=\"line\">FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</span><br><span class=\"line\">fab.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Item-click-listener\"><a href=\"#Item-click-listener\" class=\"headerlink\" title=\"Item click listener\"></a>Item click listener</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//in Kotlin</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> val mOnNavigationItemSelectedListener</span><br><span class=\"line\">    = BottomNavigationView.OnNavigationItemSelectedListener &#123; item -&gt;</span><br><span class=\"line\">  when (item.itemId) &#123;</span><br><span class=\"line\">    R.id.navigation_home -&gt; &#123;</span><br><span class=\"line\">      mTextMessage.setText(R.string.title_home)</span><br><span class=\"line\">      <span class=\"keyword\">return</span><span class=\"meta\">@OnNavigationItemSelectedListener</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    R.id.navigation_dashboard -&gt; &#123;</span><br><span class=\"line\">      mTextMessage.setText(R.string.title_dashboard)</span><br><span class=\"line\">      <span class=\"keyword\">return</span><span class=\"meta\">@OnNavigationItemSelectedListener</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//in Java</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener</span><br><span class=\"line\">    = <span class=\"keyword\">new</span> BottomNavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">(@NonNull MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (item.getItemId()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> R.id.navigation_home:</span><br><span class=\"line\">        mTextMessage.setText(R.string.title_home);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> R.id.navigation_dashboard:</span><br><span class=\"line\">        mTextMessage.setText(R.string.title_dashboard);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h2><ul>\n<li>官方文档<a href=\"http://kotlinlang.org/docs/reference/\" target=\"_blank\" rel=\"noopener\">http://kotlinlang.org/docs/reference/</a></li>\n<li>中文文档<a href=\"http://www.kotlincn.net/docs/reference/\" target=\"_blank\" rel=\"noopener\">http://www.kotlincn.net/docs/reference/</a></li>\n<li>Kotlin语言中文教程-GitBook<a href=\"https://huanglizhuo.gitbooks.io/kotlin-in-chinese/content/\" target=\"_blank\" rel=\"noopener\">https://huanglizhuo.gitbooks.io/kotlin-in-chinese/content/</a></li>\n<li>Kotlin for android中文教程<a href=\"https://wangjiegulu.gitbooks.io/kotlin-for-android-developers-zh/zhe_ben_shu_shi_he_ni_ma_ff1f.html\" target=\"_blank\" rel=\"noopener\">https://wangjiegulu.gitbooks.io/kotlin-for-android-developers-zh/zhe_ben_shu_shi_he_ni_ma_ff1f.html</a></li>\n<li>java与Kotlin混编<a href=\"http://kotlinlang.org/docs/reference/java-interop.html\" target=\"_blank\" rel=\"noopener\">http://kotlinlang.org/docs/reference/java-interop.html</a></li>\n</ul>\n"},{"title":"JNI实现字符串加密解密和验证","date":"2017-03-11T16:08:53.000Z","_content":"\n### 需求\n\n我们公认的，在java层的加解密运算都是不安全的，因为apk可以被反编译，你的加解密算法会很容易的暴露出去。一些现有的对称加密算法，密钥必须要在客户端保留，所以也是不安全的；这里不包括和后台通讯时使用的RSA加密，客户端保留公钥加密，后台使用私钥解密，这也是现有的比较大众的做法，但是如果只在客户端做加解密，我想很对人都会想到使用JNI技术，因为对于反编译而言，c／c++的代码反编译难度更大，增加了反编译的成本。下面是我的实战经历分享给大家。\n\n### 步骤\n\n开发工具：Android studio\n\n+ 搭建NDK开发环境\n+ 使用CMake(AS2.2以后才有的)创建JNI环境\n+ c／c++编写字符串加解密方法\n+ 测试验证\n\n### 搭建NDK开发环境\n\n打开Preferences到SDK选项，安装CMake、LLDB、NDK如下图\n\n[]()\n\n### 使用CMake创建JNI环境\n\n创建jni folder\n\n[]()\n\n配置CMake\n\n[]()\n\n+ 配置build.gradle文件\n+ 导入CMakeLists.txt,放入app目录下，内容如下\n\n\nCMake相关内容请自行Google.native.c、native_lib.h、native_lib.c是创建在jni目录下的c文件。\n\n### c／c++编写字符串加解密方法\n\n#### java层\n\n创建NativeHelper类\n```java\nSystem.loadLibrary(“native_lib”);该库名与CMakeLists.txt中配置的对应。\noption+enter，在native.c文件下创建与java层的对应方法\n```\n\n#### c/c++层\n\nnative.c中写了关联方法\n\n```java \n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n#include <jni.h>\n#include <string.h>\n#include \"native_lib.h\"\nJNIEXPORT jstring JNICALL\nJava_com_example_machan_jnistrencode_NativeHelper_encrypt(JNIEnv *env, jobject instance,\n                                                          jstring str_) {\n    const char *buf_deviceid = (*env)->GetStringUTFChars(env, str_, 0);\n    if (buf_deviceid == NULL) {\n        return NULL;\n    }\n    int len = strlen(buf_deviceid);\n    char cpyme[len];\n    strcpy(cpyme, buf_deviceid);\n    //2. 释放内存\n    (*env)->ReleaseStringUTFChars(env, str_, buf_deviceid);\n    char *result;\n    encrypt(cpyme, result);\n    return (*env)->NewStringUTF(env, result);\n}\nJNIEXPORT jstring JNICALL\nJava_com_example_machan_jnistrencode_NativeHelper_decryot(JNIEnv *env, jobject instance,\n                                                          jstring enc_) {\n    const char *buf_deviceid = (*env)->GetStringUTFChars(env, enc_, 0);\n    if (buf_deviceid == NULL) {\n        return NULL;\n    }\n    int len = strlen(buf_deviceid);\n    char cpyme[len];\n    strcpy(cpyme, buf_deviceid);\n    //2. 释放内存\n    (*env)->ReleaseStringUTFChars(env, enc_, buf_deviceid);\n    char *result;\n    decrypt(cpyme, result);\n    return (*env)->NewStringUTF(env, result);\n}\nJNIEXPORT jstring JNICALL\nJava_com_example_machan_jnistrencode_NativeHelper_checkEnc(JNIEnv *env, jobject instance,\n                                                           jstring enc_) {\n    const char *buf_deviceid = (*env)->GetStringUTFChars(env, enc_, 0);\n    if (buf_deviceid == NULL) {\n        return NULL;\n    }\n    int len = strlen(buf_deviceid);\n    char cpyme[len];\n    strcpy(cpyme, buf_deviceid);\n    //2. 释放内存\n    (*env)->ReleaseStringUTFChars(env, enc_, buf_deviceid);\n    char* tag;\n    decryotCheck(cpyme, tag);\n    int result = strcmp(tag, TAG);\n    return result == 0;\n}\n```\n\n其中的encrypt、decrypt、decryotCheck方法规则如下：\n\n#### 加密、解密\n\n明文：11111\n\ntag：tag\n\n密钥：随机生成6位字符，例如：123456\n\n加密字符：11111tag\n\n```java\n1 1 1 1 1 t a g\n+ + + + + + + +\n1 2 3 4 5 6 1 2\n= = = = = = = =\n```\n\nAscii码相加获得的值转换成字符串就是我们要的密文（超过127可以减去一个定值保证在0-127之间）\n实现的话由于我本身c语言功底很渣，就不贴代码了，只是给大家提供一种思路，变换规则按自己的来就好。\n\n#### 验证\n\n由于我们在加密的串后加了tag，所以验证tag值是否正确就可以，这只是一种简单的验证方式，不完美，也是提供一种思路 - -。\n\n### 结束\n\n+ 以前有用Android_mk来做JNI，但有了CMake后感觉更简单了。\n+ 上面提到的加密算法只能算是小儿科，对于一些不要求很严格的项目来说可以用用，毕竟成本不高。\n+ 后续可能将代码整理到github,因为可能涉及一些保密信息不便透露，望谅解。\n+ 本人也不是大牛，还在摸爬滚打阶段，有什么不对的地方望指正。\n\n希望大家都能在IT这条道路上走的更远～\n共勉～\n\n\n","source":"_posts/android-JNI实现字符串加密解密和验证-20170312.md","raw":"---\ntitle: JNI实现字符串加密解密和验证\ndate: 2017-03-12 00:08:53\ntags: Android\n---\n\n### 需求\n\n我们公认的，在java层的加解密运算都是不安全的，因为apk可以被反编译，你的加解密算法会很容易的暴露出去。一些现有的对称加密算法，密钥必须要在客户端保留，所以也是不安全的；这里不包括和后台通讯时使用的RSA加密，客户端保留公钥加密，后台使用私钥解密，这也是现有的比较大众的做法，但是如果只在客户端做加解密，我想很对人都会想到使用JNI技术，因为对于反编译而言，c／c++的代码反编译难度更大，增加了反编译的成本。下面是我的实战经历分享给大家。\n\n### 步骤\n\n开发工具：Android studio\n\n+ 搭建NDK开发环境\n+ 使用CMake(AS2.2以后才有的)创建JNI环境\n+ c／c++编写字符串加解密方法\n+ 测试验证\n\n### 搭建NDK开发环境\n\n打开Preferences到SDK选项，安装CMake、LLDB、NDK如下图\n\n[]()\n\n### 使用CMake创建JNI环境\n\n创建jni folder\n\n[]()\n\n配置CMake\n\n[]()\n\n+ 配置build.gradle文件\n+ 导入CMakeLists.txt,放入app目录下，内容如下\n\n\nCMake相关内容请自行Google.native.c、native_lib.h、native_lib.c是创建在jni目录下的c文件。\n\n### c／c++编写字符串加解密方法\n\n#### java层\n\n创建NativeHelper类\n```java\nSystem.loadLibrary(“native_lib”);该库名与CMakeLists.txt中配置的对应。\noption+enter，在native.c文件下创建与java层的对应方法\n```\n\n#### c/c++层\n\nnative.c中写了关联方法\n\n```java \n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n#include <jni.h>\n#include <string.h>\n#include \"native_lib.h\"\nJNIEXPORT jstring JNICALL\nJava_com_example_machan_jnistrencode_NativeHelper_encrypt(JNIEnv *env, jobject instance,\n                                                          jstring str_) {\n    const char *buf_deviceid = (*env)->GetStringUTFChars(env, str_, 0);\n    if (buf_deviceid == NULL) {\n        return NULL;\n    }\n    int len = strlen(buf_deviceid);\n    char cpyme[len];\n    strcpy(cpyme, buf_deviceid);\n    //2. 释放内存\n    (*env)->ReleaseStringUTFChars(env, str_, buf_deviceid);\n    char *result;\n    encrypt(cpyme, result);\n    return (*env)->NewStringUTF(env, result);\n}\nJNIEXPORT jstring JNICALL\nJava_com_example_machan_jnistrencode_NativeHelper_decryot(JNIEnv *env, jobject instance,\n                                                          jstring enc_) {\n    const char *buf_deviceid = (*env)->GetStringUTFChars(env, enc_, 0);\n    if (buf_deviceid == NULL) {\n        return NULL;\n    }\n    int len = strlen(buf_deviceid);\n    char cpyme[len];\n    strcpy(cpyme, buf_deviceid);\n    //2. 释放内存\n    (*env)->ReleaseStringUTFChars(env, enc_, buf_deviceid);\n    char *result;\n    decrypt(cpyme, result);\n    return (*env)->NewStringUTF(env, result);\n}\nJNIEXPORT jstring JNICALL\nJava_com_example_machan_jnistrencode_NativeHelper_checkEnc(JNIEnv *env, jobject instance,\n                                                           jstring enc_) {\n    const char *buf_deviceid = (*env)->GetStringUTFChars(env, enc_, 0);\n    if (buf_deviceid == NULL) {\n        return NULL;\n    }\n    int len = strlen(buf_deviceid);\n    char cpyme[len];\n    strcpy(cpyme, buf_deviceid);\n    //2. 释放内存\n    (*env)->ReleaseStringUTFChars(env, enc_, buf_deviceid);\n    char* tag;\n    decryotCheck(cpyme, tag);\n    int result = strcmp(tag, TAG);\n    return result == 0;\n}\n```\n\n其中的encrypt、decrypt、decryotCheck方法规则如下：\n\n#### 加密、解密\n\n明文：11111\n\ntag：tag\n\n密钥：随机生成6位字符，例如：123456\n\n加密字符：11111tag\n\n```java\n1 1 1 1 1 t a g\n+ + + + + + + +\n1 2 3 4 5 6 1 2\n= = = = = = = =\n```\n\nAscii码相加获得的值转换成字符串就是我们要的密文（超过127可以减去一个定值保证在0-127之间）\n实现的话由于我本身c语言功底很渣，就不贴代码了，只是给大家提供一种思路，变换规则按自己的来就好。\n\n#### 验证\n\n由于我们在加密的串后加了tag，所以验证tag值是否正确就可以，这只是一种简单的验证方式，不完美，也是提供一种思路 - -。\n\n### 结束\n\n+ 以前有用Android_mk来做JNI，但有了CMake后感觉更简单了。\n+ 上面提到的加密算法只能算是小儿科，对于一些不要求很严格的项目来说可以用用，毕竟成本不高。\n+ 后续可能将代码整理到github,因为可能涉及一些保密信息不便透露，望谅解。\n+ 本人也不是大牛，还在摸爬滚打阶段，有什么不对的地方望指正。\n\n希望大家都能在IT这条道路上走的更远～\n共勉～\n\n\n","slug":"android-JNI实现字符串加密解密和验证-20170312","published":1,"updated":"2018-11-18T04:31:25.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjomh75td0003zz3gm09apzb7","content":"<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>我们公认的，在java层的加解密运算都是不安全的，因为apk可以被反编译，你的加解密算法会很容易的暴露出去。一些现有的对称加密算法，密钥必须要在客户端保留，所以也是不安全的；这里不包括和后台通讯时使用的RSA加密，客户端保留公钥加密，后台使用私钥解密，这也是现有的比较大众的做法，但是如果只在客户端做加解密，我想很对人都会想到使用JNI技术，因为对于反编译而言，c／c++的代码反编译难度更大，增加了反编译的成本。下面是我的实战经历分享给大家。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>开发工具：Android studio</p>\n<ul>\n<li>搭建NDK开发环境</li>\n<li>使用CMake(AS2.2以后才有的)创建JNI环境</li>\n<li>c／c++编写字符串加解密方法</li>\n<li>测试验证</li>\n</ul>\n<h3 id=\"搭建NDK开发环境\"><a href=\"#搭建NDK开发环境\" class=\"headerlink\" title=\"搭建NDK开发环境\"></a>搭建NDK开发环境</h3><p>打开Preferences到SDK选项，安装CMake、LLDB、NDK如下图</p>\n<p><a href=\"\"></a></p>\n<h3 id=\"使用CMake创建JNI环境\"><a href=\"#使用CMake创建JNI环境\" class=\"headerlink\" title=\"使用CMake创建JNI环境\"></a>使用CMake创建JNI环境</h3><p>创建jni folder</p>\n<p><a href=\"\"></a></p>\n<p>配置CMake</p>\n<p><a href=\"\"></a></p>\n<ul>\n<li>配置build.gradle文件</li>\n<li>导入CMakeLists.txt,放入app目录下，内容如下</li>\n</ul>\n<p>CMake相关内容请自行Google.native.c、native_lib.h、native_lib.c是创建在jni目录下的c文件。</p>\n<h3 id=\"c／c-编写字符串加解密方法\"><a href=\"#c／c-编写字符串加解密方法\" class=\"headerlink\" title=\"c／c++编写字符串加解密方法\"></a>c／c++编写字符串加解密方法</h3><h4 id=\"java层\"><a href=\"#java层\" class=\"headerlink\" title=\"java层\"></a>java层</h4><p>创建NativeHelper类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.loadLibrary(“native_lib”);该库名与CMakeLists.txt中配置的对应。</span><br><span class=\"line\">option+enter，在<span class=\"keyword\">native</span>.c文件下创建与java层的对应方法</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"c-c-层\"><a href=\"#c-c-层\" class=\"headerlink\" title=\"c/c++层\"></a>c/c++层</h4><p>native.c中写了关联方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"number\">19</span></span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">24</span></span><br><span class=\"line\"><span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"number\">26</span></span><br><span class=\"line\"><span class=\"number\">27</span></span><br><span class=\"line\"><span class=\"number\">28</span></span><br><span class=\"line\"><span class=\"number\">29</span></span><br><span class=\"line\"><span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"number\">31</span></span><br><span class=\"line\"><span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"number\">33</span></span><br><span class=\"line\"><span class=\"number\">34</span></span><br><span class=\"line\"><span class=\"number\">35</span></span><br><span class=\"line\"><span class=\"number\">36</span></span><br><span class=\"line\"><span class=\"number\">37</span></span><br><span class=\"line\"><span class=\"number\">38</span></span><br><span class=\"line\"><span class=\"number\">39</span></span><br><span class=\"line\"><span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"number\">41</span></span><br><span class=\"line\"><span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"number\">43</span></span><br><span class=\"line\"><span class=\"number\">44</span></span><br><span class=\"line\"><span class=\"number\">45</span></span><br><span class=\"line\"><span class=\"number\">46</span></span><br><span class=\"line\"><span class=\"number\">47</span></span><br><span class=\"line\"><span class=\"number\">48</span></span><br><span class=\"line\"><span class=\"number\">49</span></span><br><span class=\"line\"><span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"number\">51</span></span><br><span class=\"line\"><span class=\"number\">52</span></span><br><span class=\"line\"><span class=\"number\">53</span></span><br><span class=\"line\"><span class=\"number\">54</span></span><br><span class=\"line\"><span class=\"number\">55</span></span><br><span class=\"line\"><span class=\"number\">56</span></span><br><span class=\"line\"><span class=\"number\">57</span></span><br><span class=\"line\"><span class=\"number\">58</span></span><br><span class=\"line\"><span class=\"number\">59</span></span><br><span class=\"line\"><span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"number\">61</span></span><br><span class=\"line\">#include &lt;jni.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include \"native_lib.h\"</span><br><span class=\"line\">JNIEXPORT jstring JNICALL</span><br><span class=\"line\">Java_com_example_machan_jnistrencode_NativeHelper_encrypt(JNIEnv *env, jobject instance,</span><br><span class=\"line\">                                                          jstring str_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *buf_deviceid = (*env)-&gt;GetStringUTFChars(env, str_, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (buf_deviceid == NULL) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = strlen(buf_deviceid);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> cpyme[len];</span><br><span class=\"line\">    strcpy(cpyme, buf_deviceid);</span><br><span class=\"line\">    <span class=\"comment\">//2. 释放内存</span></span><br><span class=\"line\">    (*env)-&gt;ReleaseStringUTFChars(env, str_, buf_deviceid);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *result;</span><br><span class=\"line\">    encrypt(cpyme, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (*env)-&gt;NewStringUTF(env, result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">JNIEXPORT jstring JNICALL</span><br><span class=\"line\">Java_com_example_machan_jnistrencode_NativeHelper_decryot(JNIEnv *env, jobject instance,</span><br><span class=\"line\">                                                          jstring enc_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *buf_deviceid = (*env)-&gt;GetStringUTFChars(env, enc_, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (buf_deviceid == NULL) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = strlen(buf_deviceid);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> cpyme[len];</span><br><span class=\"line\">    strcpy(cpyme, buf_deviceid);</span><br><span class=\"line\">    <span class=\"comment\">//2. 释放内存</span></span><br><span class=\"line\">    (*env)-&gt;ReleaseStringUTFChars(env, enc_, buf_deviceid);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *result;</span><br><span class=\"line\">    decrypt(cpyme, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (*env)-&gt;NewStringUTF(env, result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">JNIEXPORT jstring JNICALL</span><br><span class=\"line\">Java_com_example_machan_jnistrencode_NativeHelper_checkEnc(JNIEnv *env, jobject instance,</span><br><span class=\"line\">                                                           jstring enc_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *buf_deviceid = (*env)-&gt;GetStringUTFChars(env, enc_, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (buf_deviceid == NULL) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = strlen(buf_deviceid);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> cpyme[len];</span><br><span class=\"line\">    strcpy(cpyme, buf_deviceid);</span><br><span class=\"line\">    <span class=\"comment\">//2. 释放内存</span></span><br><span class=\"line\">    (*env)-&gt;ReleaseStringUTFChars(env, enc_, buf_deviceid);</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* tag;</span><br><span class=\"line\">    decryotCheck(cpyme, tag);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = strcmp(tag, TAG);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中的encrypt、decrypt、decryotCheck方法规则如下：</p>\n<h4 id=\"加密、解密\"><a href=\"#加密、解密\" class=\"headerlink\" title=\"加密、解密\"></a>加密、解密</h4><p>明文：11111</p>\n<p>tag：tag</p>\n<p>密钥：随机生成6位字符，例如：123456</p>\n<p>加密字符：11111tag</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> t a g</span><br><span class=\"line\">+ + + + + + + +</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">1</span> <span class=\"number\">2</span></span><br><span class=\"line\">= = = = = = = =</span><br></pre></td></tr></table></figure>\n<p>Ascii码相加获得的值转换成字符串就是我们要的密文（超过127可以减去一个定值保证在0-127之间）<br>实现的话由于我本身c语言功底很渣，就不贴代码了，只是给大家提供一种思路，变换规则按自己的来就好。</p>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><p>由于我们在加密的串后加了tag，所以验证tag值是否正确就可以，这只是一种简单的验证方式，不完美，也是提供一种思路 - -。</p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><ul>\n<li>以前有用Android_mk来做JNI，但有了CMake后感觉更简单了。</li>\n<li>上面提到的加密算法只能算是小儿科，对于一些不要求很严格的项目来说可以用用，毕竟成本不高。</li>\n<li>后续可能将代码整理到github,因为可能涉及一些保密信息不便透露，望谅解。</li>\n<li>本人也不是大牛，还在摸爬滚打阶段，有什么不对的地方望指正。</li>\n</ul>\n<p>希望大家都能在IT这条道路上走的更远～<br>共勉～</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>我们公认的，在java层的加解密运算都是不安全的，因为apk可以被反编译，你的加解密算法会很容易的暴露出去。一些现有的对称加密算法，密钥必须要在客户端保留，所以也是不安全的；这里不包括和后台通讯时使用的RSA加密，客户端保留公钥加密，后台使用私钥解密，这也是现有的比较大众的做法，但是如果只在客户端做加解密，我想很对人都会想到使用JNI技术，因为对于反编译而言，c／c++的代码反编译难度更大，增加了反编译的成本。下面是我的实战经历分享给大家。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>开发工具：Android studio</p>\n<ul>\n<li>搭建NDK开发环境</li>\n<li>使用CMake(AS2.2以后才有的)创建JNI环境</li>\n<li>c／c++编写字符串加解密方法</li>\n<li>测试验证</li>\n</ul>\n<h3 id=\"搭建NDK开发环境\"><a href=\"#搭建NDK开发环境\" class=\"headerlink\" title=\"搭建NDK开发环境\"></a>搭建NDK开发环境</h3><p>打开Preferences到SDK选项，安装CMake、LLDB、NDK如下图</p>\n<p><a href=\"\"></a></p>\n<h3 id=\"使用CMake创建JNI环境\"><a href=\"#使用CMake创建JNI环境\" class=\"headerlink\" title=\"使用CMake创建JNI环境\"></a>使用CMake创建JNI环境</h3><p>创建jni folder</p>\n<p><a href=\"\"></a></p>\n<p>配置CMake</p>\n<p><a href=\"\"></a></p>\n<ul>\n<li>配置build.gradle文件</li>\n<li>导入CMakeLists.txt,放入app目录下，内容如下</li>\n</ul>\n<p>CMake相关内容请自行Google.native.c、native_lib.h、native_lib.c是创建在jni目录下的c文件。</p>\n<h3 id=\"c／c-编写字符串加解密方法\"><a href=\"#c／c-编写字符串加解密方法\" class=\"headerlink\" title=\"c／c++编写字符串加解密方法\"></a>c／c++编写字符串加解密方法</h3><h4 id=\"java层\"><a href=\"#java层\" class=\"headerlink\" title=\"java层\"></a>java层</h4><p>创建NativeHelper类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.loadLibrary(“native_lib”);该库名与CMakeLists.txt中配置的对应。</span><br><span class=\"line\">option+enter，在<span class=\"keyword\">native</span>.c文件下创建与java层的对应方法</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"c-c-层\"><a href=\"#c-c-层\" class=\"headerlink\" title=\"c/c++层\"></a>c/c++层</h4><p>native.c中写了关联方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"number\">19</span></span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">24</span></span><br><span class=\"line\"><span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"number\">26</span></span><br><span class=\"line\"><span class=\"number\">27</span></span><br><span class=\"line\"><span class=\"number\">28</span></span><br><span class=\"line\"><span class=\"number\">29</span></span><br><span class=\"line\"><span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"number\">31</span></span><br><span class=\"line\"><span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"number\">33</span></span><br><span class=\"line\"><span class=\"number\">34</span></span><br><span class=\"line\"><span class=\"number\">35</span></span><br><span class=\"line\"><span class=\"number\">36</span></span><br><span class=\"line\"><span class=\"number\">37</span></span><br><span class=\"line\"><span class=\"number\">38</span></span><br><span class=\"line\"><span class=\"number\">39</span></span><br><span class=\"line\"><span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"number\">41</span></span><br><span class=\"line\"><span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"number\">43</span></span><br><span class=\"line\"><span class=\"number\">44</span></span><br><span class=\"line\"><span class=\"number\">45</span></span><br><span class=\"line\"><span class=\"number\">46</span></span><br><span class=\"line\"><span class=\"number\">47</span></span><br><span class=\"line\"><span class=\"number\">48</span></span><br><span class=\"line\"><span class=\"number\">49</span></span><br><span class=\"line\"><span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"number\">51</span></span><br><span class=\"line\"><span class=\"number\">52</span></span><br><span class=\"line\"><span class=\"number\">53</span></span><br><span class=\"line\"><span class=\"number\">54</span></span><br><span class=\"line\"><span class=\"number\">55</span></span><br><span class=\"line\"><span class=\"number\">56</span></span><br><span class=\"line\"><span class=\"number\">57</span></span><br><span class=\"line\"><span class=\"number\">58</span></span><br><span class=\"line\"><span class=\"number\">59</span></span><br><span class=\"line\"><span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"number\">61</span></span><br><span class=\"line\">#include &lt;jni.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include \"native_lib.h\"</span><br><span class=\"line\">JNIEXPORT jstring JNICALL</span><br><span class=\"line\">Java_com_example_machan_jnistrencode_NativeHelper_encrypt(JNIEnv *env, jobject instance,</span><br><span class=\"line\">                                                          jstring str_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *buf_deviceid = (*env)-&gt;GetStringUTFChars(env, str_, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (buf_deviceid == NULL) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = strlen(buf_deviceid);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> cpyme[len];</span><br><span class=\"line\">    strcpy(cpyme, buf_deviceid);</span><br><span class=\"line\">    <span class=\"comment\">//2. 释放内存</span></span><br><span class=\"line\">    (*env)-&gt;ReleaseStringUTFChars(env, str_, buf_deviceid);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *result;</span><br><span class=\"line\">    encrypt(cpyme, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (*env)-&gt;NewStringUTF(env, result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">JNIEXPORT jstring JNICALL</span><br><span class=\"line\">Java_com_example_machan_jnistrencode_NativeHelper_decryot(JNIEnv *env, jobject instance,</span><br><span class=\"line\">                                                          jstring enc_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *buf_deviceid = (*env)-&gt;GetStringUTFChars(env, enc_, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (buf_deviceid == NULL) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = strlen(buf_deviceid);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> cpyme[len];</span><br><span class=\"line\">    strcpy(cpyme, buf_deviceid);</span><br><span class=\"line\">    <span class=\"comment\">//2. 释放内存</span></span><br><span class=\"line\">    (*env)-&gt;ReleaseStringUTFChars(env, enc_, buf_deviceid);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *result;</span><br><span class=\"line\">    decrypt(cpyme, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (*env)-&gt;NewStringUTF(env, result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">JNIEXPORT jstring JNICALL</span><br><span class=\"line\">Java_com_example_machan_jnistrencode_NativeHelper_checkEnc(JNIEnv *env, jobject instance,</span><br><span class=\"line\">                                                           jstring enc_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *buf_deviceid = (*env)-&gt;GetStringUTFChars(env, enc_, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (buf_deviceid == NULL) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = strlen(buf_deviceid);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> cpyme[len];</span><br><span class=\"line\">    strcpy(cpyme, buf_deviceid);</span><br><span class=\"line\">    <span class=\"comment\">//2. 释放内存</span></span><br><span class=\"line\">    (*env)-&gt;ReleaseStringUTFChars(env, enc_, buf_deviceid);</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* tag;</span><br><span class=\"line\">    decryotCheck(cpyme, tag);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = strcmp(tag, TAG);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中的encrypt、decrypt、decryotCheck方法规则如下：</p>\n<h4 id=\"加密、解密\"><a href=\"#加密、解密\" class=\"headerlink\" title=\"加密、解密\"></a>加密、解密</h4><p>明文：11111</p>\n<p>tag：tag</p>\n<p>密钥：随机生成6位字符，例如：123456</p>\n<p>加密字符：11111tag</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> t a g</span><br><span class=\"line\">+ + + + + + + +</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">1</span> <span class=\"number\">2</span></span><br><span class=\"line\">= = = = = = = =</span><br></pre></td></tr></table></figure>\n<p>Ascii码相加获得的值转换成字符串就是我们要的密文（超过127可以减去一个定值保证在0-127之间）<br>实现的话由于我本身c语言功底很渣，就不贴代码了，只是给大家提供一种思路，变换规则按自己的来就好。</p>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><p>由于我们在加密的串后加了tag，所以验证tag值是否正确就可以，这只是一种简单的验证方式，不完美，也是提供一种思路 - -。</p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><ul>\n<li>以前有用Android_mk来做JNI，但有了CMake后感觉更简单了。</li>\n<li>上面提到的加密算法只能算是小儿科，对于一些不要求很严格的项目来说可以用用，毕竟成本不高。</li>\n<li>后续可能将代码整理到github,因为可能涉及一些保密信息不便透露，望谅解。</li>\n<li>本人也不是大牛，还在摸爬滚打阶段，有什么不对的地方望指正。</li>\n</ul>\n<p>希望大家都能在IT这条道路上走的更远～<br>共勉～</p>\n"},{"title":"开启全新的技术探索之旅","date":"2017-02-10T15:45:51.000Z","_content":"\n## 开启全新的技术探索之旅\n\n### 开始\n\n之前写博客都是在CSDN，虽然很方便但是这种托管方式缺少了定制性，页面也不是很美观（在这看脸的时代里- -），本来自己的博客就像是自己的亲生子女一样，苦心养育却有种养糟了的感觉，所以使用hexo+github pages搭建了新的博客。经过一下午的折腾，终于算是初具雏形。心情很是美好。而且今天是星期五！更重要的，今天发工资！哈哈哈，简直不能再高兴了！\n\n### 近期打算\n\n由于近期一直在做一个项目，项目中有几个点我觉得有必要记录下，博客内容可能是\n\n+ 获取设备唯一标识\n+ android JNI实现字符串加解密和验证\n看时间吧，估计这两个礼拜就能整理出来。\n\n### 分享\n\n关于搭建过程，可以参考一下这篇文章,很全面，门槛也比较低。\n\n希望能在技术的道路上走的更远～","source":"_posts/other-firstblog-20170210.md","raw":"---\ntitle: 开启全新的技术探索之旅\ndate: 2017-02-10 23:45:51\ntags: Android\n---\n\n## 开启全新的技术探索之旅\n\n### 开始\n\n之前写博客都是在CSDN，虽然很方便但是这种托管方式缺少了定制性，页面也不是很美观（在这看脸的时代里- -），本来自己的博客就像是自己的亲生子女一样，苦心养育却有种养糟了的感觉，所以使用hexo+github pages搭建了新的博客。经过一下午的折腾，终于算是初具雏形。心情很是美好。而且今天是星期五！更重要的，今天发工资！哈哈哈，简直不能再高兴了！\n\n### 近期打算\n\n由于近期一直在做一个项目，项目中有几个点我觉得有必要记录下，博客内容可能是\n\n+ 获取设备唯一标识\n+ android JNI实现字符串加解密和验证\n看时间吧，估计这两个礼拜就能整理出来。\n\n### 分享\n\n关于搭建过程，可以参考一下这篇文章,很全面，门槛也比较低。\n\n希望能在技术的道路上走的更远～","slug":"other-firstblog-20170210","published":1,"updated":"2018-11-18T04:31:25.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjomh75th0006zz3gc6yg7fdf","content":"<h2 id=\"开启全新的技术探索之旅\"><a href=\"#开启全新的技术探索之旅\" class=\"headerlink\" title=\"开启全新的技术探索之旅\"></a>开启全新的技术探索之旅</h2><h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>之前写博客都是在CSDN，虽然很方便但是这种托管方式缺少了定制性，页面也不是很美观（在这看脸的时代里- -），本来自己的博客就像是自己的亲生子女一样，苦心养育却有种养糟了的感觉，所以使用hexo+github pages搭建了新的博客。经过一下午的折腾，终于算是初具雏形。心情很是美好。而且今天是星期五！更重要的，今天发工资！哈哈哈，简直不能再高兴了！</p>\n<h3 id=\"近期打算\"><a href=\"#近期打算\" class=\"headerlink\" title=\"近期打算\"></a>近期打算</h3><p>由于近期一直在做一个项目，项目中有几个点我觉得有必要记录下，博客内容可能是</p>\n<ul>\n<li>获取设备唯一标识</li>\n<li>android JNI实现字符串加解密和验证<br>看时间吧，估计这两个礼拜就能整理出来。</li>\n</ul>\n<h3 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h3><p>关于搭建过程，可以参考一下这篇文章,很全面，门槛也比较低。</p>\n<p>希望能在技术的道路上走的更远～</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"开启全新的技术探索之旅\"><a href=\"#开启全新的技术探索之旅\" class=\"headerlink\" title=\"开启全新的技术探索之旅\"></a>开启全新的技术探索之旅</h2><h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>之前写博客都是在CSDN，虽然很方便但是这种托管方式缺少了定制性，页面也不是很美观（在这看脸的时代里- -），本来自己的博客就像是自己的亲生子女一样，苦心养育却有种养糟了的感觉，所以使用hexo+github pages搭建了新的博客。经过一下午的折腾，终于算是初具雏形。心情很是美好。而且今天是星期五！更重要的，今天发工资！哈哈哈，简直不能再高兴了！</p>\n<h3 id=\"近期打算\"><a href=\"#近期打算\" class=\"headerlink\" title=\"近期打算\"></a>近期打算</h3><p>由于近期一直在做一个项目，项目中有几个点我觉得有必要记录下，博客内容可能是</p>\n<ul>\n<li>获取设备唯一标识</li>\n<li>android JNI实现字符串加解密和验证<br>看时间吧，估计这两个礼拜就能整理出来。</li>\n</ul>\n<h3 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h3><p>关于搭建过程，可以参考一下这篇文章,很全面，门槛也比较低。</p>\n<p>希望能在技术的道路上走的更远～</p>\n"},{"title":"Android获取设备唯一标识","date":"2018-01-09T16:00:50.000Z","_content":"\n## Android获取设备唯一标识\n\n### 需求\n\n对于移动端产品来说，能准确的识别、定位、跟踪一台设备是一件很重要的事，基于设备唯一性可以做的事有很多，比如设备锁、防作弊、安全防护等。但是在android和ios两大阵营上，都没有能标识设备唯一性的ID供开发者采集，所以就有了本篇文章，让我们来一起分析下android端可以用来标识唯一设备的属性、优缺点及解决方案。\n\n### 备选设备ID\n#### IMEI\n国际移动设备识别码（International Mobile Equipment Identity，IMEI），即通常所说的手机序列号、手机“串号”，用于在移动电话网络中识别每一部独立的手机等行动通讯装置，相当于移动电话的身份证。序列号共有15位数字，前6位（TAC）是型号核准号码，代表手机类型。接着2位（FAC）是最后装配号，代表产地。后6位（SNR）是串号，代表生产顺序号。最后1位（SP）一般为0，是检验码，备用。\n\n##### 获取方式\n```java\nTelephonyManager manager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);\nString imei = manager.getDeviceId();\n```\n##### 问题\n+ 可以被作弊软件修改。\n+ 厂商定制系统中的Bug：少数手机设备上，由于该实现有漏洞，会返回垃圾。如000000000000000、11111111111111111.\n+ 手机管家，360手机助手，和一些厂商ROM自带的权限管家，有阻止应用采集手机IMEI的功能\n+ 山寨手机厂商为了节省成本，批量复制重复IMEI串烧进手机的EEPROM里面。\n\n#### Mac Address\nwifi无线网卡的MAC地址，与终端硬件关联，可用作设备的唯一标识。\n\n##### 获取方式\n```java\nWifiManager wifi = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);\nWifiInfo info = wifi.getConnectionInfo();\nString mac = info.getMacAddress();\n```\n\n##### 问题\n可以被作弊软件修改。\nAndroid6.0及以上的系统上，通过上面的系统接口采集到的MAC地址返回的是一个固定串：02:00:00:00:00:00\n#### IMSI\n国际移动用户识别码（IMSI：International Mobile Subscriber Identification Number）是区别移动用户的标志，储存在SIM卡中，可用于区别移动用户的有效信息。其总长度不超过15位，同样使用0~9的数字。其中MCC是移动用户所属国家代号，占3位数字，中国的MCC规定为460；MNC是移动网号码，由两位或者三位数字组成，中国移动的移动网络编码（MNC）为00；用于识别移动用户所归属的移动通信网；MSIN是移动用户识别码，用以识别某一移动通信网中的移动用户。此ID是跟SIM卡绑定的，更换SIM卡就会发生变化，同样在仅支持wifi的pad设备上是没有的。\n\n##### 获取方式\n```java\nTelephonyManager manager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);\nString imsi = manager.getSubscriberId();\n```\n\n#####问题\n存在无SIM卡的终端设备获取不到的问题\n最大的问题是会发生变化，与终端设备非强绑定。\n\n#### Android_ID\nAndroid_ID是设备首次启动时，系统生成的一个唯一串号，长16字节(例：70560687d711af97)，由com.android.providers.settings 这个系统程序所管理，Android6.0 以下储存在/data/data/com.android.providers.settings/databases/settings.db中的secure 表。\n\n##### 获取方式\n```java\nSettings.Secure.getString(context.getContentResolver(), \"android_id\")\n```\n\n##### 问题\n此ID与硬件无关，与Android系统有关，所以当系统还原出厂设置，刷机时这个ID就会重新生成了。\n由于国内的手机基本都是厂商定制的ROM，所以此ID的控制权均由厂商ROM层来控制，难免会发生一些bug，导致部分机型上的ID都相同。\n另外在OTA ROM升级的时候，有些厂商会保留原有db信息不变，有些厂商会清除重新生成。\n与系统强依赖，稳定性不足。\n#### CID\nCard Identification Register(CID)，顾名思义，做为存储卡片的唯一识别信息，规范上要求每张卡片的ID都唯一。CID 寄存器有 16 字节长，如下表 所示，它包含了本卡的特别识别码（ID 号）。 这些信息是在卡的生产期间被编程（烧录），主控制器不 能修改它们的内容。 注意：SD卡的 CID 寄存器和 MMC 卡的 CID 寄存器在记录结构上是不同的。一般来讲MMC0 保存的是内置存储卡的信息，MMC1 保存的是扩展存储卡也就是SD卡的信息。因为SD卡跟终端设备又不是强关联的，会因为更换升级发生变化，那么我们主要看手机内置存储卡的CID。\n\n##### 获取方式\n```shell\nadb shell cat /sys/class/mmc_host/mmc*/mmc*:*/cid\n```\n\n#####问题\n在部分山寨低端机器上，会出现采集不到和采集的是SD卡的CID。\n\n### 方案\n通过以上对可能作为设备唯一ID的属性分析后可以看到，没有一个属性可以作为标识设备的唯一ID，我们可能抱着90%多的有效率，选择某一个属性作为设备的唯一标识，又不可避免android端复杂的系统、定制厂商、root等环境。所以这里给出的方案又不能称之为方案，只是尽可能的标识唯一设备。所以方案可能是这样的：\n\n按照以上分析的稳定性和可靠性分下先后顺序：\n##CID > IMEI > MAC > ANDROID_ID##\n生成deviceId规则为：\n按照以上先后顺序依次获取，判断取得的值的有效性，有效的场合返回，无效的场合获取下一个值；直到取到有效值，都无效的场合使用UUID随机生成。\n在尽可能获得设备唯一ID的基础上，将获得的ID保存在本地，下次直接从内存或外部存储中读取。这样尽量保证获取的设备id的唯一性。\n\nTip：保存到SD卡的设备ID可以保存为”.xxxx.txt”的形式，隐藏文件也能尽可能不会被用户误删。\n\n所以，所谓的方案只是提供了一种简单的思路，不是什么完美的解决方案。\n\n### 兼容性问题\n大家都知道在Android6.0系统上，新增了不少特性，与终端ID采集密切相关的就是权限控制这个特性，结论如下：\n\nIMEI，IMSI需用户手动授权方可采集。\n6.0里面READ_PHONE_STATE权限被归属成敏感权限，在运行时，如果应用程序获取TelephonyManager实例时，系统就会弹出是否允许应用拨打电话和管理通话的选择对话框，用户拒绝之后，就采集不到。\n针对6.0及以上的系统，ID的采集需要进行兼容，使用 checkPermission 接口从内存中直接获取权限数据，判断用户是否已经授权。\n\nMAC地址通过非系统接口可采集(6.0以下通过系统接口采集)，采集场景仅限于处于wifi连接状态。\n非系统接口，其实指的就是直接读取文件的方式，如下：\n\n```java\ncat /sys/class/net/wlan0/address \ncat /sys/devices/virtual/net/wlan0/address\n```\n\nAndroidID采集不受影响，但此ID不与硬件绑定，刷机，系统还原，升级等场景会发生变化，不稳定。\n\n> 说明：应用编译时选择的targetSdkVersion>=23，在6.0及以上的系统运行才会触发权限提示框，<23打出的apk包不受此影响。\n\n### 备注\n以上大部分内容引自腾讯质量开放平台,在此感谢。","source":"_posts/android-deviceId-20170310.md","raw":"---\ntitle: Android获取设备唯一标识\ndate: 2017-13-10 00:00:50\ntags: Android\n---\n\n## Android获取设备唯一标识\n\n### 需求\n\n对于移动端产品来说，能准确的识别、定位、跟踪一台设备是一件很重要的事，基于设备唯一性可以做的事有很多，比如设备锁、防作弊、安全防护等。但是在android和ios两大阵营上，都没有能标识设备唯一性的ID供开发者采集，所以就有了本篇文章，让我们来一起分析下android端可以用来标识唯一设备的属性、优缺点及解决方案。\n\n### 备选设备ID\n#### IMEI\n国际移动设备识别码（International Mobile Equipment Identity，IMEI），即通常所说的手机序列号、手机“串号”，用于在移动电话网络中识别每一部独立的手机等行动通讯装置，相当于移动电话的身份证。序列号共有15位数字，前6位（TAC）是型号核准号码，代表手机类型。接着2位（FAC）是最后装配号，代表产地。后6位（SNR）是串号，代表生产顺序号。最后1位（SP）一般为0，是检验码，备用。\n\n##### 获取方式\n```java\nTelephonyManager manager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);\nString imei = manager.getDeviceId();\n```\n##### 问题\n+ 可以被作弊软件修改。\n+ 厂商定制系统中的Bug：少数手机设备上，由于该实现有漏洞，会返回垃圾。如000000000000000、11111111111111111.\n+ 手机管家，360手机助手，和一些厂商ROM自带的权限管家，有阻止应用采集手机IMEI的功能\n+ 山寨手机厂商为了节省成本，批量复制重复IMEI串烧进手机的EEPROM里面。\n\n#### Mac Address\nwifi无线网卡的MAC地址，与终端硬件关联，可用作设备的唯一标识。\n\n##### 获取方式\n```java\nWifiManager wifi = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);\nWifiInfo info = wifi.getConnectionInfo();\nString mac = info.getMacAddress();\n```\n\n##### 问题\n可以被作弊软件修改。\nAndroid6.0及以上的系统上，通过上面的系统接口采集到的MAC地址返回的是一个固定串：02:00:00:00:00:00\n#### IMSI\n国际移动用户识别码（IMSI：International Mobile Subscriber Identification Number）是区别移动用户的标志，储存在SIM卡中，可用于区别移动用户的有效信息。其总长度不超过15位，同样使用0~9的数字。其中MCC是移动用户所属国家代号，占3位数字，中国的MCC规定为460；MNC是移动网号码，由两位或者三位数字组成，中国移动的移动网络编码（MNC）为00；用于识别移动用户所归属的移动通信网；MSIN是移动用户识别码，用以识别某一移动通信网中的移动用户。此ID是跟SIM卡绑定的，更换SIM卡就会发生变化，同样在仅支持wifi的pad设备上是没有的。\n\n##### 获取方式\n```java\nTelephonyManager manager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);\nString imsi = manager.getSubscriberId();\n```\n\n#####问题\n存在无SIM卡的终端设备获取不到的问题\n最大的问题是会发生变化，与终端设备非强绑定。\n\n#### Android_ID\nAndroid_ID是设备首次启动时，系统生成的一个唯一串号，长16字节(例：70560687d711af97)，由com.android.providers.settings 这个系统程序所管理，Android6.0 以下储存在/data/data/com.android.providers.settings/databases/settings.db中的secure 表。\n\n##### 获取方式\n```java\nSettings.Secure.getString(context.getContentResolver(), \"android_id\")\n```\n\n##### 问题\n此ID与硬件无关，与Android系统有关，所以当系统还原出厂设置，刷机时这个ID就会重新生成了。\n由于国内的手机基本都是厂商定制的ROM，所以此ID的控制权均由厂商ROM层来控制，难免会发生一些bug，导致部分机型上的ID都相同。\n另外在OTA ROM升级的时候，有些厂商会保留原有db信息不变，有些厂商会清除重新生成。\n与系统强依赖，稳定性不足。\n#### CID\nCard Identification Register(CID)，顾名思义，做为存储卡片的唯一识别信息，规范上要求每张卡片的ID都唯一。CID 寄存器有 16 字节长，如下表 所示，它包含了本卡的特别识别码（ID 号）。 这些信息是在卡的生产期间被编程（烧录），主控制器不 能修改它们的内容。 注意：SD卡的 CID 寄存器和 MMC 卡的 CID 寄存器在记录结构上是不同的。一般来讲MMC0 保存的是内置存储卡的信息，MMC1 保存的是扩展存储卡也就是SD卡的信息。因为SD卡跟终端设备又不是强关联的，会因为更换升级发生变化，那么我们主要看手机内置存储卡的CID。\n\n##### 获取方式\n```shell\nadb shell cat /sys/class/mmc_host/mmc*/mmc*:*/cid\n```\n\n#####问题\n在部分山寨低端机器上，会出现采集不到和采集的是SD卡的CID。\n\n### 方案\n通过以上对可能作为设备唯一ID的属性分析后可以看到，没有一个属性可以作为标识设备的唯一ID，我们可能抱着90%多的有效率，选择某一个属性作为设备的唯一标识，又不可避免android端复杂的系统、定制厂商、root等环境。所以这里给出的方案又不能称之为方案，只是尽可能的标识唯一设备。所以方案可能是这样的：\n\n按照以上分析的稳定性和可靠性分下先后顺序：\n##CID > IMEI > MAC > ANDROID_ID##\n生成deviceId规则为：\n按照以上先后顺序依次获取，判断取得的值的有效性，有效的场合返回，无效的场合获取下一个值；直到取到有效值，都无效的场合使用UUID随机生成。\n在尽可能获得设备唯一ID的基础上，将获得的ID保存在本地，下次直接从内存或外部存储中读取。这样尽量保证获取的设备id的唯一性。\n\nTip：保存到SD卡的设备ID可以保存为”.xxxx.txt”的形式，隐藏文件也能尽可能不会被用户误删。\n\n所以，所谓的方案只是提供了一种简单的思路，不是什么完美的解决方案。\n\n### 兼容性问题\n大家都知道在Android6.0系统上，新增了不少特性，与终端ID采集密切相关的就是权限控制这个特性，结论如下：\n\nIMEI，IMSI需用户手动授权方可采集。\n6.0里面READ_PHONE_STATE权限被归属成敏感权限，在运行时，如果应用程序获取TelephonyManager实例时，系统就会弹出是否允许应用拨打电话和管理通话的选择对话框，用户拒绝之后，就采集不到。\n针对6.0及以上的系统，ID的采集需要进行兼容，使用 checkPermission 接口从内存中直接获取权限数据，判断用户是否已经授权。\n\nMAC地址通过非系统接口可采集(6.0以下通过系统接口采集)，采集场景仅限于处于wifi连接状态。\n非系统接口，其实指的就是直接读取文件的方式，如下：\n\n```java\ncat /sys/class/net/wlan0/address \ncat /sys/devices/virtual/net/wlan0/address\n```\n\nAndroidID采集不受影响，但此ID不与硬件绑定，刷机，系统还原，升级等场景会发生变化，不稳定。\n\n> 说明：应用编译时选择的targetSdkVersion>=23，在6.0及以上的系统运行才会触发权限提示框，<23打出的apk包不受此影响。\n\n### 备注\n以上大部分内容引自腾讯质量开放平台,在此感谢。","slug":"android-deviceId-20170310","published":1,"updated":"2018-11-18T04:31:25.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjomh75ti0007zz3g764gsyve","content":"<h2 id=\"Android获取设备唯一标识\"><a href=\"#Android获取设备唯一标识\" class=\"headerlink\" title=\"Android获取设备唯一标识\"></a>Android获取设备唯一标识</h2><h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>对于移动端产品来说，能准确的识别、定位、跟踪一台设备是一件很重要的事，基于设备唯一性可以做的事有很多，比如设备锁、防作弊、安全防护等。但是在android和ios两大阵营上，都没有能标识设备唯一性的ID供开发者采集，所以就有了本篇文章，让我们来一起分析下android端可以用来标识唯一设备的属性、优缺点及解决方案。</p>\n<h3 id=\"备选设备ID\"><a href=\"#备选设备ID\" class=\"headerlink\" title=\"备选设备ID\"></a>备选设备ID</h3><h4 id=\"IMEI\"><a href=\"#IMEI\" class=\"headerlink\" title=\"IMEI\"></a>IMEI</h4><p>国际移动设备识别码（International Mobile Equipment Identity，IMEI），即通常所说的手机序列号、手机“串号”，用于在移动电话网络中识别每一部独立的手机等行动通讯装置，相当于移动电话的身份证。序列号共有15位数字，前6位（TAC）是型号核准号码，代表手机类型。接着2位（FAC）是最后装配号，代表产地。后6位（SNR）是串号，代表生产顺序号。最后1位（SP）一般为0，是检验码，备用。</p>\n<h5 id=\"获取方式\"><a href=\"#获取方式\" class=\"headerlink\" title=\"获取方式\"></a>获取方式</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TelephonyManager manager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);</span><br><span class=\"line\">String imei = manager.getDeviceId();</span><br></pre></td></tr></table></figure>\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li>可以被作弊软件修改。</li>\n<li>厂商定制系统中的Bug：少数手机设备上，由于该实现有漏洞，会返回垃圾。如000000000000000、11111111111111111.</li>\n<li>手机管家，360手机助手，和一些厂商ROM自带的权限管家，有阻止应用采集手机IMEI的功能</li>\n<li>山寨手机厂商为了节省成本，批量复制重复IMEI串烧进手机的EEPROM里面。</li>\n</ul>\n<h4 id=\"Mac-Address\"><a href=\"#Mac-Address\" class=\"headerlink\" title=\"Mac Address\"></a>Mac Address</h4><p>wifi无线网卡的MAC地址，与终端硬件关联，可用作设备的唯一标识。</p>\n<h5 id=\"获取方式-1\"><a href=\"#获取方式-1\" class=\"headerlink\" title=\"获取方式\"></a>获取方式</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WifiManager wifi = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);</span><br><span class=\"line\">WifiInfo info = wifi.getConnectionInfo();</span><br><span class=\"line\">String mac = info.getMacAddress();</span><br></pre></td></tr></table></figure>\n<h5 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题\"></a>问题</h5><p>可以被作弊软件修改。<br>Android6.0及以上的系统上，通过上面的系统接口采集到的MAC地址返回的是一个固定串：02:00:00:00:00:00</p>\n<h4 id=\"IMSI\"><a href=\"#IMSI\" class=\"headerlink\" title=\"IMSI\"></a>IMSI</h4><p>国际移动用户识别码（IMSI：International Mobile Subscriber Identification Number）是区别移动用户的标志，储存在SIM卡中，可用于区别移动用户的有效信息。其总长度不超过15位，同样使用0~9的数字。其中MCC是移动用户所属国家代号，占3位数字，中国的MCC规定为460；MNC是移动网号码，由两位或者三位数字组成，中国移动的移动网络编码（MNC）为00；用于识别移动用户所归属的移动通信网；MSIN是移动用户识别码，用以识别某一移动通信网中的移动用户。此ID是跟SIM卡绑定的，更换SIM卡就会发生变化，同样在仅支持wifi的pad设备上是没有的。</p>\n<h5 id=\"获取方式-2\"><a href=\"#获取方式-2\" class=\"headerlink\" title=\"获取方式\"></a>获取方式</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TelephonyManager manager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);</span><br><span class=\"line\">String imsi = manager.getSubscriberId();</span><br></pre></td></tr></table></figure>\n<p>#####问题<br>存在无SIM卡的终端设备获取不到的问题<br>最大的问题是会发生变化，与终端设备非强绑定。</p>\n<h4 id=\"Android-ID\"><a href=\"#Android-ID\" class=\"headerlink\" title=\"Android_ID\"></a>Android_ID</h4><p>Android_ID是设备首次启动时，系统生成的一个唯一串号，长16字节(例：70560687d711af97)，由com.android.providers.settings 这个系统程序所管理，Android6.0 以下储存在/data/data/com.android.providers.settings/databases/settings.db中的secure 表。</p>\n<h5 id=\"获取方式-3\"><a href=\"#获取方式-3\" class=\"headerlink\" title=\"获取方式\"></a>获取方式</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings.Secure.getString(context.getContentResolver(), <span class=\"string\">\"android_id\"</span>)</span><br></pre></td></tr></table></figure>\n<h5 id=\"问题-2\"><a href=\"#问题-2\" class=\"headerlink\" title=\"问题\"></a>问题</h5><p>此ID与硬件无关，与Android系统有关，所以当系统还原出厂设置，刷机时这个ID就会重新生成了。<br>由于国内的手机基本都是厂商定制的ROM，所以此ID的控制权均由厂商ROM层来控制，难免会发生一些bug，导致部分机型上的ID都相同。<br>另外在OTA ROM升级的时候，有些厂商会保留原有db信息不变，有些厂商会清除重新生成。<br>与系统强依赖，稳定性不足。</p>\n<h4 id=\"CID\"><a href=\"#CID\" class=\"headerlink\" title=\"CID\"></a>CID</h4><p>Card Identification Register(CID)，顾名思义，做为存储卡片的唯一识别信息，规范上要求每张卡片的ID都唯一。CID 寄存器有 16 字节长，如下表 所示，它包含了本卡的特别识别码（ID 号）。 这些信息是在卡的生产期间被编程（烧录），主控制器不 能修改它们的内容。 注意：SD卡的 CID 寄存器和 MMC 卡的 CID 寄存器在记录结构上是不同的。一般来讲MMC0 保存的是内置存储卡的信息，MMC1 保存的是扩展存储卡也就是SD卡的信息。因为SD卡跟终端设备又不是强关联的，会因为更换升级发生变化，那么我们主要看手机内置存储卡的CID。</p>\n<h5 id=\"获取方式-4\"><a href=\"#获取方式-4\" class=\"headerlink\" title=\"获取方式\"></a>获取方式</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell cat /sys/class/mmc_host/mmc*/mmc*:*/cid</span><br></pre></td></tr></table></figure>\n<p>#####问题<br>在部分山寨低端机器上，会出现采集不到和采集的是SD卡的CID。</p>\n<h3 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h3><p>通过以上对可能作为设备唯一ID的属性分析后可以看到，没有一个属性可以作为标识设备的唯一ID，我们可能抱着90%多的有效率，选择某一个属性作为设备的唯一标识，又不可避免android端复杂的系统、定制厂商、root等环境。所以这里给出的方案又不能称之为方案，只是尽可能的标识唯一设备。所以方案可能是这样的：</p>\n<p>按照以上分析的稳定性和可靠性分下先后顺序：</p>\n<p>##CID &gt; IMEI &gt; MAC &gt; ANDROID_ID##<br>生成deviceId规则为：<br>按照以上先后顺序依次获取，判断取得的值的有效性，有效的场合返回，无效的场合获取下一个值；直到取到有效值，都无效的场合使用UUID随机生成。<br>在尽可能获得设备唯一ID的基础上，将获得的ID保存在本地，下次直接从内存或外部存储中读取。这样尽量保证获取的设备id的唯一性。</p>\n<p>Tip：保存到SD卡的设备ID可以保存为”.xxxx.txt”的形式，隐藏文件也能尽可能不会被用户误删。</p>\n<p>所以，所谓的方案只是提供了一种简单的思路，不是什么完美的解决方案。</p>\n<h3 id=\"兼容性问题\"><a href=\"#兼容性问题\" class=\"headerlink\" title=\"兼容性问题\"></a>兼容性问题</h3><p>大家都知道在Android6.0系统上，新增了不少特性，与终端ID采集密切相关的就是权限控制这个特性，结论如下：</p>\n<p>IMEI，IMSI需用户手动授权方可采集。<br>6.0里面READ_PHONE_STATE权限被归属成敏感权限，在运行时，如果应用程序获取TelephonyManager实例时，系统就会弹出是否允许应用拨打电话和管理通话的选择对话框，用户拒绝之后，就采集不到。<br>针对6.0及以上的系统，ID的采集需要进行兼容，使用 checkPermission 接口从内存中直接获取权限数据，判断用户是否已经授权。</p>\n<p>MAC地址通过非系统接口可采集(6.0以下通过系统接口采集)，采集场景仅限于处于wifi连接状态。<br>非系统接口，其实指的就是直接读取文件的方式，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /sys/<span class=\"class\"><span class=\"keyword\">class</span>/<span class=\"title\">net</span>/<span class=\"title\">wlan0</span>/<span class=\"title\">address</span> </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">cat</span> /<span class=\"title\">sys</span>/<span class=\"title\">devices</span>/<span class=\"title\">virtual</span>/<span class=\"title\">net</span>/<span class=\"title\">wlan0</span>/<span class=\"title\">address</span></span></span><br></pre></td></tr></table></figure>\n<p>AndroidID采集不受影响，但此ID不与硬件绑定，刷机，系统还原，升级等场景会发生变化，不稳定。</p>\n<blockquote>\n<p>说明：应用编译时选择的targetSdkVersion&gt;=23，在6.0及以上的系统运行才会触发权限提示框，&lt;23打出的apk包不受此影响。</p>\n</blockquote>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>以上大部分内容引自腾讯质量开放平台,在此感谢。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Android获取设备唯一标识\"><a href=\"#Android获取设备唯一标识\" class=\"headerlink\" title=\"Android获取设备唯一标识\"></a>Android获取设备唯一标识</h2><h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>对于移动端产品来说，能准确的识别、定位、跟踪一台设备是一件很重要的事，基于设备唯一性可以做的事有很多，比如设备锁、防作弊、安全防护等。但是在android和ios两大阵营上，都没有能标识设备唯一性的ID供开发者采集，所以就有了本篇文章，让我们来一起分析下android端可以用来标识唯一设备的属性、优缺点及解决方案。</p>\n<h3 id=\"备选设备ID\"><a href=\"#备选设备ID\" class=\"headerlink\" title=\"备选设备ID\"></a>备选设备ID</h3><h4 id=\"IMEI\"><a href=\"#IMEI\" class=\"headerlink\" title=\"IMEI\"></a>IMEI</h4><p>国际移动设备识别码（International Mobile Equipment Identity，IMEI），即通常所说的手机序列号、手机“串号”，用于在移动电话网络中识别每一部独立的手机等行动通讯装置，相当于移动电话的身份证。序列号共有15位数字，前6位（TAC）是型号核准号码，代表手机类型。接着2位（FAC）是最后装配号，代表产地。后6位（SNR）是串号，代表生产顺序号。最后1位（SP）一般为0，是检验码，备用。</p>\n<h5 id=\"获取方式\"><a href=\"#获取方式\" class=\"headerlink\" title=\"获取方式\"></a>获取方式</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TelephonyManager manager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);</span><br><span class=\"line\">String imei = manager.getDeviceId();</span><br></pre></td></tr></table></figure>\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li>可以被作弊软件修改。</li>\n<li>厂商定制系统中的Bug：少数手机设备上，由于该实现有漏洞，会返回垃圾。如000000000000000、11111111111111111.</li>\n<li>手机管家，360手机助手，和一些厂商ROM自带的权限管家，有阻止应用采集手机IMEI的功能</li>\n<li>山寨手机厂商为了节省成本，批量复制重复IMEI串烧进手机的EEPROM里面。</li>\n</ul>\n<h4 id=\"Mac-Address\"><a href=\"#Mac-Address\" class=\"headerlink\" title=\"Mac Address\"></a>Mac Address</h4><p>wifi无线网卡的MAC地址，与终端硬件关联，可用作设备的唯一标识。</p>\n<h5 id=\"获取方式-1\"><a href=\"#获取方式-1\" class=\"headerlink\" title=\"获取方式\"></a>获取方式</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WifiManager wifi = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);</span><br><span class=\"line\">WifiInfo info = wifi.getConnectionInfo();</span><br><span class=\"line\">String mac = info.getMacAddress();</span><br></pre></td></tr></table></figure>\n<h5 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题\"></a>问题</h5><p>可以被作弊软件修改。<br>Android6.0及以上的系统上，通过上面的系统接口采集到的MAC地址返回的是一个固定串：02:00:00:00:00:00</p>\n<h4 id=\"IMSI\"><a href=\"#IMSI\" class=\"headerlink\" title=\"IMSI\"></a>IMSI</h4><p>国际移动用户识别码（IMSI：International Mobile Subscriber Identification Number）是区别移动用户的标志，储存在SIM卡中，可用于区别移动用户的有效信息。其总长度不超过15位，同样使用0~9的数字。其中MCC是移动用户所属国家代号，占3位数字，中国的MCC规定为460；MNC是移动网号码，由两位或者三位数字组成，中国移动的移动网络编码（MNC）为00；用于识别移动用户所归属的移动通信网；MSIN是移动用户识别码，用以识别某一移动通信网中的移动用户。此ID是跟SIM卡绑定的，更换SIM卡就会发生变化，同样在仅支持wifi的pad设备上是没有的。</p>\n<h5 id=\"获取方式-2\"><a href=\"#获取方式-2\" class=\"headerlink\" title=\"获取方式\"></a>获取方式</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TelephonyManager manager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);</span><br><span class=\"line\">String imsi = manager.getSubscriberId();</span><br></pre></td></tr></table></figure>\n<p>#####问题<br>存在无SIM卡的终端设备获取不到的问题<br>最大的问题是会发生变化，与终端设备非强绑定。</p>\n<h4 id=\"Android-ID\"><a href=\"#Android-ID\" class=\"headerlink\" title=\"Android_ID\"></a>Android_ID</h4><p>Android_ID是设备首次启动时，系统生成的一个唯一串号，长16字节(例：70560687d711af97)，由com.android.providers.settings 这个系统程序所管理，Android6.0 以下储存在/data/data/com.android.providers.settings/databases/settings.db中的secure 表。</p>\n<h5 id=\"获取方式-3\"><a href=\"#获取方式-3\" class=\"headerlink\" title=\"获取方式\"></a>获取方式</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings.Secure.getString(context.getContentResolver(), <span class=\"string\">\"android_id\"</span>)</span><br></pre></td></tr></table></figure>\n<h5 id=\"问题-2\"><a href=\"#问题-2\" class=\"headerlink\" title=\"问题\"></a>问题</h5><p>此ID与硬件无关，与Android系统有关，所以当系统还原出厂设置，刷机时这个ID就会重新生成了。<br>由于国内的手机基本都是厂商定制的ROM，所以此ID的控制权均由厂商ROM层来控制，难免会发生一些bug，导致部分机型上的ID都相同。<br>另外在OTA ROM升级的时候，有些厂商会保留原有db信息不变，有些厂商会清除重新生成。<br>与系统强依赖，稳定性不足。</p>\n<h4 id=\"CID\"><a href=\"#CID\" class=\"headerlink\" title=\"CID\"></a>CID</h4><p>Card Identification Register(CID)，顾名思义，做为存储卡片的唯一识别信息，规范上要求每张卡片的ID都唯一。CID 寄存器有 16 字节长，如下表 所示，它包含了本卡的特别识别码（ID 号）。 这些信息是在卡的生产期间被编程（烧录），主控制器不 能修改它们的内容。 注意：SD卡的 CID 寄存器和 MMC 卡的 CID 寄存器在记录结构上是不同的。一般来讲MMC0 保存的是内置存储卡的信息，MMC1 保存的是扩展存储卡也就是SD卡的信息。因为SD卡跟终端设备又不是强关联的，会因为更换升级发生变化，那么我们主要看手机内置存储卡的CID。</p>\n<h5 id=\"获取方式-4\"><a href=\"#获取方式-4\" class=\"headerlink\" title=\"获取方式\"></a>获取方式</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell cat /sys/class/mmc_host/mmc*/mmc*:*/cid</span><br></pre></td></tr></table></figure>\n<p>#####问题<br>在部分山寨低端机器上，会出现采集不到和采集的是SD卡的CID。</p>\n<h3 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h3><p>通过以上对可能作为设备唯一ID的属性分析后可以看到，没有一个属性可以作为标识设备的唯一ID，我们可能抱着90%多的有效率，选择某一个属性作为设备的唯一标识，又不可避免android端复杂的系统、定制厂商、root等环境。所以这里给出的方案又不能称之为方案，只是尽可能的标识唯一设备。所以方案可能是这样的：</p>\n<p>按照以上分析的稳定性和可靠性分下先后顺序：</p>\n<p>##CID &gt; IMEI &gt; MAC &gt; ANDROID_ID##<br>生成deviceId规则为：<br>按照以上先后顺序依次获取，判断取得的值的有效性，有效的场合返回，无效的场合获取下一个值；直到取到有效值，都无效的场合使用UUID随机生成。<br>在尽可能获得设备唯一ID的基础上，将获得的ID保存在本地，下次直接从内存或外部存储中读取。这样尽量保证获取的设备id的唯一性。</p>\n<p>Tip：保存到SD卡的设备ID可以保存为”.xxxx.txt”的形式，隐藏文件也能尽可能不会被用户误删。</p>\n<p>所以，所谓的方案只是提供了一种简单的思路，不是什么完美的解决方案。</p>\n<h3 id=\"兼容性问题\"><a href=\"#兼容性问题\" class=\"headerlink\" title=\"兼容性问题\"></a>兼容性问题</h3><p>大家都知道在Android6.0系统上，新增了不少特性，与终端ID采集密切相关的就是权限控制这个特性，结论如下：</p>\n<p>IMEI，IMSI需用户手动授权方可采集。<br>6.0里面READ_PHONE_STATE权限被归属成敏感权限，在运行时，如果应用程序获取TelephonyManager实例时，系统就会弹出是否允许应用拨打电话和管理通话的选择对话框，用户拒绝之后，就采集不到。<br>针对6.0及以上的系统，ID的采集需要进行兼容，使用 checkPermission 接口从内存中直接获取权限数据，判断用户是否已经授权。</p>\n<p>MAC地址通过非系统接口可采集(6.0以下通过系统接口采集)，采集场景仅限于处于wifi连接状态。<br>非系统接口，其实指的就是直接读取文件的方式，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /sys/<span class=\"class\"><span class=\"keyword\">class</span>/<span class=\"title\">net</span>/<span class=\"title\">wlan0</span>/<span class=\"title\">address</span> </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">cat</span> /<span class=\"title\">sys</span>/<span class=\"title\">devices</span>/<span class=\"title\">virtual</span>/<span class=\"title\">net</span>/<span class=\"title\">wlan0</span>/<span class=\"title\">address</span></span></span><br></pre></td></tr></table></figure>\n<p>AndroidID采集不受影响，但此ID不与硬件绑定，刷机，系统还原，升级等场景会发生变化，不稳定。</p>\n<blockquote>\n<p>说明：应用编译时选择的targetSdkVersion&gt;=23，在6.0及以上的系统运行才会触发权限提示框，&lt;23打出的apk包不受此影响。</p>\n</blockquote>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>以上大部分内容引自腾讯质量开放平台,在此感谢。</p>\n"},{"title":"前端脱离后台的敏捷开发","date":"2018-11-17T16:51:21.000Z","_content":"\n### 需求\n\n开发一个项目时一般都会有前台、后台。前台负责展示数据、用户交互；后台负责数据的处理和存储。\n\n\n#### 前提\n\n+ ✦开发阶段，前台和后台按照接口文档进行开发，这套接口规范相当于前台和后台之间交互的协议。\n+ ✦一般来说前台和后台的开发进度都会有偏差。\n\n#### 问题\n\n1. ✦在开发阶段，前端的展示和交互需要依赖后台的数据；而后台的开发不需要前端配合，因为后台可以自己写请求做测试。\n2. ✦要提高效率，就需要在开发阶段结束，联调阶段开始之前，尽可能的提高代码完成度和代码准确性。\n\n所以，就引出了以下需求：前端脱离后台的独立开发。\n> 这里的独立开发不是单纯的脱离后台的开发，而是可以保证代码完成度和代码准确性前提下的，脱离后台的开发。\n\n### 目的\n\n前端独立开发所要达到的目的就是：\n\n+ ✦ 在连调阶段之前，完成绝大部分的编码工作，工作量尽可能往前拉\n+ ✦ 与后台平行工作，互不干扰，提高了工作效率。\n+ ✦ 保证编码的准确性。\n\n#最理想的情况是，在连调阶段连调一个接口，我不用修改一行代码，或者只需要切换一下环境就完成了一个接口的连调，包括接口周边逻辑的测试。#\n\n### 解决方法\n\n+ ✦ 前端使用写死的假数据\n+ ✦ 使用挡板（打转工具）\n\n#### 使用挡板\n+ ✦ 自己开发挡板\n+ ✦ Mock.js\n+ ✦ Moco\n\n##### 自己开发挡板\n\n1. 自己写一套服务，部署在服务器上。\n2. 通过Web服务录入数据到mongoDB。\n3. 提供给前端的接口，并且接口数据直接从mongoDB读取返回。\n\n优点：自己开发的挡板比较放心？\n缺点：开发挡板需要花时间。\n\n#### Mock.js\n实例教程\n生成随机数据，拦截Ajax请求，使用如下：\n\n```java\n// 使用 Mock\nvar Mock = require('mockjs')\nvar data = Mock.mock({\n    // 属性 list 的值是一个数组，其中含有 1 到 10 个元素\n    'list|1-10': [{\n        // 属性 id 是一个自增数，起始值为 1，每次增 1\n        'id|+1': 1\n    }]\n})\n// 输出结果\nconsole.log(JSON.stringify(data, null, 4))\n```\n\n1. 配置模拟数据：\n\n```java\nMock.mock('http://g.cn', {\n    'name'     : '[@name](/user/name)()',\n    'age|1-100': 100,\n    'color'    : '[@color](/user/color)'\n});\n```\n2. 发送ajax请求(jquery版)\n\n```java\n$.ajax({\n    url: 'http://g.cn',\n}).done(function(data, status, xhr){\n    console.log(\n        JSON.stringify(data, null, 4)\n    )    \n})\n```\n\n3. 查看响应的结果\n\n```java\n// 结果1\n{\n    \"name\": \"Elizabeth Hall\",\n    \"age\": 91,\n    \"color\": \"#0e64ea\"\n}\n// 结果2\n{\n    \"name\": \"Michael Taylor\",\n    \"age\": 61,\n    \"color\": \"#081086\"\n}\n// 结果N ..\n```\n\n优点：随机数据\n缺点：有学习成本，前端。\n\n#### Moco\n写一个接口的配置文件:\n\n```java\n[\n  {\n    \"response\" :\n      {\n        \"text\" : \"Hello, Moco\"\n      }\n  }\n]\n```\n将配置文件和jar包放到服务器上，执行以下命令：\n\n\n```java\njava -jar moco-runner-<version>-standalone.jar http -p 12306 -c foo.json\n```\n\n优点：简单易用，工作量极小，适用范围广。\n缺点：不能随机数据。\n\n### 辅助工具\n\n#### postman–接口测试工具\n\n参照通过postman提升接口测试效率\n\n#### Transmit–FTP工具\n\n官网传送\n破解版传送\n\n\n","source":"_posts/前端脱离后台的敏捷开发.md","raw":"---\ntitle: 前端脱离后台的敏捷开发\ndate: 2018-11-18 00:51:21\ntags: 前端\n---\n\n### 需求\n\n开发一个项目时一般都会有前台、后台。前台负责展示数据、用户交互；后台负责数据的处理和存储。\n\n\n#### 前提\n\n+ ✦开发阶段，前台和后台按照接口文档进行开发，这套接口规范相当于前台和后台之间交互的协议。\n+ ✦一般来说前台和后台的开发进度都会有偏差。\n\n#### 问题\n\n1. ✦在开发阶段，前端的展示和交互需要依赖后台的数据；而后台的开发不需要前端配合，因为后台可以自己写请求做测试。\n2. ✦要提高效率，就需要在开发阶段结束，联调阶段开始之前，尽可能的提高代码完成度和代码准确性。\n\n所以，就引出了以下需求：前端脱离后台的独立开发。\n> 这里的独立开发不是单纯的脱离后台的开发，而是可以保证代码完成度和代码准确性前提下的，脱离后台的开发。\n\n### 目的\n\n前端独立开发所要达到的目的就是：\n\n+ ✦ 在连调阶段之前，完成绝大部分的编码工作，工作量尽可能往前拉\n+ ✦ 与后台平行工作，互不干扰，提高了工作效率。\n+ ✦ 保证编码的准确性。\n\n#最理想的情况是，在连调阶段连调一个接口，我不用修改一行代码，或者只需要切换一下环境就完成了一个接口的连调，包括接口周边逻辑的测试。#\n\n### 解决方法\n\n+ ✦ 前端使用写死的假数据\n+ ✦ 使用挡板（打转工具）\n\n#### 使用挡板\n+ ✦ 自己开发挡板\n+ ✦ Mock.js\n+ ✦ Moco\n\n##### 自己开发挡板\n\n1. 自己写一套服务，部署在服务器上。\n2. 通过Web服务录入数据到mongoDB。\n3. 提供给前端的接口，并且接口数据直接从mongoDB读取返回。\n\n优点：自己开发的挡板比较放心？\n缺点：开发挡板需要花时间。\n\n#### Mock.js\n实例教程\n生成随机数据，拦截Ajax请求，使用如下：\n\n```java\n// 使用 Mock\nvar Mock = require('mockjs')\nvar data = Mock.mock({\n    // 属性 list 的值是一个数组，其中含有 1 到 10 个元素\n    'list|1-10': [{\n        // 属性 id 是一个自增数，起始值为 1，每次增 1\n        'id|+1': 1\n    }]\n})\n// 输出结果\nconsole.log(JSON.stringify(data, null, 4))\n```\n\n1. 配置模拟数据：\n\n```java\nMock.mock('http://g.cn', {\n    'name'     : '[@name](/user/name)()',\n    'age|1-100': 100,\n    'color'    : '[@color](/user/color)'\n});\n```\n2. 发送ajax请求(jquery版)\n\n```java\n$.ajax({\n    url: 'http://g.cn',\n}).done(function(data, status, xhr){\n    console.log(\n        JSON.stringify(data, null, 4)\n    )    \n})\n```\n\n3. 查看响应的结果\n\n```java\n// 结果1\n{\n    \"name\": \"Elizabeth Hall\",\n    \"age\": 91,\n    \"color\": \"#0e64ea\"\n}\n// 结果2\n{\n    \"name\": \"Michael Taylor\",\n    \"age\": 61,\n    \"color\": \"#081086\"\n}\n// 结果N ..\n```\n\n优点：随机数据\n缺点：有学习成本，前端。\n\n#### Moco\n写一个接口的配置文件:\n\n```java\n[\n  {\n    \"response\" :\n      {\n        \"text\" : \"Hello, Moco\"\n      }\n  }\n]\n```\n将配置文件和jar包放到服务器上，执行以下命令：\n\n\n```java\njava -jar moco-runner-<version>-standalone.jar http -p 12306 -c foo.json\n```\n\n优点：简单易用，工作量极小，适用范围广。\n缺点：不能随机数据。\n\n### 辅助工具\n\n#### postman–接口测试工具\n\n参照通过postman提升接口测试效率\n\n#### Transmit–FTP工具\n\n官网传送\n破解版传送\n\n\n","slug":"前端脱离后台的敏捷开发","published":1,"updated":"2018-11-18T04:31:25.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjomh75tk0008zz3g9i02q2na","content":"<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>开发一个项目时一般都会有前台、后台。前台负责展示数据、用户交互；后台负责数据的处理和存储。</p>\n<h4 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h4><ul>\n<li>✦开发阶段，前台和后台按照接口文档进行开发，这套接口规范相当于前台和后台之间交互的协议。</li>\n<li>✦一般来说前台和后台的开发进度都会有偏差。</li>\n</ul>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><ol>\n<li>✦在开发阶段，前端的展示和交互需要依赖后台的数据；而后台的开发不需要前端配合，因为后台可以自己写请求做测试。</li>\n<li>✦要提高效率，就需要在开发阶段结束，联调阶段开始之前，尽可能的提高代码完成度和代码准确性。</li>\n</ol>\n<p>所以，就引出了以下需求：前端脱离后台的独立开发。</p>\n<blockquote>\n<p>这里的独立开发不是单纯的脱离后台的开发，而是可以保证代码完成度和代码准确性前提下的，脱离后台的开发。</p>\n</blockquote>\n<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p>前端独立开发所要达到的目的就是：</p>\n<ul>\n<li>✦ 在连调阶段之前，完成绝大部分的编码工作，工作量尽可能往前拉</li>\n<li>✦ 与后台平行工作，互不干扰，提高了工作效率。</li>\n<li>✦ 保证编码的准确性。</li>\n</ul>\n<p>#最理想的情况是，在连调阶段连调一个接口，我不用修改一行代码，或者只需要切换一下环境就完成了一个接口的连调，包括接口周边逻辑的测试。#</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ul>\n<li>✦ 前端使用写死的假数据</li>\n<li>✦ 使用挡板（打转工具）</li>\n</ul>\n<h4 id=\"使用挡板\"><a href=\"#使用挡板\" class=\"headerlink\" title=\"使用挡板\"></a>使用挡板</h4><ul>\n<li>✦ 自己开发挡板</li>\n<li>✦ Mock.js</li>\n<li>✦ Moco</li>\n</ul>\n<h5 id=\"自己开发挡板\"><a href=\"#自己开发挡板\" class=\"headerlink\" title=\"自己开发挡板\"></a>自己开发挡板</h5><ol>\n<li>自己写一套服务，部署在服务器上。</li>\n<li>通过Web服务录入数据到mongoDB。</li>\n<li>提供给前端的接口，并且接口数据直接从mongoDB读取返回。</li>\n</ol>\n<p>优点：自己开发的挡板比较放心？<br>缺点：开发挡板需要花时间。</p>\n<h4 id=\"Mock-js\"><a href=\"#Mock-js\" class=\"headerlink\" title=\"Mock.js\"></a>Mock.js</h4><p>实例教程<br>生成随机数据，拦截Ajax请求，使用如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 Mock</span></span><br><span class=\"line\">var Mock = require(<span class=\"string\">'mockjs'</span>)</span><br><span class=\"line\">var data = Mock.mock(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性 list 的值是一个数组，其中含有 1 到 10 个元素</span></span><br><span class=\"line\">    <span class=\"string\">'list|1-10'</span>: [&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 属性 id 是一个自增数，起始值为 1，每次增 1</span></span><br><span class=\"line\">        <span class=\"string\">'id|+1'</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 输出结果</span></span><br><span class=\"line\">console.log(JSON.stringify(data, <span class=\"keyword\">null</span>, <span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure>\n<ol>\n<li>配置模拟数据：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mock.mock(<span class=\"string\">'http://g.cn'</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">'name'</span>     : <span class=\"string\">'[@name](/user/name)()'</span>,</span><br><span class=\"line\">    <span class=\"string\">'age|1-100'</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">    <span class=\"string\">'color'</span>    : <span class=\"string\">'[@color](/user/color)'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>发送ajax请求(jquery版)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url: <span class=\"string\">'http://g.cn'</span>,</span><br><span class=\"line\">&#125;).done(function(data, status, xhr)&#123;</span><br><span class=\"line\">    console.log(</span><br><span class=\"line\">        JSON.stringify(data, <span class=\"keyword\">null</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    )    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>查看响应的结果</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 结果1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Elizabeth Hall\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"age\"</span>: <span class=\"number\">91</span>,</span><br><span class=\"line\">    <span class=\"string\">\"color\"</span>: <span class=\"string\">\"#0e64ea\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Michael Taylor\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"age\"</span>: <span class=\"number\">61</span>,</span><br><span class=\"line\">    <span class=\"string\">\"color\"</span>: <span class=\"string\">\"#081086\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果N ..</span></span><br></pre></td></tr></table></figure>\n<p>优点：随机数据<br>缺点：有学习成本，前端。</p>\n<h4 id=\"Moco\"><a href=\"#Moco\" class=\"headerlink\" title=\"Moco\"></a>Moco</h4><p>写一个接口的配置文件:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"response\"</span> :</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span> : <span class=\"string\">\"Hello, Moco\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>将配置文件和jar包放到服务器上，执行以下命令：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar moco-runner-&lt;version&gt;-standalone.jar http -p <span class=\"number\">12306</span> -c foo.json</span><br></pre></td></tr></table></figure>\n<p>优点：简单易用，工作量极小，适用范围广。<br>缺点：不能随机数据。</p>\n<h3 id=\"辅助工具\"><a href=\"#辅助工具\" class=\"headerlink\" title=\"辅助工具\"></a>辅助工具</h3><h4 id=\"postman–接口测试工具\"><a href=\"#postman–接口测试工具\" class=\"headerlink\" title=\"postman–接口测试工具\"></a>postman–接口测试工具</h4><p>参照通过postman提升接口测试效率</p>\n<h4 id=\"Transmit–FTP工具\"><a href=\"#Transmit–FTP工具\" class=\"headerlink\" title=\"Transmit–FTP工具\"></a>Transmit–FTP工具</h4><p>官网传送<br>破解版传送</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>开发一个项目时一般都会有前台、后台。前台负责展示数据、用户交互；后台负责数据的处理和存储。</p>\n<h4 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h4><ul>\n<li>✦开发阶段，前台和后台按照接口文档进行开发，这套接口规范相当于前台和后台之间交互的协议。</li>\n<li>✦一般来说前台和后台的开发进度都会有偏差。</li>\n</ul>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><ol>\n<li>✦在开发阶段，前端的展示和交互需要依赖后台的数据；而后台的开发不需要前端配合，因为后台可以自己写请求做测试。</li>\n<li>✦要提高效率，就需要在开发阶段结束，联调阶段开始之前，尽可能的提高代码完成度和代码准确性。</li>\n</ol>\n<p>所以，就引出了以下需求：前端脱离后台的独立开发。</p>\n<blockquote>\n<p>这里的独立开发不是单纯的脱离后台的开发，而是可以保证代码完成度和代码准确性前提下的，脱离后台的开发。</p>\n</blockquote>\n<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p>前端独立开发所要达到的目的就是：</p>\n<ul>\n<li>✦ 在连调阶段之前，完成绝大部分的编码工作，工作量尽可能往前拉</li>\n<li>✦ 与后台平行工作，互不干扰，提高了工作效率。</li>\n<li>✦ 保证编码的准确性。</li>\n</ul>\n<p>#最理想的情况是，在连调阶段连调一个接口，我不用修改一行代码，或者只需要切换一下环境就完成了一个接口的连调，包括接口周边逻辑的测试。#</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ul>\n<li>✦ 前端使用写死的假数据</li>\n<li>✦ 使用挡板（打转工具）</li>\n</ul>\n<h4 id=\"使用挡板\"><a href=\"#使用挡板\" class=\"headerlink\" title=\"使用挡板\"></a>使用挡板</h4><ul>\n<li>✦ 自己开发挡板</li>\n<li>✦ Mock.js</li>\n<li>✦ Moco</li>\n</ul>\n<h5 id=\"自己开发挡板\"><a href=\"#自己开发挡板\" class=\"headerlink\" title=\"自己开发挡板\"></a>自己开发挡板</h5><ol>\n<li>自己写一套服务，部署在服务器上。</li>\n<li>通过Web服务录入数据到mongoDB。</li>\n<li>提供给前端的接口，并且接口数据直接从mongoDB读取返回。</li>\n</ol>\n<p>优点：自己开发的挡板比较放心？<br>缺点：开发挡板需要花时间。</p>\n<h4 id=\"Mock-js\"><a href=\"#Mock-js\" class=\"headerlink\" title=\"Mock.js\"></a>Mock.js</h4><p>实例教程<br>生成随机数据，拦截Ajax请求，使用如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 Mock</span></span><br><span class=\"line\">var Mock = require(<span class=\"string\">'mockjs'</span>)</span><br><span class=\"line\">var data = Mock.mock(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性 list 的值是一个数组，其中含有 1 到 10 个元素</span></span><br><span class=\"line\">    <span class=\"string\">'list|1-10'</span>: [&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 属性 id 是一个自增数，起始值为 1，每次增 1</span></span><br><span class=\"line\">        <span class=\"string\">'id|+1'</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 输出结果</span></span><br><span class=\"line\">console.log(JSON.stringify(data, <span class=\"keyword\">null</span>, <span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure>\n<ol>\n<li>配置模拟数据：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mock.mock(<span class=\"string\">'http://g.cn'</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">'name'</span>     : <span class=\"string\">'[@name](/user/name)()'</span>,</span><br><span class=\"line\">    <span class=\"string\">'age|1-100'</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">    <span class=\"string\">'color'</span>    : <span class=\"string\">'[@color](/user/color)'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>发送ajax请求(jquery版)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url: <span class=\"string\">'http://g.cn'</span>,</span><br><span class=\"line\">&#125;).done(function(data, status, xhr)&#123;</span><br><span class=\"line\">    console.log(</span><br><span class=\"line\">        JSON.stringify(data, <span class=\"keyword\">null</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    )    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>查看响应的结果</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 结果1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Elizabeth Hall\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"age\"</span>: <span class=\"number\">91</span>,</span><br><span class=\"line\">    <span class=\"string\">\"color\"</span>: <span class=\"string\">\"#0e64ea\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Michael Taylor\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"age\"</span>: <span class=\"number\">61</span>,</span><br><span class=\"line\">    <span class=\"string\">\"color\"</span>: <span class=\"string\">\"#081086\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果N ..</span></span><br></pre></td></tr></table></figure>\n<p>优点：随机数据<br>缺点：有学习成本，前端。</p>\n<h4 id=\"Moco\"><a href=\"#Moco\" class=\"headerlink\" title=\"Moco\"></a>Moco</h4><p>写一个接口的配置文件:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"response\"</span> :</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span> : <span class=\"string\">\"Hello, Moco\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>将配置文件和jar包放到服务器上，执行以下命令：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar moco-runner-&lt;version&gt;-standalone.jar http -p <span class=\"number\">12306</span> -c foo.json</span><br></pre></td></tr></table></figure>\n<p>优点：简单易用，工作量极小，适用范围广。<br>缺点：不能随机数据。</p>\n<h3 id=\"辅助工具\"><a href=\"#辅助工具\" class=\"headerlink\" title=\"辅助工具\"></a>辅助工具</h3><h4 id=\"postman–接口测试工具\"><a href=\"#postman–接口测试工具\" class=\"headerlink\" title=\"postman–接口测试工具\"></a>postman–接口测试工具</h4><p>参照通过postman提升接口测试效率</p>\n<h4 id=\"Transmit–FTP工具\"><a href=\"#Transmit–FTP工具\" class=\"headerlink\" title=\"Transmit–FTP工具\"></a>Transmit–FTP工具</h4><p>官网传送<br>破解版传送</p>\n"},{"title":"微信小程序项目开发总结","date":"2017-06-15T16:20:18.000Z","_content":"\n### 一、基础知识\n\n小程序相关的项目构建，语法，设计等全部内容都在微信小程序的官方文档有详细的描述，所以基础知识很容易掌握，这里给出开发过程中需要一直翻看的官方文档地址;小程序的页面也有自己的一套设计规范，如果对产品没有特殊的要求，可以按照微信官方的设计规范进行UI设计，或则对产品的设计起到一个参考的作用。有必要一直翻看的还有WeUI：\n\n+ 代码地址：GitHub\n+ 设计规范：GitHub\n\n因为小程序本身是微信的一部分，所以设计和使用上多少要和微信保持同步。有了这三个文档，基本就可以将小程序从无到有的搭建起来了，也得益于微信给力的官方文档，很细致。\n\n### 二、项目框架选型\n\n#### 微信web开发者工具\n\n使用微信自己的开发者工具,开发、调试、测试，提交都可以做，但是编码体验很不好，一般的做法是使用webstorm编码，微信web开发者工具只起到编译看效果，调试的作用。能大大提高编码效率。\nwebstorm引入微信小程序API live template :\n\n1. File -> import settings引入wecharCode.jar\n2. 重启后，在编码时使用wx.就会有代码提示\n\n#### 使用gulp进行编译构建\n\n由于微信小程序本身对工程化几乎没有任何的支持，所以动手搭建一份：wxapp-redux-starter。\n使用gulp进行编译构建，主要功能包括：\n\n+ ✦ 集成了Redux，数据管理更方便\n+ ✦ 开发过程中，使用xml取代wxml，对开发工具更友好\n+ ✦ 开发过程中，使用less取代wxss，功能更强大\n+ ✦ 引入es-promise，以便可以创建并使用Promise\n+ ✦ 添加promisify工具函数，可以便捷的将官方Api转换成Pormise模式\n+ ✦ 引入normalizr，可以将数据扁平化，更方便进行数据管理\n+ ✦ 引入babel自动进行ES2015特性转换\n+ ✦ 对wxml/wxss/js/img压缩，相对开发者工具提供的压缩，会减小一丢丢体积。\n\n具体参考这篇文章\n\n### 三、Tips\n\n+ Webstorm 静态检查为警告的部分，要尽量修正，规避掉一些不必要的bug。\n+ 规范小程序的目录结构：\n```java\n+—-project\n+——–common（公共代码）\n+——–http（网络请求）\n+——–icons（存放小图标）\n+——–model（模块工具）\n+——–pages（页面）\n+——–templates（模版）\n+——–utils（工具）\n+——–work（文档等）\n+——–app.js、app.json、app.wxss\n```\n+ javascript语言虽然语句末尾可以不用’;’,但是为了规范都要加上’;’.\n+ 根据小程序设计规范将各部分的标准样式整理到app.wxss里全应用统一使用。具体参照app.wxss\n+ js文件的编码顺序建议如下：\n    1. data: {}\n    2. 生命周期方法\n    3. 页面点击响应方法\n    4. 私有方法（前面加下划线）\n+ 网络返回的数据建议写法如下：\n```java\n//建议写法，因为数据结构可以一眼看出来\nlet data = response[\"data\"];\nlet username = data[\"username\"];\n            \n//不建议写法，不容易看出数据的结构，不容易找错\nlet data = response.data;\nlet username = data.username;\n使用ES6特性–箭头表达式\n\n\n// ES5\n   var net = require('../public/net');\n   Page({\n       data: {\n           list: []\n       },\n       onShow: function () {\n           var self = this;//ES5写法，要在这赋值\n           net.get('/Index/getList', function (res) {\n               res = res || {};\n               var status = res.status,\n                   data = res.data,\n                   list = data.list;\n               if(status == 2) {\n                   self.setData({list: list});//在这用，很容易忘了\n               }\n           });\n       }\n   });\n   // ES6\n   import * as net from '../public/net';\n   Page({\n       data: {\n           list: []\n       },\n       onShow: function () {\n           net.get('/Index/getList', (res = {}) => {\n               let {status, data: {list}} = res;\n               if (status == 2) {\n                   // 此处 this 的指向与 onShow 内一致，无需增加 self 变量\n                   this.setData({list});\n               }\n           });\n       }\n   });\n使用ES6特性–数组筛选\n\n// js\nvar helpers = {\n    // 判断是否有时间参数\n    hasTime: (i) => {\n        return !isNaN(parseInt(i.stamp));\n    },\n    // 时间转换处理\n    parseTime: (i) => {\n        i.time = new Date(i.stamp + '000');\n        return i;\n    }\n};\nnet.get('/Index/getList', (res = {}) => {\n    let {status, data: {list}} = res;\n    this.set({\n        list: list.filter(helpers.hasTime)  // 筛选掉没有时间戳字段的数据\n                  .map(helpers.parseTime)   // 将时间戳字段转化为 JS 的 Date 对象\n    });\n   });\n\n```\n\n### 四、其他\n\n#### 使用开发工具的正确姿势\n\n微信提供的开发工具的编辑功能实在是太难用,用它写代码简直就是在浪费生命.它的正确用法##作为运行和调试工具.##\n\n那么适合作为编辑工具的是: ##webStorm##.\n\n基于IntelJ内核,开启Dracula主题,跟Android studio的使用习惯非常接近,so cool!各种方法提示,自动保存,快速查找…应有尽有.闭源的微信开发工具就不要用来写代码了,珍惜生命.\nwebStorm要识别wxml和wxss,还需要配置一下文件类型:\n\nPreferences -> File Types -> HTML : 添加*.wxml\nPreferences -> File Types -> CasCading Style Sheet : 添加*.wxss\n\n开发时，使用webstorm写代码，web开发者工具调试、运行，效率会高很多。\n\n#### 网络请求的封装\n微信提供了网络请求的API，但是真实项目中使用时，还是需要封装一下的。\n```java\nwx.request({\n  url: 'test.php', //仅为示例，并非真实的接口地址\n  data: {\n     x: '' ,\n     y: ''\n  },\n  header: {\n      'content-type': 'application/json'\n  },\n  success: function(res) {\n    console.log(res.data)\n  }\n})\n```\n#### 封装微信网络框架\n1. 定义好携带构建请求的对象\n```java\nfunction requestConfig() {\n    //url\n    this.url = '';\n    //请求头\n    this.header = {\n        'Content-Type': 'application/json',\n    };\n    //请求参数\n    this.params = {};\n    //是否显示等待对话框\n    this.loading = true;\n    this.netMethod = 'POST';\n    //通信加解密数据\n    this.safeSdk = {};\n    this.callback = {\n        httpCallPreFilter: () => {\n            //网络请求前处理\n        },\n        httpCallBackPreFilter: (response) => {\n            //网络请求返回前处理\n        },\n        doHttpSucess: (response) => {\n            //网络请求成功--公共处理\n        },\n        doHttpFailure: (response) => {\n            //网络请求失败--公共处理\n        },\n        doComplete: () => {\n            //网络请求结束--公共处理\n        }\n    };\n    this.setMethodGet = function () {\n        this.netMethod = 'GET';\n        return this;\n    };\n    this.send = function () {\n        _request(this);\n    };\n    this.upload = function (filePath) {\n        _upload(this, filePath);\n    }\n}\n```\n\n#### 构建requestConfig\n```java\n/**\n * 注意,此方法调用后还要调用.send()才是发送出去.\n * @param Interfaces\n * @param protocol\n * @param params\n * @param callback  拷贝上方注释区的代码使用\n * @param loading\n * @returns {requestConfig}\n */\nfunction buildRequest(url, params, callback, loading) {\n    let config = new requestConfig();\n    config.loading = typeof loading === 'undefined' ? true : loading;\n    let baseUrl = \"\";\n    baseUrl = constants.url;\n    config.url = baseUrl + url;\n    config.params = params;\n    if (_isFunction(callback.httpCallPreFilter)) {\n        let pubHttpCallPreFilter = config.callback.httpCallPreFilter;\n        config.callback.httpCallPreFilter = () => {\n            if (!callback.httpCallPreFilter()) {\n                pubHttpCallPreFilter();\n            }\n        }\n    }\n    if (_isFunction(callback.httpCallBackPreFilter)) {\n        let pubHttpCallBackPreFilter = config.callback.httpCallBackPreFilter;\n        config.callback.httpCallBackPreFilter = (response) => {\n            if (!callback.httpCallBackPreFilter(response)) {\n                pubHttpCallBackPreFilter(response);\n            }\n        }\n    }\n    if (_isFunction(callback.doHttpSucess)) {\n        let pubDoHttpSucess = config.callback.doHttpSucess;\n        config.callback.doHttpSucess = (response) => {\n            if (!callback.doHttpSucess(response)) {\n                pubDoHttpSucess(response);\n            }\n        }\n    }\n    if (_isFunction(callback.doHttpFailure)) {\n        let pubDoHttpFailure = config.callback.doHttpFailure;\n        config.callback.doHttpFailure = (response) => {\n            if (!callback.doHttpFailure(response)) {\n                pubDoHttpFailure(response);\n            }\n        }\n    }\n    if (_isFunction(callback.doComplete)) {\n        let pubDoComplete = config.callback.doComplete;\n        config.callback.doComplete = () => {\n            if (!callback.doComplete()) {\n                pubDoComplete();\n            }\n        }\n    }\n    return config;\n}\n```\n\n#### 发送请求和上传文件\n\n\n```java\n/**\n * 请求数据\n * @param requestConfig\n * @private\n */\nfunction _request(requestConfig) {\n    wx.request({\n        url: requestConfig['url'],\n        method: requestConfig['netMethod'],\n        data: requestConfig['params'],\n        header: requestConfig['header'],\n        success: (res) => {\n            _requestSuccess(res, requestConfig);\n        },\n        fail: (res) => {\n            _requestFailed(res, requestConfig)\n        },\n        complete: (res) => {\n            requestConfig.callback.doComplete();\n        }\n    })\n}\n/**\n * 上传文件\n * @param requestConfig 请求配置\n * @param filePath 本地文件路径\n * @private\n */\nfunction _upload(requestConfig, filePath) {\n    wx.uploadFile({\n        header: headers,\n        method: requestConfig['netMethod'],\n        url: requestConfig['url'],\n        filePath: filePath,\n        name: 'file',\n        success: (res) => {\n            _requestSuccess(res, requestConfig);\n        },\n        fail: (res) => {\n            _requestFailed(res, requestConfig);\n        },\n        complete: () => {\n            requestConfig.callback.doComplete();\n        }\n    })\n}\n```\n\n#### 方法暴露并在需要时引用\n\n```java\nmodule.exports = {\n buildRequest:buildRequest\n}\nvar netUtil=require(\"../../utils/netUtil.js\");\n```\n\n##### 使用\n```java\n_requestLogin: function (code) {\n        let params = {\n            code: code,\n            userId: this.data.userId,\n            password: this.data.password\n        };\n        network_utils.buildRequest(url, params, {\n            doHttpSucess: (response) => {\n                if (constants.RetCodes.SUCCESS === response.retCode) {\n                    console.log('[login] success.');\n                    this._onLoginSuccess(response);\n                    return true;\n                }\n                return false;\n            },\n            doComplete: () => {\n                this.setData({\n                    loading: false\n                });\n            }\n        }, false).send();\n    },\n```\n\n### flex布局\n以下两篇阮一峰老师的文章：\n\nFlex 布局教程：语法篇\n\nFlex 布局教程：实例篇\n\n### 登录态验证流程\n微信官方给出了标准的登录流程，参照登录态维护","source":"_posts/微信小程序项目开发总结.md","raw":"---\ntitle: 微信小程序项目开发总结\ndate: 2017-06-16 00:20:18\ntags: 小程序\n---\n\n### 一、基础知识\n\n小程序相关的项目构建，语法，设计等全部内容都在微信小程序的官方文档有详细的描述，所以基础知识很容易掌握，这里给出开发过程中需要一直翻看的官方文档地址;小程序的页面也有自己的一套设计规范，如果对产品没有特殊的要求，可以按照微信官方的设计规范进行UI设计，或则对产品的设计起到一个参考的作用。有必要一直翻看的还有WeUI：\n\n+ 代码地址：GitHub\n+ 设计规范：GitHub\n\n因为小程序本身是微信的一部分，所以设计和使用上多少要和微信保持同步。有了这三个文档，基本就可以将小程序从无到有的搭建起来了，也得益于微信给力的官方文档，很细致。\n\n### 二、项目框架选型\n\n#### 微信web开发者工具\n\n使用微信自己的开发者工具,开发、调试、测试，提交都可以做，但是编码体验很不好，一般的做法是使用webstorm编码，微信web开发者工具只起到编译看效果，调试的作用。能大大提高编码效率。\nwebstorm引入微信小程序API live template :\n\n1. File -> import settings引入wecharCode.jar\n2. 重启后，在编码时使用wx.就会有代码提示\n\n#### 使用gulp进行编译构建\n\n由于微信小程序本身对工程化几乎没有任何的支持，所以动手搭建一份：wxapp-redux-starter。\n使用gulp进行编译构建，主要功能包括：\n\n+ ✦ 集成了Redux，数据管理更方便\n+ ✦ 开发过程中，使用xml取代wxml，对开发工具更友好\n+ ✦ 开发过程中，使用less取代wxss，功能更强大\n+ ✦ 引入es-promise，以便可以创建并使用Promise\n+ ✦ 添加promisify工具函数，可以便捷的将官方Api转换成Pormise模式\n+ ✦ 引入normalizr，可以将数据扁平化，更方便进行数据管理\n+ ✦ 引入babel自动进行ES2015特性转换\n+ ✦ 对wxml/wxss/js/img压缩，相对开发者工具提供的压缩，会减小一丢丢体积。\n\n具体参考这篇文章\n\n### 三、Tips\n\n+ Webstorm 静态检查为警告的部分，要尽量修正，规避掉一些不必要的bug。\n+ 规范小程序的目录结构：\n```java\n+—-project\n+——–common（公共代码）\n+——–http（网络请求）\n+——–icons（存放小图标）\n+——–model（模块工具）\n+——–pages（页面）\n+——–templates（模版）\n+——–utils（工具）\n+——–work（文档等）\n+——–app.js、app.json、app.wxss\n```\n+ javascript语言虽然语句末尾可以不用’;’,但是为了规范都要加上’;’.\n+ 根据小程序设计规范将各部分的标准样式整理到app.wxss里全应用统一使用。具体参照app.wxss\n+ js文件的编码顺序建议如下：\n    1. data: {}\n    2. 生命周期方法\n    3. 页面点击响应方法\n    4. 私有方法（前面加下划线）\n+ 网络返回的数据建议写法如下：\n```java\n//建议写法，因为数据结构可以一眼看出来\nlet data = response[\"data\"];\nlet username = data[\"username\"];\n            \n//不建议写法，不容易看出数据的结构，不容易找错\nlet data = response.data;\nlet username = data.username;\n使用ES6特性–箭头表达式\n\n\n// ES5\n   var net = require('../public/net');\n   Page({\n       data: {\n           list: []\n       },\n       onShow: function () {\n           var self = this;//ES5写法，要在这赋值\n           net.get('/Index/getList', function (res) {\n               res = res || {};\n               var status = res.status,\n                   data = res.data,\n                   list = data.list;\n               if(status == 2) {\n                   self.setData({list: list});//在这用，很容易忘了\n               }\n           });\n       }\n   });\n   // ES6\n   import * as net from '../public/net';\n   Page({\n       data: {\n           list: []\n       },\n       onShow: function () {\n           net.get('/Index/getList', (res = {}) => {\n               let {status, data: {list}} = res;\n               if (status == 2) {\n                   // 此处 this 的指向与 onShow 内一致，无需增加 self 变量\n                   this.setData({list});\n               }\n           });\n       }\n   });\n使用ES6特性–数组筛选\n\n// js\nvar helpers = {\n    // 判断是否有时间参数\n    hasTime: (i) => {\n        return !isNaN(parseInt(i.stamp));\n    },\n    // 时间转换处理\n    parseTime: (i) => {\n        i.time = new Date(i.stamp + '000');\n        return i;\n    }\n};\nnet.get('/Index/getList', (res = {}) => {\n    let {status, data: {list}} = res;\n    this.set({\n        list: list.filter(helpers.hasTime)  // 筛选掉没有时间戳字段的数据\n                  .map(helpers.parseTime)   // 将时间戳字段转化为 JS 的 Date 对象\n    });\n   });\n\n```\n\n### 四、其他\n\n#### 使用开发工具的正确姿势\n\n微信提供的开发工具的编辑功能实在是太难用,用它写代码简直就是在浪费生命.它的正确用法##作为运行和调试工具.##\n\n那么适合作为编辑工具的是: ##webStorm##.\n\n基于IntelJ内核,开启Dracula主题,跟Android studio的使用习惯非常接近,so cool!各种方法提示,自动保存,快速查找…应有尽有.闭源的微信开发工具就不要用来写代码了,珍惜生命.\nwebStorm要识别wxml和wxss,还需要配置一下文件类型:\n\nPreferences -> File Types -> HTML : 添加*.wxml\nPreferences -> File Types -> CasCading Style Sheet : 添加*.wxss\n\n开发时，使用webstorm写代码，web开发者工具调试、运行，效率会高很多。\n\n#### 网络请求的封装\n微信提供了网络请求的API，但是真实项目中使用时，还是需要封装一下的。\n```java\nwx.request({\n  url: 'test.php', //仅为示例，并非真实的接口地址\n  data: {\n     x: '' ,\n     y: ''\n  },\n  header: {\n      'content-type': 'application/json'\n  },\n  success: function(res) {\n    console.log(res.data)\n  }\n})\n```\n#### 封装微信网络框架\n1. 定义好携带构建请求的对象\n```java\nfunction requestConfig() {\n    //url\n    this.url = '';\n    //请求头\n    this.header = {\n        'Content-Type': 'application/json',\n    };\n    //请求参数\n    this.params = {};\n    //是否显示等待对话框\n    this.loading = true;\n    this.netMethod = 'POST';\n    //通信加解密数据\n    this.safeSdk = {};\n    this.callback = {\n        httpCallPreFilter: () => {\n            //网络请求前处理\n        },\n        httpCallBackPreFilter: (response) => {\n            //网络请求返回前处理\n        },\n        doHttpSucess: (response) => {\n            //网络请求成功--公共处理\n        },\n        doHttpFailure: (response) => {\n            //网络请求失败--公共处理\n        },\n        doComplete: () => {\n            //网络请求结束--公共处理\n        }\n    };\n    this.setMethodGet = function () {\n        this.netMethod = 'GET';\n        return this;\n    };\n    this.send = function () {\n        _request(this);\n    };\n    this.upload = function (filePath) {\n        _upload(this, filePath);\n    }\n}\n```\n\n#### 构建requestConfig\n```java\n/**\n * 注意,此方法调用后还要调用.send()才是发送出去.\n * @param Interfaces\n * @param protocol\n * @param params\n * @param callback  拷贝上方注释区的代码使用\n * @param loading\n * @returns {requestConfig}\n */\nfunction buildRequest(url, params, callback, loading) {\n    let config = new requestConfig();\n    config.loading = typeof loading === 'undefined' ? true : loading;\n    let baseUrl = \"\";\n    baseUrl = constants.url;\n    config.url = baseUrl + url;\n    config.params = params;\n    if (_isFunction(callback.httpCallPreFilter)) {\n        let pubHttpCallPreFilter = config.callback.httpCallPreFilter;\n        config.callback.httpCallPreFilter = () => {\n            if (!callback.httpCallPreFilter()) {\n                pubHttpCallPreFilter();\n            }\n        }\n    }\n    if (_isFunction(callback.httpCallBackPreFilter)) {\n        let pubHttpCallBackPreFilter = config.callback.httpCallBackPreFilter;\n        config.callback.httpCallBackPreFilter = (response) => {\n            if (!callback.httpCallBackPreFilter(response)) {\n                pubHttpCallBackPreFilter(response);\n            }\n        }\n    }\n    if (_isFunction(callback.doHttpSucess)) {\n        let pubDoHttpSucess = config.callback.doHttpSucess;\n        config.callback.doHttpSucess = (response) => {\n            if (!callback.doHttpSucess(response)) {\n                pubDoHttpSucess(response);\n            }\n        }\n    }\n    if (_isFunction(callback.doHttpFailure)) {\n        let pubDoHttpFailure = config.callback.doHttpFailure;\n        config.callback.doHttpFailure = (response) => {\n            if (!callback.doHttpFailure(response)) {\n                pubDoHttpFailure(response);\n            }\n        }\n    }\n    if (_isFunction(callback.doComplete)) {\n        let pubDoComplete = config.callback.doComplete;\n        config.callback.doComplete = () => {\n            if (!callback.doComplete()) {\n                pubDoComplete();\n            }\n        }\n    }\n    return config;\n}\n```\n\n#### 发送请求和上传文件\n\n\n```java\n/**\n * 请求数据\n * @param requestConfig\n * @private\n */\nfunction _request(requestConfig) {\n    wx.request({\n        url: requestConfig['url'],\n        method: requestConfig['netMethod'],\n        data: requestConfig['params'],\n        header: requestConfig['header'],\n        success: (res) => {\n            _requestSuccess(res, requestConfig);\n        },\n        fail: (res) => {\n            _requestFailed(res, requestConfig)\n        },\n        complete: (res) => {\n            requestConfig.callback.doComplete();\n        }\n    })\n}\n/**\n * 上传文件\n * @param requestConfig 请求配置\n * @param filePath 本地文件路径\n * @private\n */\nfunction _upload(requestConfig, filePath) {\n    wx.uploadFile({\n        header: headers,\n        method: requestConfig['netMethod'],\n        url: requestConfig['url'],\n        filePath: filePath,\n        name: 'file',\n        success: (res) => {\n            _requestSuccess(res, requestConfig);\n        },\n        fail: (res) => {\n            _requestFailed(res, requestConfig);\n        },\n        complete: () => {\n            requestConfig.callback.doComplete();\n        }\n    })\n}\n```\n\n#### 方法暴露并在需要时引用\n\n```java\nmodule.exports = {\n buildRequest:buildRequest\n}\nvar netUtil=require(\"../../utils/netUtil.js\");\n```\n\n##### 使用\n```java\n_requestLogin: function (code) {\n        let params = {\n            code: code,\n            userId: this.data.userId,\n            password: this.data.password\n        };\n        network_utils.buildRequest(url, params, {\n            doHttpSucess: (response) => {\n                if (constants.RetCodes.SUCCESS === response.retCode) {\n                    console.log('[login] success.');\n                    this._onLoginSuccess(response);\n                    return true;\n                }\n                return false;\n            },\n            doComplete: () => {\n                this.setData({\n                    loading: false\n                });\n            }\n        }, false).send();\n    },\n```\n\n### flex布局\n以下两篇阮一峰老师的文章：\n\nFlex 布局教程：语法篇\n\nFlex 布局教程：实例篇\n\n### 登录态验证流程\n微信官方给出了标准的登录流程，参照登录态维护","slug":"微信小程序项目开发总结","published":1,"updated":"2018-11-18T04:31:25.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjomh75tm000bzz3gpyopvoqj","content":"<h3 id=\"一、基础知识\"><a href=\"#一、基础知识\" class=\"headerlink\" title=\"一、基础知识\"></a>一、基础知识</h3><p>小程序相关的项目构建，语法，设计等全部内容都在微信小程序的官方文档有详细的描述，所以基础知识很容易掌握，这里给出开发过程中需要一直翻看的官方文档地址;小程序的页面也有自己的一套设计规范，如果对产品没有特殊的要求，可以按照微信官方的设计规范进行UI设计，或则对产品的设计起到一个参考的作用。有必要一直翻看的还有WeUI：</p>\n<ul>\n<li>代码地址：GitHub</li>\n<li>设计规范：GitHub</li>\n</ul>\n<p>因为小程序本身是微信的一部分，所以设计和使用上多少要和微信保持同步。有了这三个文档，基本就可以将小程序从无到有的搭建起来了，也得益于微信给力的官方文档，很细致。</p>\n<h3 id=\"二、项目框架选型\"><a href=\"#二、项目框架选型\" class=\"headerlink\" title=\"二、项目框架选型\"></a>二、项目框架选型</h3><h4 id=\"微信web开发者工具\"><a href=\"#微信web开发者工具\" class=\"headerlink\" title=\"微信web开发者工具\"></a>微信web开发者工具</h4><p>使用微信自己的开发者工具,开发、调试、测试，提交都可以做，但是编码体验很不好，一般的做法是使用webstorm编码，微信web开发者工具只起到编译看效果，调试的作用。能大大提高编码效率。<br>webstorm引入微信小程序API live template :</p>\n<ol>\n<li>File -&gt; import settings引入wecharCode.jar</li>\n<li>重启后，在编码时使用wx.就会有代码提示</li>\n</ol>\n<h4 id=\"使用gulp进行编译构建\"><a href=\"#使用gulp进行编译构建\" class=\"headerlink\" title=\"使用gulp进行编译构建\"></a>使用gulp进行编译构建</h4><p>由于微信小程序本身对工程化几乎没有任何的支持，所以动手搭建一份：wxapp-redux-starter。<br>使用gulp进行编译构建，主要功能包括：</p>\n<ul>\n<li>✦ 集成了Redux，数据管理更方便</li>\n<li>✦ 开发过程中，使用xml取代wxml，对开发工具更友好</li>\n<li>✦ 开发过程中，使用less取代wxss，功能更强大</li>\n<li>✦ 引入es-promise，以便可以创建并使用Promise</li>\n<li>✦ 添加promisify工具函数，可以便捷的将官方Api转换成Pormise模式</li>\n<li>✦ 引入normalizr，可以将数据扁平化，更方便进行数据管理</li>\n<li>✦ 引入babel自动进行ES2015特性转换</li>\n<li>✦ 对wxml/wxss/js/img压缩，相对开发者工具提供的压缩，会减小一丢丢体积。</li>\n</ul>\n<p>具体参考这篇文章</p>\n<h3 id=\"三、Tips\"><a href=\"#三、Tips\" class=\"headerlink\" title=\"三、Tips\"></a>三、Tips</h3><ul>\n<li>Webstorm 静态检查为警告的部分，要尽量修正，规避掉一些不必要的bug。</li>\n<li><p>规范小程序的目录结构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+—-project</span><br><span class=\"line\">+——–common（公共代码）</span><br><span class=\"line\">+——–http（网络请求）</span><br><span class=\"line\">+——–icons（存放小图标）</span><br><span class=\"line\">+——–model（模块工具）</span><br><span class=\"line\">+——–pages（页面）</span><br><span class=\"line\">+——–templates（模版）</span><br><span class=\"line\">+——–utils（工具）</span><br><span class=\"line\">+——–work（文档等）</span><br><span class=\"line\">+——–app.js、app.json、app.wxss</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>javascript语言虽然语句末尾可以不用’;’,但是为了规范都要加上’;’.</p>\n</li>\n<li>根据小程序设计规范将各部分的标准样式整理到app.wxss里全应用统一使用。具体参照app.wxss</li>\n<li>js文件的编码顺序建议如下：<ol>\n<li>data: {}</li>\n<li>生命周期方法</li>\n<li>页面点击响应方法</li>\n<li>私有方法（前面加下划线）</li>\n</ol>\n</li>\n<li>网络返回的数据建议写法如下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//建议写法，因为数据结构可以一眼看出来</span></span><br><span class=\"line\">let data = response[<span class=\"string\">\"data\"</span>];</span><br><span class=\"line\">let username = data[<span class=\"string\">\"username\"</span>];</span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"comment\">//不建议写法，不容易看出数据的结构，不容易找错</span></span><br><span class=\"line\">let data = response.data;</span><br><span class=\"line\">let username = data.username;</span><br><span class=\"line\">使用ES6特性–箭头表达式</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">   var net = require(<span class=\"string\">'../public/net'</span>);</span><br><span class=\"line\">   Page(&#123;</span><br><span class=\"line\">       data: &#123;</span><br><span class=\"line\">           list: []</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       onShow: function () &#123;</span><br><span class=\"line\">           var self = <span class=\"keyword\">this</span>;<span class=\"comment\">//ES5写法，要在这赋值</span></span><br><span class=\"line\">           net.get(<span class=\"string\">'/Index/getList'</span>, function (res) &#123;</span><br><span class=\"line\">               res = res || &#123;&#125;;</span><br><span class=\"line\">               var status = res.status,</span><br><span class=\"line\">                   data = res.data,</span><br><span class=\"line\">                   list = data.list;</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(status == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                   self.setData(&#123;list: list&#125;);<span class=\"comment\">//在这用，很容易忘了</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   <span class=\"comment\">// ES6</span></span><br><span class=\"line\">   <span class=\"keyword\">import</span> * as net from <span class=\"string\">'../public/net'</span>;</span><br><span class=\"line\">   Page(&#123;</span><br><span class=\"line\">       data: &#123;</span><br><span class=\"line\">           list: []</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       onShow: function () &#123;</span><br><span class=\"line\">           net.get(<span class=\"string\">'/Index/getList'</span>, (res = &#123;&#125;) =&gt; &#123;</span><br><span class=\"line\">               let &#123;status, data: &#123;list&#125;&#125; = res;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (status == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// 此处 this 的指向与 onShow 内一致，无需增加 self 变量</span></span><br><span class=\"line\">                   <span class=\"keyword\">this</span>.setData(&#123;list&#125;);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">使用ES6特性–数组筛选</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\">var helpers = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否有时间参数</span></span><br><span class=\"line\">    hasTime: (i) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !isNaN(parseInt(i.stamp));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 时间转换处理</span></span><br><span class=\"line\">    parseTime: (i) =&gt; &#123;</span><br><span class=\"line\">        i.time = <span class=\"keyword\">new</span> Date(i.stamp + <span class=\"string\">'000'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">net.get(<span class=\"string\">'/Index/getList'</span>, (res = &#123;&#125;) =&gt; &#123;</span><br><span class=\"line\">    let &#123;status, data: &#123;list&#125;&#125; = res;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.set(&#123;</span><br><span class=\"line\">        list: list.filter(helpers.hasTime)  <span class=\"comment\">// 筛选掉没有时间戳字段的数据</span></span><br><span class=\"line\">                  .map(helpers.parseTime)   <span class=\"comment\">// 将时间戳字段转化为 JS 的 Date 对象</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"四、其他\"><a href=\"#四、其他\" class=\"headerlink\" title=\"四、其他\"></a>四、其他</h3><h4 id=\"使用开发工具的正确姿势\"><a href=\"#使用开发工具的正确姿势\" class=\"headerlink\" title=\"使用开发工具的正确姿势\"></a>使用开发工具的正确姿势</h4><p>微信提供的开发工具的编辑功能实在是太难用,用它写代码简直就是在浪费生命.它的正确用法##作为运行和调试工具.##</p>\n<p>那么适合作为编辑工具的是: ##webStorm##.</p>\n<p>基于IntelJ内核,开启Dracula主题,跟Android studio的使用习惯非常接近,so cool!各种方法提示,自动保存,快速查找…应有尽有.闭源的微信开发工具就不要用来写代码了,珍惜生命.<br>webStorm要识别wxml和wxss,还需要配置一下文件类型:</p>\n<p>Preferences -&gt; File Types -&gt; HTML : 添加<em>.wxml<br>Preferences -&gt; File Types -&gt; CasCading Style Sheet : 添加</em>.wxss</p>\n<p>开发时，使用webstorm写代码，web开发者工具调试、运行，效率会高很多。</p>\n<h4 id=\"网络请求的封装\"><a href=\"#网络请求的封装\" class=\"headerlink\" title=\"网络请求的封装\"></a>网络请求的封装</h4><p>微信提供了网络请求的API，但是真实项目中使用时，还是需要封装一下的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.request(&#123;</span><br><span class=\"line\">  url: <span class=\"string\">'test.php'</span>, <span class=\"comment\">//仅为示例，并非真实的接口地址</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">     x: <span class=\"string\">''</span> ,</span><br><span class=\"line\">     y: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  header: &#123;</span><br><span class=\"line\">      <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/json'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  success: function(res) &#123;</span><br><span class=\"line\">    console.log(res.data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"封装微信网络框架\"><a href=\"#封装微信网络框架\" class=\"headerlink\" title=\"封装微信网络框架\"></a>封装微信网络框架</h4><ol>\n<li>定义好携带构建请求的对象<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">requestConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//url</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.url = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"comment\">//请求头</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.header = &#123;</span><br><span class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//请求参数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.params = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//是否显示等待对话框</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loading = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.netMethod = <span class=\"string\">'POST'</span>;</span><br><span class=\"line\">    <span class=\"comment\">//通信加解密数据</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.safeSdk = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callback = &#123;</span><br><span class=\"line\">        httpCallPreFilter: () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//网络请求前处理</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        httpCallBackPreFilter: (response) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//网络请求返回前处理</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        doHttpSucess: (response) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//网络请求成功--公共处理</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        doHttpFailure: (response) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//网络请求失败--公共处理</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        doComplete: () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//网络请求结束--公共处理</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setMethodGet = function () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.netMethod = <span class=\"string\">'GET'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.send = function () &#123;</span><br><span class=\"line\">        _request(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.upload = function (filePath) &#123;</span><br><span class=\"line\">        _upload(<span class=\"keyword\">this</span>, filePath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"构建requestConfig\"><a href=\"#构建requestConfig\" class=\"headerlink\" title=\"构建requestConfig\"></a>构建requestConfig</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意,此方法调用后还要调用.send()才是发送出去.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> Interfaces</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> protocol</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> params</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> callback  拷贝上方注释区的代码使用</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> loading</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;requestConfig&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">function <span class=\"title\">buildRequest</span><span class=\"params\">(url, params, callback, loading)</span> </span>&#123;</span><br><span class=\"line\">    let config = <span class=\"keyword\">new</span> requestConfig();</span><br><span class=\"line\">    config.loading = typeof loading === <span class=\"string\">'undefined'</span> ? <span class=\"keyword\">true</span> : loading;</span><br><span class=\"line\">    let baseUrl = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    baseUrl = constants.url;</span><br><span class=\"line\">    config.url = baseUrl + url;</span><br><span class=\"line\">    config.params = params;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_isFunction(callback.httpCallPreFilter)) &#123;</span><br><span class=\"line\">        let pubHttpCallPreFilter = config.callback.httpCallPreFilter;</span><br><span class=\"line\">        config.callback.httpCallPreFilter = () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!callback.httpCallPreFilter()) &#123;</span><br><span class=\"line\">                pubHttpCallPreFilter();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_isFunction(callback.httpCallBackPreFilter)) &#123;</span><br><span class=\"line\">        let pubHttpCallBackPreFilter = config.callback.httpCallBackPreFilter;</span><br><span class=\"line\">        config.callback.httpCallBackPreFilter = (response) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!callback.httpCallBackPreFilter(response)) &#123;</span><br><span class=\"line\">                pubHttpCallBackPreFilter(response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_isFunction(callback.doHttpSucess)) &#123;</span><br><span class=\"line\">        let pubDoHttpSucess = config.callback.doHttpSucess;</span><br><span class=\"line\">        config.callback.doHttpSucess = (response) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!callback.doHttpSucess(response)) &#123;</span><br><span class=\"line\">                pubDoHttpSucess(response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_isFunction(callback.doHttpFailure)) &#123;</span><br><span class=\"line\">        let pubDoHttpFailure = config.callback.doHttpFailure;</span><br><span class=\"line\">        config.callback.doHttpFailure = (response) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!callback.doHttpFailure(response)) &#123;</span><br><span class=\"line\">                pubDoHttpFailure(response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_isFunction(callback.doComplete)) &#123;</span><br><span class=\"line\">        let pubDoComplete = config.callback.doComplete;</span><br><span class=\"line\">        config.callback.doComplete = () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!callback.doComplete()) &#123;</span><br><span class=\"line\">                pubDoComplete();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"发送请求和上传文件\"><a href=\"#发送请求和上传文件\" class=\"headerlink\" title=\"发送请求和上传文件\"></a>发送请求和上传文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 请求数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> requestConfig</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@private</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">function <span class=\"title\">_request</span><span class=\"params\">(requestConfig)</span> </span>&#123;</span><br><span class=\"line\">    wx.request(&#123;</span><br><span class=\"line\">        url: requestConfig[<span class=\"string\">'url'</span>],</span><br><span class=\"line\">        method: requestConfig[<span class=\"string\">'netMethod'</span>],</span><br><span class=\"line\">        data: requestConfig[<span class=\"string\">'params'</span>],</span><br><span class=\"line\">        header: requestConfig[<span class=\"string\">'header'</span>],</span><br><span class=\"line\">        success: (res) =&gt; &#123;</span><br><span class=\"line\">            _requestSuccess(res, requestConfig);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        fail: (res) =&gt; &#123;</span><br><span class=\"line\">            _requestFailed(res, requestConfig)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        complete: (res) =&gt; &#123;</span><br><span class=\"line\">            requestConfig.callback.doComplete();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 上传文件</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> requestConfig 请求配置</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> filePath 本地文件路径</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@private</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">function <span class=\"title\">_upload</span><span class=\"params\">(requestConfig, filePath)</span> </span>&#123;</span><br><span class=\"line\">    wx.uploadFile(&#123;</span><br><span class=\"line\">        header: headers,</span><br><span class=\"line\">        method: requestConfig[<span class=\"string\">'netMethod'</span>],</span><br><span class=\"line\">        url: requestConfig[<span class=\"string\">'url'</span>],</span><br><span class=\"line\">        filePath: filePath,</span><br><span class=\"line\">        name: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">        success: (res) =&gt; &#123;</span><br><span class=\"line\">            _requestSuccess(res, requestConfig);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        fail: (res) =&gt; &#123;</span><br><span class=\"line\">            _requestFailed(res, requestConfig);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        complete: () =&gt; &#123;</span><br><span class=\"line\">            requestConfig.callback.doComplete();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法暴露并在需要时引用\"><a href=\"#方法暴露并在需要时引用\" class=\"headerlink\" title=\"方法暴露并在需要时引用\"></a>方法暴露并在需要时引用</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span>.<span class=\"keyword\">exports</span> = &#123;</span><br><span class=\"line\"> buildRequest:buildRequest</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var netUtil=require(<span class=\"string\">\"../../utils/netUtil.js\"</span>);</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_requestLogin: function (code) &#123;</span><br><span class=\"line\">        let params = &#123;</span><br><span class=\"line\">            code: code,</span><br><span class=\"line\">            userId: <span class=\"keyword\">this</span>.data.userId,</span><br><span class=\"line\">            password: <span class=\"keyword\">this</span>.data.password</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        network_utils.buildRequest(url, params, &#123;</span><br><span class=\"line\">            doHttpSucess: (response) =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (constants.RetCodes.SUCCESS === response.retCode) &#123;</span><br><span class=\"line\">                    console.log(<span class=\"string\">'[login] success.'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>._onLoginSuccess(response);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            doComplete: () =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setData(&#123;</span><br><span class=\"line\">                    loading: <span class=\"keyword\">false</span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"keyword\">false</span>).send();</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h3><p>以下两篇阮一峰老师的文章：</p>\n<p>Flex 布局教程：语法篇</p>\n<p>Flex 布局教程：实例篇</p>\n<h3 id=\"登录态验证流程\"><a href=\"#登录态验证流程\" class=\"headerlink\" title=\"登录态验证流程\"></a>登录态验证流程</h3><p>微信官方给出了标准的登录流程，参照登录态维护</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、基础知识\"><a href=\"#一、基础知识\" class=\"headerlink\" title=\"一、基础知识\"></a>一、基础知识</h3><p>小程序相关的项目构建，语法，设计等全部内容都在微信小程序的官方文档有详细的描述，所以基础知识很容易掌握，这里给出开发过程中需要一直翻看的官方文档地址;小程序的页面也有自己的一套设计规范，如果对产品没有特殊的要求，可以按照微信官方的设计规范进行UI设计，或则对产品的设计起到一个参考的作用。有必要一直翻看的还有WeUI：</p>\n<ul>\n<li>代码地址：GitHub</li>\n<li>设计规范：GitHub</li>\n</ul>\n<p>因为小程序本身是微信的一部分，所以设计和使用上多少要和微信保持同步。有了这三个文档，基本就可以将小程序从无到有的搭建起来了，也得益于微信给力的官方文档，很细致。</p>\n<h3 id=\"二、项目框架选型\"><a href=\"#二、项目框架选型\" class=\"headerlink\" title=\"二、项目框架选型\"></a>二、项目框架选型</h3><h4 id=\"微信web开发者工具\"><a href=\"#微信web开发者工具\" class=\"headerlink\" title=\"微信web开发者工具\"></a>微信web开发者工具</h4><p>使用微信自己的开发者工具,开发、调试、测试，提交都可以做，但是编码体验很不好，一般的做法是使用webstorm编码，微信web开发者工具只起到编译看效果，调试的作用。能大大提高编码效率。<br>webstorm引入微信小程序API live template :</p>\n<ol>\n<li>File -&gt; import settings引入wecharCode.jar</li>\n<li>重启后，在编码时使用wx.就会有代码提示</li>\n</ol>\n<h4 id=\"使用gulp进行编译构建\"><a href=\"#使用gulp进行编译构建\" class=\"headerlink\" title=\"使用gulp进行编译构建\"></a>使用gulp进行编译构建</h4><p>由于微信小程序本身对工程化几乎没有任何的支持，所以动手搭建一份：wxapp-redux-starter。<br>使用gulp进行编译构建，主要功能包括：</p>\n<ul>\n<li>✦ 集成了Redux，数据管理更方便</li>\n<li>✦ 开发过程中，使用xml取代wxml，对开发工具更友好</li>\n<li>✦ 开发过程中，使用less取代wxss，功能更强大</li>\n<li>✦ 引入es-promise，以便可以创建并使用Promise</li>\n<li>✦ 添加promisify工具函数，可以便捷的将官方Api转换成Pormise模式</li>\n<li>✦ 引入normalizr，可以将数据扁平化，更方便进行数据管理</li>\n<li>✦ 引入babel自动进行ES2015特性转换</li>\n<li>✦ 对wxml/wxss/js/img压缩，相对开发者工具提供的压缩，会减小一丢丢体积。</li>\n</ul>\n<p>具体参考这篇文章</p>\n<h3 id=\"三、Tips\"><a href=\"#三、Tips\" class=\"headerlink\" title=\"三、Tips\"></a>三、Tips</h3><ul>\n<li>Webstorm 静态检查为警告的部分，要尽量修正，规避掉一些不必要的bug。</li>\n<li><p>规范小程序的目录结构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+—-project</span><br><span class=\"line\">+——–common（公共代码）</span><br><span class=\"line\">+——–http（网络请求）</span><br><span class=\"line\">+——–icons（存放小图标）</span><br><span class=\"line\">+——–model（模块工具）</span><br><span class=\"line\">+——–pages（页面）</span><br><span class=\"line\">+——–templates（模版）</span><br><span class=\"line\">+——–utils（工具）</span><br><span class=\"line\">+——–work（文档等）</span><br><span class=\"line\">+——–app.js、app.json、app.wxss</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>javascript语言虽然语句末尾可以不用’;’,但是为了规范都要加上’;’.</p>\n</li>\n<li>根据小程序设计规范将各部分的标准样式整理到app.wxss里全应用统一使用。具体参照app.wxss</li>\n<li>js文件的编码顺序建议如下：<ol>\n<li>data: {}</li>\n<li>生命周期方法</li>\n<li>页面点击响应方法</li>\n<li>私有方法（前面加下划线）</li>\n</ol>\n</li>\n<li>网络返回的数据建议写法如下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//建议写法，因为数据结构可以一眼看出来</span></span><br><span class=\"line\">let data = response[<span class=\"string\">\"data\"</span>];</span><br><span class=\"line\">let username = data[<span class=\"string\">\"username\"</span>];</span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"comment\">//不建议写法，不容易看出数据的结构，不容易找错</span></span><br><span class=\"line\">let data = response.data;</span><br><span class=\"line\">let username = data.username;</span><br><span class=\"line\">使用ES6特性–箭头表达式</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">   var net = require(<span class=\"string\">'../public/net'</span>);</span><br><span class=\"line\">   Page(&#123;</span><br><span class=\"line\">       data: &#123;</span><br><span class=\"line\">           list: []</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       onShow: function () &#123;</span><br><span class=\"line\">           var self = <span class=\"keyword\">this</span>;<span class=\"comment\">//ES5写法，要在这赋值</span></span><br><span class=\"line\">           net.get(<span class=\"string\">'/Index/getList'</span>, function (res) &#123;</span><br><span class=\"line\">               res = res || &#123;&#125;;</span><br><span class=\"line\">               var status = res.status,</span><br><span class=\"line\">                   data = res.data,</span><br><span class=\"line\">                   list = data.list;</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(status == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                   self.setData(&#123;list: list&#125;);<span class=\"comment\">//在这用，很容易忘了</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   <span class=\"comment\">// ES6</span></span><br><span class=\"line\">   <span class=\"keyword\">import</span> * as net from <span class=\"string\">'../public/net'</span>;</span><br><span class=\"line\">   Page(&#123;</span><br><span class=\"line\">       data: &#123;</span><br><span class=\"line\">           list: []</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       onShow: function () &#123;</span><br><span class=\"line\">           net.get(<span class=\"string\">'/Index/getList'</span>, (res = &#123;&#125;) =&gt; &#123;</span><br><span class=\"line\">               let &#123;status, data: &#123;list&#125;&#125; = res;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (status == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// 此处 this 的指向与 onShow 内一致，无需增加 self 变量</span></span><br><span class=\"line\">                   <span class=\"keyword\">this</span>.setData(&#123;list&#125;);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">使用ES6特性–数组筛选</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\">var helpers = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否有时间参数</span></span><br><span class=\"line\">    hasTime: (i) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !isNaN(parseInt(i.stamp));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 时间转换处理</span></span><br><span class=\"line\">    parseTime: (i) =&gt; &#123;</span><br><span class=\"line\">        i.time = <span class=\"keyword\">new</span> Date(i.stamp + <span class=\"string\">'000'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">net.get(<span class=\"string\">'/Index/getList'</span>, (res = &#123;&#125;) =&gt; &#123;</span><br><span class=\"line\">    let &#123;status, data: &#123;list&#125;&#125; = res;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.set(&#123;</span><br><span class=\"line\">        list: list.filter(helpers.hasTime)  <span class=\"comment\">// 筛选掉没有时间戳字段的数据</span></span><br><span class=\"line\">                  .map(helpers.parseTime)   <span class=\"comment\">// 将时间戳字段转化为 JS 的 Date 对象</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"四、其他\"><a href=\"#四、其他\" class=\"headerlink\" title=\"四、其他\"></a>四、其他</h3><h4 id=\"使用开发工具的正确姿势\"><a href=\"#使用开发工具的正确姿势\" class=\"headerlink\" title=\"使用开发工具的正确姿势\"></a>使用开发工具的正确姿势</h4><p>微信提供的开发工具的编辑功能实在是太难用,用它写代码简直就是在浪费生命.它的正确用法##作为运行和调试工具.##</p>\n<p>那么适合作为编辑工具的是: ##webStorm##.</p>\n<p>基于IntelJ内核,开启Dracula主题,跟Android studio的使用习惯非常接近,so cool!各种方法提示,自动保存,快速查找…应有尽有.闭源的微信开发工具就不要用来写代码了,珍惜生命.<br>webStorm要识别wxml和wxss,还需要配置一下文件类型:</p>\n<p>Preferences -&gt; File Types -&gt; HTML : 添加<em>.wxml<br>Preferences -&gt; File Types -&gt; CasCading Style Sheet : 添加</em>.wxss</p>\n<p>开发时，使用webstorm写代码，web开发者工具调试、运行，效率会高很多。</p>\n<h4 id=\"网络请求的封装\"><a href=\"#网络请求的封装\" class=\"headerlink\" title=\"网络请求的封装\"></a>网络请求的封装</h4><p>微信提供了网络请求的API，但是真实项目中使用时，还是需要封装一下的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.request(&#123;</span><br><span class=\"line\">  url: <span class=\"string\">'test.php'</span>, <span class=\"comment\">//仅为示例，并非真实的接口地址</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">     x: <span class=\"string\">''</span> ,</span><br><span class=\"line\">     y: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  header: &#123;</span><br><span class=\"line\">      <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/json'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  success: function(res) &#123;</span><br><span class=\"line\">    console.log(res.data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"封装微信网络框架\"><a href=\"#封装微信网络框架\" class=\"headerlink\" title=\"封装微信网络框架\"></a>封装微信网络框架</h4><ol>\n<li>定义好携带构建请求的对象<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">requestConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//url</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.url = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"comment\">//请求头</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.header = &#123;</span><br><span class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//请求参数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.params = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//是否显示等待对话框</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loading = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.netMethod = <span class=\"string\">'POST'</span>;</span><br><span class=\"line\">    <span class=\"comment\">//通信加解密数据</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.safeSdk = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callback = &#123;</span><br><span class=\"line\">        httpCallPreFilter: () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//网络请求前处理</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        httpCallBackPreFilter: (response) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//网络请求返回前处理</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        doHttpSucess: (response) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//网络请求成功--公共处理</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        doHttpFailure: (response) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//网络请求失败--公共处理</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        doComplete: () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//网络请求结束--公共处理</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setMethodGet = function () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.netMethod = <span class=\"string\">'GET'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.send = function () &#123;</span><br><span class=\"line\">        _request(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.upload = function (filePath) &#123;</span><br><span class=\"line\">        _upload(<span class=\"keyword\">this</span>, filePath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"构建requestConfig\"><a href=\"#构建requestConfig\" class=\"headerlink\" title=\"构建requestConfig\"></a>构建requestConfig</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意,此方法调用后还要调用.send()才是发送出去.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> Interfaces</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> protocol</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> params</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> callback  拷贝上方注释区的代码使用</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> loading</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;requestConfig&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">function <span class=\"title\">buildRequest</span><span class=\"params\">(url, params, callback, loading)</span> </span>&#123;</span><br><span class=\"line\">    let config = <span class=\"keyword\">new</span> requestConfig();</span><br><span class=\"line\">    config.loading = typeof loading === <span class=\"string\">'undefined'</span> ? <span class=\"keyword\">true</span> : loading;</span><br><span class=\"line\">    let baseUrl = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    baseUrl = constants.url;</span><br><span class=\"line\">    config.url = baseUrl + url;</span><br><span class=\"line\">    config.params = params;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_isFunction(callback.httpCallPreFilter)) &#123;</span><br><span class=\"line\">        let pubHttpCallPreFilter = config.callback.httpCallPreFilter;</span><br><span class=\"line\">        config.callback.httpCallPreFilter = () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!callback.httpCallPreFilter()) &#123;</span><br><span class=\"line\">                pubHttpCallPreFilter();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_isFunction(callback.httpCallBackPreFilter)) &#123;</span><br><span class=\"line\">        let pubHttpCallBackPreFilter = config.callback.httpCallBackPreFilter;</span><br><span class=\"line\">        config.callback.httpCallBackPreFilter = (response) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!callback.httpCallBackPreFilter(response)) &#123;</span><br><span class=\"line\">                pubHttpCallBackPreFilter(response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_isFunction(callback.doHttpSucess)) &#123;</span><br><span class=\"line\">        let pubDoHttpSucess = config.callback.doHttpSucess;</span><br><span class=\"line\">        config.callback.doHttpSucess = (response) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!callback.doHttpSucess(response)) &#123;</span><br><span class=\"line\">                pubDoHttpSucess(response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_isFunction(callback.doHttpFailure)) &#123;</span><br><span class=\"line\">        let pubDoHttpFailure = config.callback.doHttpFailure;</span><br><span class=\"line\">        config.callback.doHttpFailure = (response) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!callback.doHttpFailure(response)) &#123;</span><br><span class=\"line\">                pubDoHttpFailure(response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_isFunction(callback.doComplete)) &#123;</span><br><span class=\"line\">        let pubDoComplete = config.callback.doComplete;</span><br><span class=\"line\">        config.callback.doComplete = () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!callback.doComplete()) &#123;</span><br><span class=\"line\">                pubDoComplete();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"发送请求和上传文件\"><a href=\"#发送请求和上传文件\" class=\"headerlink\" title=\"发送请求和上传文件\"></a>发送请求和上传文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 请求数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> requestConfig</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@private</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">function <span class=\"title\">_request</span><span class=\"params\">(requestConfig)</span> </span>&#123;</span><br><span class=\"line\">    wx.request(&#123;</span><br><span class=\"line\">        url: requestConfig[<span class=\"string\">'url'</span>],</span><br><span class=\"line\">        method: requestConfig[<span class=\"string\">'netMethod'</span>],</span><br><span class=\"line\">        data: requestConfig[<span class=\"string\">'params'</span>],</span><br><span class=\"line\">        header: requestConfig[<span class=\"string\">'header'</span>],</span><br><span class=\"line\">        success: (res) =&gt; &#123;</span><br><span class=\"line\">            _requestSuccess(res, requestConfig);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        fail: (res) =&gt; &#123;</span><br><span class=\"line\">            _requestFailed(res, requestConfig)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        complete: (res) =&gt; &#123;</span><br><span class=\"line\">            requestConfig.callback.doComplete();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 上传文件</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> requestConfig 请求配置</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> filePath 本地文件路径</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@private</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">function <span class=\"title\">_upload</span><span class=\"params\">(requestConfig, filePath)</span> </span>&#123;</span><br><span class=\"line\">    wx.uploadFile(&#123;</span><br><span class=\"line\">        header: headers,</span><br><span class=\"line\">        method: requestConfig[<span class=\"string\">'netMethod'</span>],</span><br><span class=\"line\">        url: requestConfig[<span class=\"string\">'url'</span>],</span><br><span class=\"line\">        filePath: filePath,</span><br><span class=\"line\">        name: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">        success: (res) =&gt; &#123;</span><br><span class=\"line\">            _requestSuccess(res, requestConfig);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        fail: (res) =&gt; &#123;</span><br><span class=\"line\">            _requestFailed(res, requestConfig);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        complete: () =&gt; &#123;</span><br><span class=\"line\">            requestConfig.callback.doComplete();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法暴露并在需要时引用\"><a href=\"#方法暴露并在需要时引用\" class=\"headerlink\" title=\"方法暴露并在需要时引用\"></a>方法暴露并在需要时引用</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span>.<span class=\"keyword\">exports</span> = &#123;</span><br><span class=\"line\"> buildRequest:buildRequest</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var netUtil=require(<span class=\"string\">\"../../utils/netUtil.js\"</span>);</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_requestLogin: function (code) &#123;</span><br><span class=\"line\">        let params = &#123;</span><br><span class=\"line\">            code: code,</span><br><span class=\"line\">            userId: <span class=\"keyword\">this</span>.data.userId,</span><br><span class=\"line\">            password: <span class=\"keyword\">this</span>.data.password</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        network_utils.buildRequest(url, params, &#123;</span><br><span class=\"line\">            doHttpSucess: (response) =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (constants.RetCodes.SUCCESS === response.retCode) &#123;</span><br><span class=\"line\">                    console.log(<span class=\"string\">'[login] success.'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>._onLoginSuccess(response);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            doComplete: () =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setData(&#123;</span><br><span class=\"line\">                    loading: <span class=\"keyword\">false</span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"keyword\">false</span>).send();</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h3><p>以下两篇阮一峰老师的文章：</p>\n<p>Flex 布局教程：语法篇</p>\n<p>Flex 布局教程：实例篇</p>\n<h3 id=\"登录态验证流程\"><a href=\"#登录态验证流程\" class=\"headerlink\" title=\"登录态验证流程\"></a>登录态验证流程</h3><p>微信官方给出了标准的登录流程，参照登录态维护</p>\n"},{"title":"通过postman提升接口测试效率","date":"2017-05-09T16:16:54.000Z","_content":"\n### 介绍\n\nPostman是google开发的一款功能强大的网页调试与发送网页HTTP请求，并能运行测试用例的的Chrome插件。其主要功能包括：\n模拟各种HTTP requests\n从常用的 GET、POST 到 RESTful 的 PUT 、 DELETE …等等。 甚至还可以发送文件、送出额外的 header。\n\n### Collection 功能（测试集合）\n\nCollection 是 requests的集合，在做完一個测试的時候， 你可以把這次的 request 存到特定的 Collection 里面，如此一來，下次要做同样的测试时，就不需要重新输入。而且一个collection可以包含多条request，如果我们把一个request当成一个test case，那collection就可以看成是一个test suite。通过collection的归类，我们可以良好的分类测试软件所提供的API.而且 Collection 还可以 Import 或是 Share 出來，让团队里面的所有人共享你建立起來的 Collection。\n\n### 人性化的Response整理\n\n一般在用其他工具來测试的時候，response的内容通常都是纯文字的 raw， 但如果是 JSON ，就是塞成一整行的 JSON。这会造成阅读的障碍 ，而 Postman 可以针对response内容的格式自动美化。 JSON、 XML 或是 HTML 都會整理成我们可以阅读的格式\n内置测试脚本语言\nPostman支持编写测试脚本，可以快速的检查request的结果，并返回测试结果\n\n### 设定变量与环境\n\nPostman 可以自由 设定变量与Environment，一般我们在编辑request，校验response的时候，总会需要重复输入某些字符，比如url，postman允许我们设定变量来保存这些值。并且把变量保存在不同的环境中。比如，我們可能会有多种环境， development 、 staging 或 local， 而这几种环境中的 request URL 也各不相同，但我们可以在不同的环境中设定同样的变量，只是变量的值不一样，这样我们就不用修改我们的测试脚本，而测试不同的环境。\n\n### 安装\n\n从chrome的扩展程序中安装\n\n\n### 入门\n\n打开postman之后如下图所示,左边是项目具体的接口,右上上面是请求链接,请求体,右边下面是具体的响应体\n\n\n### URL\n\n要组装一条Request, URL永远是你首先要填的内容，在Postman里面你曾输入过的URL是可以通过下拉自动补全的哦。如果你点击Params按钮，Postman会弹出一个键值编辑器，你可以在哪里输入URL的Parameter，Postman会帮你自动加入到URL当中，反之，如果你的URL当中已经有了参数，那Postman会在你打开键值编辑器的时候把参数自动载入\nHeaders\n点击’Headers’按钮，Postman同样会弹出一个键值编辑器。在这里，你可以随意添加你想要的Header attribute，同样Postman为我们通过了很贴心的auto-complete功能，敲入一个字母，你可以从下拉菜单里选择你想要的标准atrribute\nMethod\n要选择Request的Method是很简单的，Postman支持所有的Method，而一旦你选择了Method，Postman的request body编辑器会根据的你选择，自动的发生改变\nRequest Body\n如果我们要创建的request是类似于POST，那我们就需要编辑Request Body，Postman根据body type的不同，提供了4中编辑方式：\n\n### 进阶\n\ncookies\n分开打包的应用程序运行在沙箱浏览器,它不能访问cookie设置浏览器内。这种限制也可以使用拦截器扩展。\n\n身份验证Authentication\npostman有一个helpers可以帮助我们简化一些重复和复杂的任务。当前的一套helpers可以帮助你解决一些authentication protocols的问题。\n\nBasic Auth\n填写用户名和密码，点击Refresh headers\n\nDigest Auth\n要比Basic Auth复杂的多。使用当前填写的值生成authorization header。所以在生成header之前要确保设置的正确性。如果当前的header已经存在，postman会移除之前的header。\n\nOAuth 1.0a\npostman的OAuth helper让你签署支持OAuth 1.0基于身份验证的请求。OAuth不用获取access token,你需要去API提供者获取的。OAuth 1.0可以在header或者查询参数中设置value。\n\nOAuth 2.0\npostman支持获得OAuth 2.0 token并添加到requests中。\n\nWritting Test\nPostman的Tests标签可以用来写测试：\n\n本质上是javascript code，可以为tests object设置values。这里使用描述性文字作为key，检验body中的各种情况，当然你可以创建任意多的key，这取决于你需要测试多少点。 tests也会随着request保存到collection中。api测试保证前端后台都能正常的于api协作工作，而不用在出错时猜测是哪里的问题。 需要在request的test中创建了test后，再进行request，test的结果在body的test中查看。 注意： 1.这里的key描述必须是唯一的，否则相同描述只会执行第一个。 2.这里的key可以使用中文。 例子： tests[“Body contains user_id”] = responseBody.has(“user_id”) 这里描述性的key为：Body contains user_id。检测点为：responseBody.has(“user_id”)，意思是检测返回的body中是否包含”user_id”这个字段。\n查看responses中的Tests结果：记过显示每个key,也就是我们测试点的具体结果，是否通过。\n\nTesting Sandbox\npostman的测试是运行在沙箱环境，是与app独立的。查看什么在沙箱中是可用的，参见Sandbox documentation.\n\nSnippets\n用于快速添加常用的测试代码。可以自定义snippets。\n\nViewing results\npostman每次执行request的时候，会执行tests。测试结果会在tests的tab上面显示一个通过的数量。\n\nTesting Sandbox\nTesting examples\n测试代码会在发送request并且接收到responses后执行。\n\n1.设置环境变量 postman.setEnvironmentVariable(“key”, “value”);\n2.设置全局变量 postman.setGlobalVariable(“key”, “value”);\n3.检查response body中是否包含某个string tests[“Body matches string”] = responseBody.has(“string_you_want_to_search”);\n4.检测JSON中的某个值是否等于预期的值\nvar data = JSON.parse(responseBody);\ntests[“Your test name”] = data.value === 100;\nJSON.parse()方法，把json字符串转化为对象。parse()会进行json格式的检查是一个安全的函数。 如：检查json中某个数组元素的个数(这里检测programs的长度)\nvar data = JSON.parse(responseBody);\ntests[“program’s lenght”] = data.programs.length === 5;\n5.转换XML body为JSON对象 var jsonObject = xml2Json(responseBody);\n6.检查response body是否与某个string相等 tests[“Body is correct”] = responseBody === “response_body_string”;\n7.测试response Headers中的某个元素是否存在(如:Content-Type)\ntests[“Content-Type is present”] = postman.getResponseHeader(“Content-Type”);\n//getResponseHeader()方法会返回header的值，如果该值存在\n或者：\ntests[“Content-Type is present”] = responseHeaders.hasOwnProperty(“Content-Type”);\n上面的方法，不区分大小写。下面的方法，要区分大小写。\n\n8.验证Status code的值 tests[“Status code is 200”] = responseCode.code === 200;\n\n9.验证Response time是否小于某个值 tests[“Response time is less than 200ms”] = responseTime < 200;\n10.name是否包含某个值 tests[“Status code name has string”] = responseCode.name.has(“Created”);\n11.POST 请求的状态响应码是否是某个值 tests[“Successful POST request”] = responseCode.code === 201 || responseCode.code === 202;\n12.很小的JSON数据验证器\nvar schema = {\n“items”: {\n“type”: “boolean”\n}\n};\nvar data1 = [true, false];\nvar data2 = [true, 123];\nconsole.log(tv4.error);\ntests[“Valid Data1”] = tv4.validate(data1, schema);\ntests[“Valid Data2”] = tv4.validate(data2, schema);\n结果：\n运行Collections\npostman允许你运行collection，你可以运行任意的次数。 最后会给出一个整体运行的结果。会保存每一次运行的结果，提供给你比较每一次运行解雇的不同。\n选择collection，选择环境。点击运行按钮。\n\n在需要csv和json文件的地方记得添加。\n运行collection测试会在另一个窗口运行。如果需要在main窗口修改东西，在新窗口能正常读取。\n\n参考文档：\n\nhttps://juejin.im/entry/57597a62a341310061337885\n\nhttp://www.jianshu.com/p/9d36e77fab9e","source":"_posts/通过postman提升接口测试效率.md","raw":"---\ntitle: 通过postman提升接口测试效率\ndate: 2017-05-10 00:16:54\ntags: Android\n---\n\n### 介绍\n\nPostman是google开发的一款功能强大的网页调试与发送网页HTTP请求，并能运行测试用例的的Chrome插件。其主要功能包括：\n模拟各种HTTP requests\n从常用的 GET、POST 到 RESTful 的 PUT 、 DELETE …等等。 甚至还可以发送文件、送出额外的 header。\n\n### Collection 功能（测试集合）\n\nCollection 是 requests的集合，在做完一個测试的時候， 你可以把這次的 request 存到特定的 Collection 里面，如此一來，下次要做同样的测试时，就不需要重新输入。而且一个collection可以包含多条request，如果我们把一个request当成一个test case，那collection就可以看成是一个test suite。通过collection的归类，我们可以良好的分类测试软件所提供的API.而且 Collection 还可以 Import 或是 Share 出來，让团队里面的所有人共享你建立起來的 Collection。\n\n### 人性化的Response整理\n\n一般在用其他工具來测试的時候，response的内容通常都是纯文字的 raw， 但如果是 JSON ，就是塞成一整行的 JSON。这会造成阅读的障碍 ，而 Postman 可以针对response内容的格式自动美化。 JSON、 XML 或是 HTML 都會整理成我们可以阅读的格式\n内置测试脚本语言\nPostman支持编写测试脚本，可以快速的检查request的结果，并返回测试结果\n\n### 设定变量与环境\n\nPostman 可以自由 设定变量与Environment，一般我们在编辑request，校验response的时候，总会需要重复输入某些字符，比如url，postman允许我们设定变量来保存这些值。并且把变量保存在不同的环境中。比如，我們可能会有多种环境， development 、 staging 或 local， 而这几种环境中的 request URL 也各不相同，但我们可以在不同的环境中设定同样的变量，只是变量的值不一样，这样我们就不用修改我们的测试脚本，而测试不同的环境。\n\n### 安装\n\n从chrome的扩展程序中安装\n\n\n### 入门\n\n打开postman之后如下图所示,左边是项目具体的接口,右上上面是请求链接,请求体,右边下面是具体的响应体\n\n\n### URL\n\n要组装一条Request, URL永远是你首先要填的内容，在Postman里面你曾输入过的URL是可以通过下拉自动补全的哦。如果你点击Params按钮，Postman会弹出一个键值编辑器，你可以在哪里输入URL的Parameter，Postman会帮你自动加入到URL当中，反之，如果你的URL当中已经有了参数，那Postman会在你打开键值编辑器的时候把参数自动载入\nHeaders\n点击’Headers’按钮，Postman同样会弹出一个键值编辑器。在这里，你可以随意添加你想要的Header attribute，同样Postman为我们通过了很贴心的auto-complete功能，敲入一个字母，你可以从下拉菜单里选择你想要的标准atrribute\nMethod\n要选择Request的Method是很简单的，Postman支持所有的Method，而一旦你选择了Method，Postman的request body编辑器会根据的你选择，自动的发生改变\nRequest Body\n如果我们要创建的request是类似于POST，那我们就需要编辑Request Body，Postman根据body type的不同，提供了4中编辑方式：\n\n### 进阶\n\ncookies\n分开打包的应用程序运行在沙箱浏览器,它不能访问cookie设置浏览器内。这种限制也可以使用拦截器扩展。\n\n身份验证Authentication\npostman有一个helpers可以帮助我们简化一些重复和复杂的任务。当前的一套helpers可以帮助你解决一些authentication protocols的问题。\n\nBasic Auth\n填写用户名和密码，点击Refresh headers\n\nDigest Auth\n要比Basic Auth复杂的多。使用当前填写的值生成authorization header。所以在生成header之前要确保设置的正确性。如果当前的header已经存在，postman会移除之前的header。\n\nOAuth 1.0a\npostman的OAuth helper让你签署支持OAuth 1.0基于身份验证的请求。OAuth不用获取access token,你需要去API提供者获取的。OAuth 1.0可以在header或者查询参数中设置value。\n\nOAuth 2.0\npostman支持获得OAuth 2.0 token并添加到requests中。\n\nWritting Test\nPostman的Tests标签可以用来写测试：\n\n本质上是javascript code，可以为tests object设置values。这里使用描述性文字作为key，检验body中的各种情况，当然你可以创建任意多的key，这取决于你需要测试多少点。 tests也会随着request保存到collection中。api测试保证前端后台都能正常的于api协作工作，而不用在出错时猜测是哪里的问题。 需要在request的test中创建了test后，再进行request，test的结果在body的test中查看。 注意： 1.这里的key描述必须是唯一的，否则相同描述只会执行第一个。 2.这里的key可以使用中文。 例子： tests[“Body contains user_id”] = responseBody.has(“user_id”) 这里描述性的key为：Body contains user_id。检测点为：responseBody.has(“user_id”)，意思是检测返回的body中是否包含”user_id”这个字段。\n查看responses中的Tests结果：记过显示每个key,也就是我们测试点的具体结果，是否通过。\n\nTesting Sandbox\npostman的测试是运行在沙箱环境，是与app独立的。查看什么在沙箱中是可用的，参见Sandbox documentation.\n\nSnippets\n用于快速添加常用的测试代码。可以自定义snippets。\n\nViewing results\npostman每次执行request的时候，会执行tests。测试结果会在tests的tab上面显示一个通过的数量。\n\nTesting Sandbox\nTesting examples\n测试代码会在发送request并且接收到responses后执行。\n\n1.设置环境变量 postman.setEnvironmentVariable(“key”, “value”);\n2.设置全局变量 postman.setGlobalVariable(“key”, “value”);\n3.检查response body中是否包含某个string tests[“Body matches string”] = responseBody.has(“string_you_want_to_search”);\n4.检测JSON中的某个值是否等于预期的值\nvar data = JSON.parse(responseBody);\ntests[“Your test name”] = data.value === 100;\nJSON.parse()方法，把json字符串转化为对象。parse()会进行json格式的检查是一个安全的函数。 如：检查json中某个数组元素的个数(这里检测programs的长度)\nvar data = JSON.parse(responseBody);\ntests[“program’s lenght”] = data.programs.length === 5;\n5.转换XML body为JSON对象 var jsonObject = xml2Json(responseBody);\n6.检查response body是否与某个string相等 tests[“Body is correct”] = responseBody === “response_body_string”;\n7.测试response Headers中的某个元素是否存在(如:Content-Type)\ntests[“Content-Type is present”] = postman.getResponseHeader(“Content-Type”);\n//getResponseHeader()方法会返回header的值，如果该值存在\n或者：\ntests[“Content-Type is present”] = responseHeaders.hasOwnProperty(“Content-Type”);\n上面的方法，不区分大小写。下面的方法，要区分大小写。\n\n8.验证Status code的值 tests[“Status code is 200”] = responseCode.code === 200;\n\n9.验证Response time是否小于某个值 tests[“Response time is less than 200ms”] = responseTime < 200;\n10.name是否包含某个值 tests[“Status code name has string”] = responseCode.name.has(“Created”);\n11.POST 请求的状态响应码是否是某个值 tests[“Successful POST request”] = responseCode.code === 201 || responseCode.code === 202;\n12.很小的JSON数据验证器\nvar schema = {\n“items”: {\n“type”: “boolean”\n}\n};\nvar data1 = [true, false];\nvar data2 = [true, 123];\nconsole.log(tv4.error);\ntests[“Valid Data1”] = tv4.validate(data1, schema);\ntests[“Valid Data2”] = tv4.validate(data2, schema);\n结果：\n运行Collections\npostman允许你运行collection，你可以运行任意的次数。 最后会给出一个整体运行的结果。会保存每一次运行的结果，提供给你比较每一次运行解雇的不同。\n选择collection，选择环境。点击运行按钮。\n\n在需要csv和json文件的地方记得添加。\n运行collection测试会在另一个窗口运行。如果需要在main窗口修改东西，在新窗口能正常读取。\n\n参考文档：\n\nhttps://juejin.im/entry/57597a62a341310061337885\n\nhttp://www.jianshu.com/p/9d36e77fab9e","slug":"通过postman提升接口测试效率","published":1,"updated":"2018-11-18T04:31:25.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjomh75to000dzz3gixqey55a","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>Postman是google开发的一款功能强大的网页调试与发送网页HTTP请求，并能运行测试用例的的Chrome插件。其主要功能包括：<br>模拟各种HTTP requests<br>从常用的 GET、POST 到 RESTful 的 PUT 、 DELETE …等等。 甚至还可以发送文件、送出额外的 header。</p>\n<h3 id=\"Collection-功能（测试集合）\"><a href=\"#Collection-功能（测试集合）\" class=\"headerlink\" title=\"Collection 功能（测试集合）\"></a>Collection 功能（测试集合）</h3><p>Collection 是 requests的集合，在做完一個测试的時候， 你可以把這次的 request 存到特定的 Collection 里面，如此一來，下次要做同样的测试时，就不需要重新输入。而且一个collection可以包含多条request，如果我们把一个request当成一个test case，那collection就可以看成是一个test suite。通过collection的归类，我们可以良好的分类测试软件所提供的API.而且 Collection 还可以 Import 或是 Share 出來，让团队里面的所有人共享你建立起來的 Collection。</p>\n<h3 id=\"人性化的Response整理\"><a href=\"#人性化的Response整理\" class=\"headerlink\" title=\"人性化的Response整理\"></a>人性化的Response整理</h3><p>一般在用其他工具來测试的時候，response的内容通常都是纯文字的 raw， 但如果是 JSON ，就是塞成一整行的 JSON。这会造成阅读的障碍 ，而 Postman 可以针对response内容的格式自动美化。 JSON、 XML 或是 HTML 都會整理成我们可以阅读的格式<br>内置测试脚本语言<br>Postman支持编写测试脚本，可以快速的检查request的结果，并返回测试结果</p>\n<h3 id=\"设定变量与环境\"><a href=\"#设定变量与环境\" class=\"headerlink\" title=\"设定变量与环境\"></a>设定变量与环境</h3><p>Postman 可以自由 设定变量与Environment，一般我们在编辑request，校验response的时候，总会需要重复输入某些字符，比如url，postman允许我们设定变量来保存这些值。并且把变量保存在不同的环境中。比如，我們可能会有多种环境， development 、 staging 或 local， 而这几种环境中的 request URL 也各不相同，但我们可以在不同的环境中设定同样的变量，只是变量的值不一样，这样我们就不用修改我们的测试脚本，而测试不同的环境。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>从chrome的扩展程序中安装</p>\n<h3 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h3><p>打开postman之后如下图所示,左边是项目具体的接口,右上上面是请求链接,请求体,右边下面是具体的响应体</p>\n<h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h3><p>要组装一条Request, URL永远是你首先要填的内容，在Postman里面你曾输入过的URL是可以通过下拉自动补全的哦。如果你点击Params按钮，Postman会弹出一个键值编辑器，你可以在哪里输入URL的Parameter，Postman会帮你自动加入到URL当中，反之，如果你的URL当中已经有了参数，那Postman会在你打开键值编辑器的时候把参数自动载入<br>Headers<br>点击’Headers’按钮，Postman同样会弹出一个键值编辑器。在这里，你可以随意添加你想要的Header attribute，同样Postman为我们通过了很贴心的auto-complete功能，敲入一个字母，你可以从下拉菜单里选择你想要的标准atrribute<br>Method<br>要选择Request的Method是很简单的，Postman支持所有的Method，而一旦你选择了Method，Postman的request body编辑器会根据的你选择，自动的发生改变<br>Request Body<br>如果我们要创建的request是类似于POST，那我们就需要编辑Request Body，Postman根据body type的不同，提供了4中编辑方式：</p>\n<h3 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h3><p>cookies<br>分开打包的应用程序运行在沙箱浏览器,它不能访问cookie设置浏览器内。这种限制也可以使用拦截器扩展。</p>\n<p>身份验证Authentication<br>postman有一个helpers可以帮助我们简化一些重复和复杂的任务。当前的一套helpers可以帮助你解决一些authentication protocols的问题。</p>\n<p>Basic Auth<br>填写用户名和密码，点击Refresh headers</p>\n<p>Digest Auth<br>要比Basic Auth复杂的多。使用当前填写的值生成authorization header。所以在生成header之前要确保设置的正确性。如果当前的header已经存在，postman会移除之前的header。</p>\n<p>OAuth 1.0a<br>postman的OAuth helper让你签署支持OAuth 1.0基于身份验证的请求。OAuth不用获取access token,你需要去API提供者获取的。OAuth 1.0可以在header或者查询参数中设置value。</p>\n<p>OAuth 2.0<br>postman支持获得OAuth 2.0 token并添加到requests中。</p>\n<p>Writting Test<br>Postman的Tests标签可以用来写测试：</p>\n<p>本质上是javascript code，可以为tests object设置values。这里使用描述性文字作为key，检验body中的各种情况，当然你可以创建任意多的key，这取决于你需要测试多少点。 tests也会随着request保存到collection中。api测试保证前端后台都能正常的于api协作工作，而不用在出错时猜测是哪里的问题。 需要在request的test中创建了test后，再进行request，test的结果在body的test中查看。 注意： 1.这里的key描述必须是唯一的，否则相同描述只会执行第一个。 2.这里的key可以使用中文。 例子： tests[“Body contains user_id”] = responseBody.has(“user_id”) 这里描述性的key为：Body contains user_id。检测点为：responseBody.has(“user_id”)，意思是检测返回的body中是否包含”user_id”这个字段。<br>查看responses中的Tests结果：记过显示每个key,也就是我们测试点的具体结果，是否通过。</p>\n<p>Testing Sandbox<br>postman的测试是运行在沙箱环境，是与app独立的。查看什么在沙箱中是可用的，参见Sandbox documentation.</p>\n<p>Snippets<br>用于快速添加常用的测试代码。可以自定义snippets。</p>\n<p>Viewing results<br>postman每次执行request的时候，会执行tests。测试结果会在tests的tab上面显示一个通过的数量。</p>\n<p>Testing Sandbox<br>Testing examples<br>测试代码会在发送request并且接收到responses后执行。</p>\n<p>1.设置环境变量 postman.setEnvironmentVariable(“key”, “value”);<br>2.设置全局变量 postman.setGlobalVariable(“key”, “value”);<br>3.检查response body中是否包含某个string tests[“Body matches string”] = responseBody.has(“string_you_want_to_search”);<br>4.检测JSON中的某个值是否等于预期的值<br>var data = JSON.parse(responseBody);<br>tests[“Your test name”] = data.value === 100;<br>JSON.parse()方法，把json字符串转化为对象。parse()会进行json格式的检查是一个安全的函数。 如：检查json中某个数组元素的个数(这里检测programs的长度)<br>var data = JSON.parse(responseBody);<br>tests[“program’s lenght”] = data.programs.length === 5;<br>5.转换XML body为JSON对象 var jsonObject = xml2Json(responseBody);<br>6.检查response body是否与某个string相等 tests[“Body is correct”] = responseBody === “response_body_string”;<br>7.测试response Headers中的某个元素是否存在(如:Content-Type)<br>tests[“Content-Type is present”] = postman.getResponseHeader(“Content-Type”);<br>//getResponseHeader()方法会返回header的值，如果该值存在<br>或者：<br>tests[“Content-Type is present”] = responseHeaders.hasOwnProperty(“Content-Type”);<br>上面的方法，不区分大小写。下面的方法，要区分大小写。</p>\n<p>8.验证Status code的值 tests[“Status code is 200”] = responseCode.code === 200;</p>\n<p>9.验证Response time是否小于某个值 tests[“Response time is less than 200ms”] = responseTime &lt; 200;<br>10.name是否包含某个值 tests[“Status code name has string”] = responseCode.name.has(“Created”);<br>11.POST 请求的状态响应码是否是某个值 tests[“Successful POST request”] = responseCode.code === 201 || responseCode.code === 202;<br>12.很小的JSON数据验证器<br>var schema = {<br>“items”: {<br>“type”: “boolean”<br>}<br>};<br>var data1 = [true, false];<br>var data2 = [true, 123];<br>console.log(tv4.error);<br>tests[“Valid Data1”] = tv4.validate(data1, schema);<br>tests[“Valid Data2”] = tv4.validate(data2, schema);<br>结果：<br>运行Collections<br>postman允许你运行collection，你可以运行任意的次数。 最后会给出一个整体运行的结果。会保存每一次运行的结果，提供给你比较每一次运行解雇的不同。<br>选择collection，选择环境。点击运行按钮。</p>\n<p>在需要csv和json文件的地方记得添加。<br>运行collection测试会在另一个窗口运行。如果需要在main窗口修改东西，在新窗口能正常读取。</p>\n<p>参考文档：</p>\n<p><a href=\"https://juejin.im/entry/57597a62a341310061337885\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/57597a62a341310061337885</a></p>\n<p><a href=\"http://www.jianshu.com/p/9d36e77fab9e\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/9d36e77fab9e</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>Postman是google开发的一款功能强大的网页调试与发送网页HTTP请求，并能运行测试用例的的Chrome插件。其主要功能包括：<br>模拟各种HTTP requests<br>从常用的 GET、POST 到 RESTful 的 PUT 、 DELETE …等等。 甚至还可以发送文件、送出额外的 header。</p>\n<h3 id=\"Collection-功能（测试集合）\"><a href=\"#Collection-功能（测试集合）\" class=\"headerlink\" title=\"Collection 功能（测试集合）\"></a>Collection 功能（测试集合）</h3><p>Collection 是 requests的集合，在做完一個测试的時候， 你可以把這次的 request 存到特定的 Collection 里面，如此一來，下次要做同样的测试时，就不需要重新输入。而且一个collection可以包含多条request，如果我们把一个request当成一个test case，那collection就可以看成是一个test suite。通过collection的归类，我们可以良好的分类测试软件所提供的API.而且 Collection 还可以 Import 或是 Share 出來，让团队里面的所有人共享你建立起來的 Collection。</p>\n<h3 id=\"人性化的Response整理\"><a href=\"#人性化的Response整理\" class=\"headerlink\" title=\"人性化的Response整理\"></a>人性化的Response整理</h3><p>一般在用其他工具來测试的時候，response的内容通常都是纯文字的 raw， 但如果是 JSON ，就是塞成一整行的 JSON。这会造成阅读的障碍 ，而 Postman 可以针对response内容的格式自动美化。 JSON、 XML 或是 HTML 都會整理成我们可以阅读的格式<br>内置测试脚本语言<br>Postman支持编写测试脚本，可以快速的检查request的结果，并返回测试结果</p>\n<h3 id=\"设定变量与环境\"><a href=\"#设定变量与环境\" class=\"headerlink\" title=\"设定变量与环境\"></a>设定变量与环境</h3><p>Postman 可以自由 设定变量与Environment，一般我们在编辑request，校验response的时候，总会需要重复输入某些字符，比如url，postman允许我们设定变量来保存这些值。并且把变量保存在不同的环境中。比如，我們可能会有多种环境， development 、 staging 或 local， 而这几种环境中的 request URL 也各不相同，但我们可以在不同的环境中设定同样的变量，只是变量的值不一样，这样我们就不用修改我们的测试脚本，而测试不同的环境。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>从chrome的扩展程序中安装</p>\n<h3 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h3><p>打开postman之后如下图所示,左边是项目具体的接口,右上上面是请求链接,请求体,右边下面是具体的响应体</p>\n<h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h3><p>要组装一条Request, URL永远是你首先要填的内容，在Postman里面你曾输入过的URL是可以通过下拉自动补全的哦。如果你点击Params按钮，Postman会弹出一个键值编辑器，你可以在哪里输入URL的Parameter，Postman会帮你自动加入到URL当中，反之，如果你的URL当中已经有了参数，那Postman会在你打开键值编辑器的时候把参数自动载入<br>Headers<br>点击’Headers’按钮，Postman同样会弹出一个键值编辑器。在这里，你可以随意添加你想要的Header attribute，同样Postman为我们通过了很贴心的auto-complete功能，敲入一个字母，你可以从下拉菜单里选择你想要的标准atrribute<br>Method<br>要选择Request的Method是很简单的，Postman支持所有的Method，而一旦你选择了Method，Postman的request body编辑器会根据的你选择，自动的发生改变<br>Request Body<br>如果我们要创建的request是类似于POST，那我们就需要编辑Request Body，Postman根据body type的不同，提供了4中编辑方式：</p>\n<h3 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h3><p>cookies<br>分开打包的应用程序运行在沙箱浏览器,它不能访问cookie设置浏览器内。这种限制也可以使用拦截器扩展。</p>\n<p>身份验证Authentication<br>postman有一个helpers可以帮助我们简化一些重复和复杂的任务。当前的一套helpers可以帮助你解决一些authentication protocols的问题。</p>\n<p>Basic Auth<br>填写用户名和密码，点击Refresh headers</p>\n<p>Digest Auth<br>要比Basic Auth复杂的多。使用当前填写的值生成authorization header。所以在生成header之前要确保设置的正确性。如果当前的header已经存在，postman会移除之前的header。</p>\n<p>OAuth 1.0a<br>postman的OAuth helper让你签署支持OAuth 1.0基于身份验证的请求。OAuth不用获取access token,你需要去API提供者获取的。OAuth 1.0可以在header或者查询参数中设置value。</p>\n<p>OAuth 2.0<br>postman支持获得OAuth 2.0 token并添加到requests中。</p>\n<p>Writting Test<br>Postman的Tests标签可以用来写测试：</p>\n<p>本质上是javascript code，可以为tests object设置values。这里使用描述性文字作为key，检验body中的各种情况，当然你可以创建任意多的key，这取决于你需要测试多少点。 tests也会随着request保存到collection中。api测试保证前端后台都能正常的于api协作工作，而不用在出错时猜测是哪里的问题。 需要在request的test中创建了test后，再进行request，test的结果在body的test中查看。 注意： 1.这里的key描述必须是唯一的，否则相同描述只会执行第一个。 2.这里的key可以使用中文。 例子： tests[“Body contains user_id”] = responseBody.has(“user_id”) 这里描述性的key为：Body contains user_id。检测点为：responseBody.has(“user_id”)，意思是检测返回的body中是否包含”user_id”这个字段。<br>查看responses中的Tests结果：记过显示每个key,也就是我们测试点的具体结果，是否通过。</p>\n<p>Testing Sandbox<br>postman的测试是运行在沙箱环境，是与app独立的。查看什么在沙箱中是可用的，参见Sandbox documentation.</p>\n<p>Snippets<br>用于快速添加常用的测试代码。可以自定义snippets。</p>\n<p>Viewing results<br>postman每次执行request的时候，会执行tests。测试结果会在tests的tab上面显示一个通过的数量。</p>\n<p>Testing Sandbox<br>Testing examples<br>测试代码会在发送request并且接收到responses后执行。</p>\n<p>1.设置环境变量 postman.setEnvironmentVariable(“key”, “value”);<br>2.设置全局变量 postman.setGlobalVariable(“key”, “value”);<br>3.检查response body中是否包含某个string tests[“Body matches string”] = responseBody.has(“string_you_want_to_search”);<br>4.检测JSON中的某个值是否等于预期的值<br>var data = JSON.parse(responseBody);<br>tests[“Your test name”] = data.value === 100;<br>JSON.parse()方法，把json字符串转化为对象。parse()会进行json格式的检查是一个安全的函数。 如：检查json中某个数组元素的个数(这里检测programs的长度)<br>var data = JSON.parse(responseBody);<br>tests[“program’s lenght”] = data.programs.length === 5;<br>5.转换XML body为JSON对象 var jsonObject = xml2Json(responseBody);<br>6.检查response body是否与某个string相等 tests[“Body is correct”] = responseBody === “response_body_string”;<br>7.测试response Headers中的某个元素是否存在(如:Content-Type)<br>tests[“Content-Type is present”] = postman.getResponseHeader(“Content-Type”);<br>//getResponseHeader()方法会返回header的值，如果该值存在<br>或者：<br>tests[“Content-Type is present”] = responseHeaders.hasOwnProperty(“Content-Type”);<br>上面的方法，不区分大小写。下面的方法，要区分大小写。</p>\n<p>8.验证Status code的值 tests[“Status code is 200”] = responseCode.code === 200;</p>\n<p>9.验证Response time是否小于某个值 tests[“Response time is less than 200ms”] = responseTime &lt; 200;<br>10.name是否包含某个值 tests[“Status code name has string”] = responseCode.name.has(“Created”);<br>11.POST 请求的状态响应码是否是某个值 tests[“Successful POST request”] = responseCode.code === 201 || responseCode.code === 202;<br>12.很小的JSON数据验证器<br>var schema = {<br>“items”: {<br>“type”: “boolean”<br>}<br>};<br>var data1 = [true, false];<br>var data2 = [true, 123];<br>console.log(tv4.error);<br>tests[“Valid Data1”] = tv4.validate(data1, schema);<br>tests[“Valid Data2”] = tv4.validate(data2, schema);<br>结果：<br>运行Collections<br>postman允许你运行collection，你可以运行任意的次数。 最后会给出一个整体运行的结果。会保存每一次运行的结果，提供给你比较每一次运行解雇的不同。<br>选择collection，选择环境。点击运行按钮。</p>\n<p>在需要csv和json文件的地方记得添加。<br>运行collection测试会在另一个窗口运行。如果需要在main窗口修改东西，在新窗口能正常读取。</p>\n<p>参考文档：</p>\n<p><a href=\"https://juejin.im/entry/57597a62a341310061337885\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/57597a62a341310061337885</a></p>\n<p><a href=\"http://www.jianshu.com/p/9d36e77fab9e\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/9d36e77fab9e</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjomh75ti0007zz3g764gsyve","tag_id":"cjomh75tf0004zz3gw1631p4e","_id":"cjomh75tm000azz3gqyz1o07v"},{"post_id":"cjomh75ta0001zz3g2qtt67zl","tag_id":"cjomh75tf0004zz3gw1631p4e","_id":"cjomh75to000czz3g08r90lqs"},{"post_id":"cjomh75td0003zz3gm09apzb7","tag_id":"cjomh75tf0004zz3gw1631p4e","_id":"cjomh75tq000fzz3gd6p2liqz"},{"post_id":"cjomh75to000dzz3gixqey55a","tag_id":"cjomh75tf0004zz3gw1631p4e","_id":"cjomh75tr000gzz3gvaj1xe23"},{"post_id":"cjomh75th0006zz3gc6yg7fdf","tag_id":"cjomh75tf0004zz3gw1631p4e","_id":"cjomh75tr000izz3g2g16t06l"},{"post_id":"cjomh75tk0008zz3g9i02q2na","tag_id":"cjomh75tr000hzz3grveojsro","_id":"cjomh75ts000kzz3gvcbpzfid"},{"post_id":"cjomh75tm000bzz3gpyopvoqj","tag_id":"cjomh75tr000jzz3gz9f06uqe","_id":"cjomh75ts000lzz3gyortiq2d"}],"Tag":[{"name":"Android","_id":"cjomh75tf0004zz3gw1631p4e"},{"name":"前端","_id":"cjomh75tr000hzz3grveojsro"},{"name":"小程序","_id":"cjomh75tr000jzz3gz9f06uqe"}]}}